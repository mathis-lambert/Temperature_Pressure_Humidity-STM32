
BL475E IOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  08009de8  08009de8  00019de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3b0  0800a3b0  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3b0  0800a3b0  0001a3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3b8  0800a3b8  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3b8  0800a3b8  0001a3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3bc  0800a3bc  0001a3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800a3c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001074  20000100  0800a4c0  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001174  0800a4c0  00021174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f136  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004128  00000000  00000000  0003f266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b20  00000000  00000000  00043390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001978  00000000  00000000  00044eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ac1f  00000000  00000000  00046828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f95d  00000000  00000000  00071447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9170  00000000  00000000  00090da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00189f14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007edc  00000000  00000000  00189f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009dd0 	.word	0x08009dd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	08009dd0 	.word	0x08009dd0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2iz>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d215      	bcs.n	800062e <__aeabi_d2iz+0x36>
 8000602:	d511      	bpl.n	8000628 <__aeabi_d2iz+0x30>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d912      	bls.n	8000634 <__aeabi_d2iz+0x3c>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800061e:	fa23 f002 	lsr.w	r0, r3, r2
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	4770      	bx	lr
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	4770      	bx	lr
 800062e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000632:	d105      	bne.n	8000640 <__aeabi_d2iz+0x48>
 8000634:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b974 	b.w	8000948 <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	4604      	mov	r4, r0
 8000680:	468e      	mov	lr, r1
 8000682:	2b00      	cmp	r3, #0
 8000684:	d14d      	bne.n	8000722 <__udivmoddi4+0xaa>
 8000686:	428a      	cmp	r2, r1
 8000688:	4694      	mov	ip, r2
 800068a:	d969      	bls.n	8000760 <__udivmoddi4+0xe8>
 800068c:	fab2 f282 	clz	r2, r2
 8000690:	b152      	cbz	r2, 80006a8 <__udivmoddi4+0x30>
 8000692:	fa01 f302 	lsl.w	r3, r1, r2
 8000696:	f1c2 0120 	rsb	r1, r2, #32
 800069a:	fa20 f101 	lsr.w	r1, r0, r1
 800069e:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a2:	ea41 0e03 	orr.w	lr, r1, r3
 80006a6:	4094      	lsls	r4, r2
 80006a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006ac:	0c21      	lsrs	r1, r4, #16
 80006ae:	fbbe f6f8 	udiv	r6, lr, r8
 80006b2:	fa1f f78c 	uxth.w	r7, ip
 80006b6:	fb08 e316 	mls	r3, r8, r6, lr
 80006ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006be:	fb06 f107 	mul.w	r1, r6, r7
 80006c2:	4299      	cmp	r1, r3
 80006c4:	d90a      	bls.n	80006dc <__udivmoddi4+0x64>
 80006c6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ce:	f080 811f 	bcs.w	8000910 <__udivmoddi4+0x298>
 80006d2:	4299      	cmp	r1, r3
 80006d4:	f240 811c 	bls.w	8000910 <__udivmoddi4+0x298>
 80006d8:	3e02      	subs	r6, #2
 80006da:	4463      	add	r3, ip
 80006dc:	1a5b      	subs	r3, r3, r1
 80006de:	b2a4      	uxth	r4, r4
 80006e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006e4:	fb08 3310 	mls	r3, r8, r0, r3
 80006e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006ec:	fb00 f707 	mul.w	r7, r0, r7
 80006f0:	42a7      	cmp	r7, r4
 80006f2:	d90a      	bls.n	800070a <__udivmoddi4+0x92>
 80006f4:	eb1c 0404 	adds.w	r4, ip, r4
 80006f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006fc:	f080 810a 	bcs.w	8000914 <__udivmoddi4+0x29c>
 8000700:	42a7      	cmp	r7, r4
 8000702:	f240 8107 	bls.w	8000914 <__udivmoddi4+0x29c>
 8000706:	4464      	add	r4, ip
 8000708:	3802      	subs	r0, #2
 800070a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800070e:	1be4      	subs	r4, r4, r7
 8000710:	2600      	movs	r6, #0
 8000712:	b11d      	cbz	r5, 800071c <__udivmoddi4+0xa4>
 8000714:	40d4      	lsrs	r4, r2
 8000716:	2300      	movs	r3, #0
 8000718:	e9c5 4300 	strd	r4, r3, [r5]
 800071c:	4631      	mov	r1, r6
 800071e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000722:	428b      	cmp	r3, r1
 8000724:	d909      	bls.n	800073a <__udivmoddi4+0xc2>
 8000726:	2d00      	cmp	r5, #0
 8000728:	f000 80ef 	beq.w	800090a <__udivmoddi4+0x292>
 800072c:	2600      	movs	r6, #0
 800072e:	e9c5 0100 	strd	r0, r1, [r5]
 8000732:	4630      	mov	r0, r6
 8000734:	4631      	mov	r1, r6
 8000736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073a:	fab3 f683 	clz	r6, r3
 800073e:	2e00      	cmp	r6, #0
 8000740:	d14a      	bne.n	80007d8 <__udivmoddi4+0x160>
 8000742:	428b      	cmp	r3, r1
 8000744:	d302      	bcc.n	800074c <__udivmoddi4+0xd4>
 8000746:	4282      	cmp	r2, r0
 8000748:	f200 80f9 	bhi.w	800093e <__udivmoddi4+0x2c6>
 800074c:	1a84      	subs	r4, r0, r2
 800074e:	eb61 0303 	sbc.w	r3, r1, r3
 8000752:	2001      	movs	r0, #1
 8000754:	469e      	mov	lr, r3
 8000756:	2d00      	cmp	r5, #0
 8000758:	d0e0      	beq.n	800071c <__udivmoddi4+0xa4>
 800075a:	e9c5 4e00 	strd	r4, lr, [r5]
 800075e:	e7dd      	b.n	800071c <__udivmoddi4+0xa4>
 8000760:	b902      	cbnz	r2, 8000764 <__udivmoddi4+0xec>
 8000762:	deff      	udf	#255	; 0xff
 8000764:	fab2 f282 	clz	r2, r2
 8000768:	2a00      	cmp	r2, #0
 800076a:	f040 8092 	bne.w	8000892 <__udivmoddi4+0x21a>
 800076e:	eba1 010c 	sub.w	r1, r1, ip
 8000772:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000776:	fa1f fe8c 	uxth.w	lr, ip
 800077a:	2601      	movs	r6, #1
 800077c:	0c20      	lsrs	r0, r4, #16
 800077e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000782:	fb07 1113 	mls	r1, r7, r3, r1
 8000786:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800078a:	fb0e f003 	mul.w	r0, lr, r3
 800078e:	4288      	cmp	r0, r1
 8000790:	d908      	bls.n	80007a4 <__udivmoddi4+0x12c>
 8000792:	eb1c 0101 	adds.w	r1, ip, r1
 8000796:	f103 38ff 	add.w	r8, r3, #4294967295
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x12a>
 800079c:	4288      	cmp	r0, r1
 800079e:	f200 80cb 	bhi.w	8000938 <__udivmoddi4+0x2c0>
 80007a2:	4643      	mov	r3, r8
 80007a4:	1a09      	subs	r1, r1, r0
 80007a6:	b2a4      	uxth	r4, r4
 80007a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007ac:	fb07 1110 	mls	r1, r7, r0, r1
 80007b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007b4:	fb0e fe00 	mul.w	lr, lr, r0
 80007b8:	45a6      	cmp	lr, r4
 80007ba:	d908      	bls.n	80007ce <__udivmoddi4+0x156>
 80007bc:	eb1c 0404 	adds.w	r4, ip, r4
 80007c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007c4:	d202      	bcs.n	80007cc <__udivmoddi4+0x154>
 80007c6:	45a6      	cmp	lr, r4
 80007c8:	f200 80bb 	bhi.w	8000942 <__udivmoddi4+0x2ca>
 80007cc:	4608      	mov	r0, r1
 80007ce:	eba4 040e 	sub.w	r4, r4, lr
 80007d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007d6:	e79c      	b.n	8000712 <__udivmoddi4+0x9a>
 80007d8:	f1c6 0720 	rsb	r7, r6, #32
 80007dc:	40b3      	lsls	r3, r6
 80007de:	fa22 fc07 	lsr.w	ip, r2, r7
 80007e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007e6:	fa20 f407 	lsr.w	r4, r0, r7
 80007ea:	fa01 f306 	lsl.w	r3, r1, r6
 80007ee:	431c      	orrs	r4, r3
 80007f0:	40f9      	lsrs	r1, r7
 80007f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007f6:	fa00 f306 	lsl.w	r3, r0, r6
 80007fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80007fe:	0c20      	lsrs	r0, r4, #16
 8000800:	fa1f fe8c 	uxth.w	lr, ip
 8000804:	fb09 1118 	mls	r1, r9, r8, r1
 8000808:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800080c:	fb08 f00e 	mul.w	r0, r8, lr
 8000810:	4288      	cmp	r0, r1
 8000812:	fa02 f206 	lsl.w	r2, r2, r6
 8000816:	d90b      	bls.n	8000830 <__udivmoddi4+0x1b8>
 8000818:	eb1c 0101 	adds.w	r1, ip, r1
 800081c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000820:	f080 8088 	bcs.w	8000934 <__udivmoddi4+0x2bc>
 8000824:	4288      	cmp	r0, r1
 8000826:	f240 8085 	bls.w	8000934 <__udivmoddi4+0x2bc>
 800082a:	f1a8 0802 	sub.w	r8, r8, #2
 800082e:	4461      	add	r1, ip
 8000830:	1a09      	subs	r1, r1, r0
 8000832:	b2a4      	uxth	r4, r4
 8000834:	fbb1 f0f9 	udiv	r0, r1, r9
 8000838:	fb09 1110 	mls	r1, r9, r0, r1
 800083c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000840:	fb00 fe0e 	mul.w	lr, r0, lr
 8000844:	458e      	cmp	lr, r1
 8000846:	d908      	bls.n	800085a <__udivmoddi4+0x1e2>
 8000848:	eb1c 0101 	adds.w	r1, ip, r1
 800084c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000850:	d26c      	bcs.n	800092c <__udivmoddi4+0x2b4>
 8000852:	458e      	cmp	lr, r1
 8000854:	d96a      	bls.n	800092c <__udivmoddi4+0x2b4>
 8000856:	3802      	subs	r0, #2
 8000858:	4461      	add	r1, ip
 800085a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800085e:	fba0 9402 	umull	r9, r4, r0, r2
 8000862:	eba1 010e 	sub.w	r1, r1, lr
 8000866:	42a1      	cmp	r1, r4
 8000868:	46c8      	mov	r8, r9
 800086a:	46a6      	mov	lr, r4
 800086c:	d356      	bcc.n	800091c <__udivmoddi4+0x2a4>
 800086e:	d053      	beq.n	8000918 <__udivmoddi4+0x2a0>
 8000870:	b15d      	cbz	r5, 800088a <__udivmoddi4+0x212>
 8000872:	ebb3 0208 	subs.w	r2, r3, r8
 8000876:	eb61 010e 	sbc.w	r1, r1, lr
 800087a:	fa01 f707 	lsl.w	r7, r1, r7
 800087e:	fa22 f306 	lsr.w	r3, r2, r6
 8000882:	40f1      	lsrs	r1, r6
 8000884:	431f      	orrs	r7, r3
 8000886:	e9c5 7100 	strd	r7, r1, [r5]
 800088a:	2600      	movs	r6, #0
 800088c:	4631      	mov	r1, r6
 800088e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000892:	f1c2 0320 	rsb	r3, r2, #32
 8000896:	40d8      	lsrs	r0, r3
 8000898:	fa0c fc02 	lsl.w	ip, ip, r2
 800089c:	fa21 f303 	lsr.w	r3, r1, r3
 80008a0:	4091      	lsls	r1, r2
 80008a2:	4301      	orrs	r1, r0
 80008a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a8:	fa1f fe8c 	uxth.w	lr, ip
 80008ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80008b0:	fb07 3610 	mls	r6, r7, r0, r3
 80008b4:	0c0b      	lsrs	r3, r1, #16
 80008b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008ba:	fb00 f60e 	mul.w	r6, r0, lr
 80008be:	429e      	cmp	r6, r3
 80008c0:	fa04 f402 	lsl.w	r4, r4, r2
 80008c4:	d908      	bls.n	80008d8 <__udivmoddi4+0x260>
 80008c6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80008ce:	d22f      	bcs.n	8000930 <__udivmoddi4+0x2b8>
 80008d0:	429e      	cmp	r6, r3
 80008d2:	d92d      	bls.n	8000930 <__udivmoddi4+0x2b8>
 80008d4:	3802      	subs	r0, #2
 80008d6:	4463      	add	r3, ip
 80008d8:	1b9b      	subs	r3, r3, r6
 80008da:	b289      	uxth	r1, r1
 80008dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80008e0:	fb07 3316 	mls	r3, r7, r6, r3
 80008e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e8:	fb06 f30e 	mul.w	r3, r6, lr
 80008ec:	428b      	cmp	r3, r1
 80008ee:	d908      	bls.n	8000902 <__udivmoddi4+0x28a>
 80008f0:	eb1c 0101 	adds.w	r1, ip, r1
 80008f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008f8:	d216      	bcs.n	8000928 <__udivmoddi4+0x2b0>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d914      	bls.n	8000928 <__udivmoddi4+0x2b0>
 80008fe:	3e02      	subs	r6, #2
 8000900:	4461      	add	r1, ip
 8000902:	1ac9      	subs	r1, r1, r3
 8000904:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000908:	e738      	b.n	800077c <__udivmoddi4+0x104>
 800090a:	462e      	mov	r6, r5
 800090c:	4628      	mov	r0, r5
 800090e:	e705      	b.n	800071c <__udivmoddi4+0xa4>
 8000910:	4606      	mov	r6, r0
 8000912:	e6e3      	b.n	80006dc <__udivmoddi4+0x64>
 8000914:	4618      	mov	r0, r3
 8000916:	e6f8      	b.n	800070a <__udivmoddi4+0x92>
 8000918:	454b      	cmp	r3, r9
 800091a:	d2a9      	bcs.n	8000870 <__udivmoddi4+0x1f8>
 800091c:	ebb9 0802 	subs.w	r8, r9, r2
 8000920:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000924:	3801      	subs	r0, #1
 8000926:	e7a3      	b.n	8000870 <__udivmoddi4+0x1f8>
 8000928:	4646      	mov	r6, r8
 800092a:	e7ea      	b.n	8000902 <__udivmoddi4+0x28a>
 800092c:	4620      	mov	r0, r4
 800092e:	e794      	b.n	800085a <__udivmoddi4+0x1e2>
 8000930:	4640      	mov	r0, r8
 8000932:	e7d1      	b.n	80008d8 <__udivmoddi4+0x260>
 8000934:	46d0      	mov	r8, sl
 8000936:	e77b      	b.n	8000830 <__udivmoddi4+0x1b8>
 8000938:	3b02      	subs	r3, #2
 800093a:	4461      	add	r1, ip
 800093c:	e732      	b.n	80007a4 <__udivmoddi4+0x12c>
 800093e:	4630      	mov	r0, r6
 8000940:	e709      	b.n	8000756 <__udivmoddi4+0xde>
 8000942:	4464      	add	r4, ip
 8000944:	3802      	subs	r0, #2
 8000946:	e742      	b.n	80007ce <__udivmoddi4+0x156>

08000948 <__aeabi_idiv0>:
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <transmit_string>:
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_SPI1_Init(void);
static void MX_UART4_Init(void);
void transmit_string(char *StrArg)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)StrArg, strlen(StrArg), 10);
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff fc3b 	bl	80001d0 <strlen>
 800095a:	4603      	mov	r3, r0
 800095c:	b29a      	uxth	r2, r3
 800095e:	230a      	movs	r3, #10
 8000960:	6879      	ldr	r1, [r7, #4]
 8000962:	4803      	ldr	r0, [pc, #12]	; (8000970 <transmit_string+0x24>)
 8000964:	f005 fdf6 	bl	8006554 <HAL_UART_Transmit>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000280 	.word	0x20000280

08000974 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 800097a:	af06      	add	r7, sp, #24
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097c:	f001 fd53 	bl	8002426 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000980:	f000 f9c4 	bl	8000d0c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000984:	f000 fb7e 	bl	8001084 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000988:	f000 fa22 	bl	8000dd0 <MX_DFSDM1_Init>
  MX_QUADSPI_Init();
 800098c:	f000 fa58 	bl	8000e40 <MX_QUADSPI_Init>
  MX_USART1_UART_Init();
 8000990:	f000 faea 	bl	8000f68 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000994:	f000 fb18 	bl	8000fc8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000998:	f000 fb46 	bl	8001028 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 800099c:	f000 fa76 	bl	8000e8c <MX_SPI1_Init>
  MX_UART4_Init();
 80009a0:	f000 fab2 	bl	8000f08 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  BSP_TSENSOR_Init();
 80009a4:	f001 fac2 	bl	8001f2c <BSP_TSENSOR_Init>
  BSP_HSENSOR_Init();
 80009a8:	f001 fa64 	bl	8001e74 <BSP_HSENSOR_Init>
  BSP_PSENSOR_Init();
 80009ac:	f001 fa90 	bl	8001ed0 <BSP_PSENSOR_Init>
  HAL_UART_Transmit(&huart1, msg1, sizeof(msg1), 10);
 80009b0:	230a      	movs	r3, #10
 80009b2:	2227      	movs	r2, #39	; 0x27
 80009b4:	49bd      	ldr	r1, [pc, #756]	; (8000cac <main+0x338>)
 80009b6:	48be      	ldr	r0, [pc, #760]	; (8000cb0 <main+0x33c>)
 80009b8:	f005 fdcc 	bl	8006554 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, msg2, sizeof(msg2), 10);
 80009bc:	230a      	movs	r3, #10
 80009be:	223d      	movs	r2, #61	; 0x3d
 80009c0:	49bc      	ldr	r1, [pc, #752]	; (8000cb4 <main+0x340>)
 80009c2:	48bb      	ldr	r0, [pc, #748]	; (8000cb0 <main+0x33c>)
 80009c4:	f005 fdc6 	bl	8006554 <HAL_UART_Transmit>

  while (1)
  {
    if (WIFI_Init() == WIFI_STATUS_OK)
 80009c8:	f007 fe0a 	bl	80085e0 <WIFI_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f040 8166 	bne.w	8000ca0 <main+0x32c>
      {
        transmit_string("> ERROR : CANNOT get MAC address\n");
        continue;
      }*/

      if (WIFI_Connect(WIFI_SSID, WIFI_PASSWD, 0x03) == WIFI_STATUS_OK)
 80009d4:	2203      	movs	r2, #3
 80009d6:	49b8      	ldr	r1, [pc, #736]	; (8000cb8 <main+0x344>)
 80009d8:	48b8      	ldr	r0, [pc, #736]	; (8000cbc <main+0x348>)
 80009da:	f007 fe2d 	bl	8008638 <WIFI_Connect>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	f040 8159 	bne.w	8000c98 <main+0x324>
      {
        /*transmit_string("Module connecte !! \n\n\r");*/

        if (WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 80009e6:	48b6      	ldr	r0, [pc, #728]	; (8000cc0 <main+0x34c>)
 80009e8:	f007 fe48 	bl	800867c <WIFI_GetIP_Address>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f040 814e 	bne.w	8000c90 <main+0x31c>
        {
          snprintf(str_ip, 100, "> Le module WIFI a l'adresse IP : %d.%d.%d.%d\n\n\r", IP_Addr[0], IP_Addr[1], IP_Addr[2], IP_Addr[3]);
 80009f4:	4bb2      	ldr	r3, [pc, #712]	; (8000cc0 <main+0x34c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	4bb1      	ldr	r3, [pc, #708]	; (8000cc0 <main+0x34c>)
 80009fc:	785b      	ldrb	r3, [r3, #1]
 80009fe:	461a      	mov	r2, r3
 8000a00:	4baf      	ldr	r3, [pc, #700]	; (8000cc0 <main+0x34c>)
 8000a02:	789b      	ldrb	r3, [r3, #2]
 8000a04:	4619      	mov	r1, r3
 8000a06:	4bae      	ldr	r3, [pc, #696]	; (8000cc0 <main+0x34c>)
 8000a08:	78db      	ldrb	r3, [r3, #3]
 8000a0a:	9302      	str	r3, [sp, #8]
 8000a0c:	9101      	str	r1, [sp, #4]
 8000a0e:	9200      	str	r2, [sp, #0]
 8000a10:	4603      	mov	r3, r0
 8000a12:	4aac      	ldr	r2, [pc, #688]	; (8000cc4 <main+0x350>)
 8000a14:	2164      	movs	r1, #100	; 0x64
 8000a16:	48ac      	ldr	r0, [pc, #688]	; (8000cc8 <main+0x354>)
 8000a18:	f007 ff26 	bl	8008868 <sniprintf>
          HAL_UART_Transmit(&huart1, (uint8_t *)str_ip, sizeof(str_ip), 100);
 8000a1c:	2364      	movs	r3, #100	; 0x64
 8000a1e:	2264      	movs	r2, #100	; 0x64
 8000a20:	49a9      	ldr	r1, [pc, #676]	; (8000cc8 <main+0x354>)
 8000a22:	48a3      	ldr	r0, [pc, #652]	; (8000cb0 <main+0x33c>)
 8000a24:	f005 fd96 	bl	8006554 <HAL_UART_Transmit>

          uint32_t socket = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
          const char *name = "api.mathislambert.fr";
 8000a2e:	4ba7      	ldr	r3, [pc, #668]	; (8000ccc <main+0x358>)
 8000a30:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
          uint8_t ipaddr[] = {179, 61, 246, 134};
 8000a34:	4ba6      	ldr	r3, [pc, #664]	; (8000cd0 <main+0x35c>)
 8000a36:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
          uint16_t port = 80;
 8000a3a:	2350      	movs	r3, #80	; 0x50
 8000a3c:	f8a7 33ce 	strh.w	r3, [r7, #974]	; 0x3ce
          uint16_t local_port = 61534;
 8000a40:	f24f 035e 	movw	r3, #61534	; 0xf05e
 8000a44:	f8a7 33cc 	strh.w	r3, [r7, #972]	; 0x3cc
          while (1)
          {
            if (WIFI_OpenClientConnection(socket, WIFI_TCP_PROTOCOL, name, ipaddr, port, local_port) == WIFI_STATUS_OK)
 8000a48:	f507 7266 	add.w	r2, r7, #920	; 0x398
 8000a4c:	f8b7 33cc 	ldrh.w	r3, [r7, #972]	; 0x3cc
 8000a50:	9301      	str	r3, [sp, #4]
 8000a52:	f8b7 33ce 	ldrh.w	r3, [r7, #974]	; 0x3ce
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	f8d7 03d4 	ldr.w	r0, [r7, #980]	; 0x3d4
 8000a64:	f007 fe26 	bl	80086b4 <WIFI_OpenClientConnection>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f040 810c 	bne.w	8000c88 <main+0x314>
            {

              /*transmit_string("> Connected to the server ! \n\r");*/

              temp_value = BSP_TSENSOR_ReadTemp();
 8000a70:	f001 fa78 	bl	8001f64 <BSP_TSENSOR_ReadTemp>
 8000a74:	eef0 7a40 	vmov.f32	s15, s0
 8000a78:	4b96      	ldr	r3, [pc, #600]	; (8000cd4 <main+0x360>)
 8000a7a:	edc3 7a00 	vstr	s15, [r3]
              h_value = BSP_HSENSOR_ReadHumidity();
 8000a7e:	f001 fa19 	bl	8001eb4 <BSP_HSENSOR_ReadHumidity>
 8000a82:	eef0 7a40 	vmov.f32	s15, s0
 8000a86:	4b94      	ldr	r3, [pc, #592]	; (8000cd8 <main+0x364>)
 8000a88:	edc3 7a00 	vstr	s15, [r3]
              p_value = BSP_PSENSOR_ReadPressure();
 8000a8c:	f001 fa40 	bl	8001f10 <BSP_PSENSOR_ReadPressure>
 8000a90:	eef0 7a40 	vmov.f32	s15, s0
 8000a94:	4b91      	ldr	r3, [pc, #580]	; (8000cdc <main+0x368>)
 8000a96:	edc3 7a00 	vstr	s15, [r3]
              int tmpInt1 = temp_value;
 8000a9a:	4b8e      	ldr	r3, [pc, #568]	; (8000cd4 <main+0x360>)
 8000a9c:	edd3 7a00 	vldr	s15, [r3]
 8000aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aa4:	ee17 3a90 	vmov	r3, s15
 8000aa8:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
              int humInt1 = h_value;
 8000aac:	4b8a      	ldr	r3, [pc, #552]	; (8000cd8 <main+0x364>)
 8000aae:	edd3 7a00 	vldr	s15, [r3]
 8000ab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ab6:	ee17 3a90 	vmov	r3, s15
 8000aba:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
              int presInt1 = p_value;
 8000abe:	4b87      	ldr	r3, [pc, #540]	; (8000cdc <main+0x368>)
 8000ac0:	edd3 7a00 	vldr	s15, [r3]
 8000ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ac8:	ee17 3a90 	vmov	r3, s15
 8000acc:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
              float tmpFrac = temp_value - tmpInt1;
 8000ad0:	4b80      	ldr	r3, [pc, #512]	; (8000cd4 <main+0x360>)
 8000ad2:	ed93 7a00 	vldr	s14, [r3]
 8000ad6:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8000ada:	ee07 3a90 	vmov	s15, r3
 8000ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ae6:	edc7 7aef 	vstr	s15, [r7, #956]	; 0x3bc
              float humFrac = h_value - humInt1;
 8000aea:	4b7b      	ldr	r3, [pc, #492]	; (8000cd8 <main+0x364>)
 8000aec:	ed93 7a00 	vldr	s14, [r3]
 8000af0:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8000af4:	ee07 3a90 	vmov	s15, r3
 8000af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b00:	edc7 7aee 	vstr	s15, [r7, #952]	; 0x3b8
              float presFrac = p_value - presInt1;
 8000b04:	4b75      	ldr	r3, [pc, #468]	; (8000cdc <main+0x368>)
 8000b06:	ed93 7a00 	vldr	s14, [r3]
 8000b0a:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8000b0e:	ee07 3a90 	vmov	s15, r3
 8000b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b1a:	edc7 7aed 	vstr	s15, [r7, #948]	; 0x3b4
              int tmpInt2 = trunc(tmpFrac * 100);
 8000b1e:	edd7 7aef 	vldr	s15, [r7, #956]	; 0x3bc
 8000b22:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8000ce0 <main+0x36c>
 8000b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b2a:	ee17 0a90 	vmov	r0, s15
 8000b2e:	f7ff fd0b 	bl	8000548 <__aeabi_f2d>
 8000b32:	4602      	mov	r2, r0
 8000b34:	460b      	mov	r3, r1
 8000b36:	ec43 2b10 	vmov	d0, r2, r3
 8000b3a:	f009 f917 	bl	8009d6c <trunc>
 8000b3e:	ec53 2b10 	vmov	r2, r3, d0
 8000b42:	4610      	mov	r0, r2
 8000b44:	4619      	mov	r1, r3
 8000b46:	f7ff fd57 	bl	80005f8 <__aeabi_d2iz>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
              int humInt2 = trunc(humFrac * 100);
 8000b50:	edd7 7aee 	vldr	s15, [r7, #952]	; 0x3b8
 8000b54:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8000ce0 <main+0x36c>
 8000b58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b5c:	ee17 0a90 	vmov	r0, s15
 8000b60:	f7ff fcf2 	bl	8000548 <__aeabi_f2d>
 8000b64:	4602      	mov	r2, r0
 8000b66:	460b      	mov	r3, r1
 8000b68:	ec43 2b10 	vmov	d0, r2, r3
 8000b6c:	f009 f8fe 	bl	8009d6c <trunc>
 8000b70:	ec53 2b10 	vmov	r2, r3, d0
 8000b74:	4610      	mov	r0, r2
 8000b76:	4619      	mov	r1, r3
 8000b78:	f7ff fd3e 	bl	80005f8 <__aeabi_d2iz>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
              int presInt2 = trunc(presFrac * 100);
 8000b82:	edd7 7aed 	vldr	s15, [r7, #948]	; 0x3b4
 8000b86:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8000ce0 <main+0x36c>
 8000b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b8e:	ee17 0a90 	vmov	r0, s15
 8000b92:	f7ff fcd9 	bl	8000548 <__aeabi_f2d>
 8000b96:	4602      	mov	r2, r0
 8000b98:	460b      	mov	r3, r1
 8000b9a:	ec43 2b10 	vmov	d0, r2, r3
 8000b9e:	f009 f8e5 	bl	8009d6c <trunc>
 8000ba2:	ec53 2b10 	vmov	r2, r3, d0
 8000ba6:	4610      	mov	r0, r2
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f7ff fd25 	bl	80005f8 <__aeabi_d2iz>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8

              char json_data[150];
              snprintf(json_data, 150, "{\"values\": {\"temp\": %d.%02d, \"hum\": %d.%02d, \"pressure\": %d.%02d}}", tmpInt1, tmpInt2, humInt1, humInt2, presInt1, presInt2);
 8000bb4:	4638      	mov	r0, r7
 8000bb6:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8000bba:	9304      	str	r3, [sp, #16]
 8000bbc:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8000bc0:	9303      	str	r3, [sp, #12]
 8000bc2:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8000bc6:	9302      	str	r3, [sp, #8]
 8000bc8:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8000bcc:	9301      	str	r3, [sp, #4]
 8000bce:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8000bd8:	4a42      	ldr	r2, [pc, #264]	; (8000ce4 <main+0x370>)
 8000bda:	2196      	movs	r1, #150	; 0x96
 8000bdc:	f007 fe44 	bl	8008868 <sniprintf>

              unsigned char pdata[250];
              snprintf((char *)pdata, 250, "POST / HTTP/1.1\r\nHost: api.mathislambert.fr\r\nContent-Type: application/json\r\nContent-Length: %d\r\n\r\n%s\r\n", strlen(json_data), json_data); // données JSON
 8000be0:	463b      	mov	r3, r7
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff faf4 	bl	80001d0 <strlen>
 8000be8:	4602      	mov	r2, r0
 8000bea:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8000bee:	463b      	mov	r3, r7
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	4a3c      	ldr	r2, [pc, #240]	; (8000ce8 <main+0x374>)
 8000bf6:	21fa      	movs	r1, #250	; 0xfa
 8000bf8:	f007 fe36 	bl	8008868 <sniprintf>
              uint16_t Reqlen = sizeof(pdata) - 1;                                                                                                                                               // longueur des données
 8000bfc:	23f9      	movs	r3, #249	; 0xf9
 8000bfe:	f8a7 33a6 	strh.w	r3, [r7, #934]	; 0x3a6
              uint16_t SentDatalen;                                                                                                                                                              // nombre de données envoyées
              uint32_t Timeout = 10000;                                                                                                                                                          // 1 secondes de délai d'attente
 8000c02:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c06:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0

              if (WIFI_SendData(socket, (unsigned char *)pdata, Reqlen, &SentDatalen, Timeout) == WIFI_STATUS_OK)
 8000c0a:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8000c0e:	b2d8      	uxtb	r0, r3
 8000c10:	f207 3496 	addw	r4, r7, #918	; 0x396
 8000c14:	f8b7 23a6 	ldrh.w	r2, [r7, #934]	; 0x3a6
 8000c18:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8000c1c:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	4623      	mov	r3, r4
 8000c24:	f007 fd9c 	bl	8008760 <WIFI_SendData>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d128      	bne.n	8000c80 <main+0x30c>
              {
                /*transmit_string("> Data sent successfully \n\r");*/

                uint8_t RcvData[512];
                uint16_t RcvDatalen;
                uint32_t Timeout = 10000;
 8000c2e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c32:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c

                if (WIFI_ReceiveData(socket, RcvData, sizeof(RcvData), &RcvDatalen, Timeout) == WIFI_STATUS_OK)
 8000c36:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8000c3a:	b2d8      	uxtb	r0, r3
 8000c3c:	f507 7265 	add.w	r2, r7, #916	; 0x394
 8000c40:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8000c44:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c50:	f007 fda8 	bl	80087a4 <WIFI_ReceiveData>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10e      	bne.n	8000c78 <main+0x304>
                {
                  /*transmit_string("> Response received \n\r");*/

                  if (WIFI_CloseClientConnection(socket) == WIFI_STATUS_OK)
 8000c5a:	f8d7 03d4 	ldr.w	r0, [r7, #980]	; 0x3d4
 8000c5e:	f007 fd63 	bl	8008728 <WIFI_CloseClientConnection>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d103      	bne.n	8000c70 <main+0x2fc>
                  {
                    /*transmit_string("> Disconnected successfully \n\n\r");*/
                    HAL_Delay(300000);
 8000c68:	4820      	ldr	r0, [pc, #128]	; (8000cec <main+0x378>)
 8000c6a:	f001 fc51 	bl	8002510 <HAL_Delay>
            if (WIFI_OpenClientConnection(socket, WIFI_TCP_PROTOCOL, name, ipaddr, port, local_port) == WIFI_STATUS_OK)
 8000c6e:	e6eb      	b.n	8000a48 <main+0xd4>
                  }
                  else
                  {
                    transmit_string("> Impossible to disconnect \n\r");
 8000c70:	481f      	ldr	r0, [pc, #124]	; (8000cf0 <main+0x37c>)
 8000c72:	f7ff fe6b 	bl	800094c <transmit_string>
                    break;
 8000c76:	e017      	b.n	8000ca8 <main+0x334>
                  }
                }
                else
                {
                  transmit_string("> Error during data reception \n\r");
 8000c78:	481e      	ldr	r0, [pc, #120]	; (8000cf4 <main+0x380>)
 8000c7a:	f7ff fe67 	bl	800094c <transmit_string>
                  break;
 8000c7e:	e013      	b.n	8000ca8 <main+0x334>
                }
              }
              else
              {
                transmit_string("Unable to send date \n\r");
 8000c80:	481d      	ldr	r0, [pc, #116]	; (8000cf8 <main+0x384>)
 8000c82:	f7ff fe63 	bl	800094c <transmit_string>
                break;
 8000c86:	e00f      	b.n	8000ca8 <main+0x334>
              }
            }
            else
            {
              transmit_string("> Unable to connect to the server \n\n\r");
 8000c88:	481c      	ldr	r0, [pc, #112]	; (8000cfc <main+0x388>)
 8000c8a:	f7ff fe5f 	bl	800094c <transmit_string>
              break;
 8000c8e:	e00b      	b.n	8000ca8 <main+0x334>
            }
          }
        }
        else
        {
          transmit_string("> le module ES_WIFI ne peut pas obtenir l'adresse IP\n\r");
 8000c90:	481b      	ldr	r0, [pc, #108]	; (8000d00 <main+0x38c>)
 8000c92:	f7ff fe5b 	bl	800094c <transmit_string>
          continue;
 8000c96:	e007      	b.n	8000ca8 <main+0x334>
        }
      }
      else
      {
        transmit_string("Erreur de connexion du module \n\r");
 8000c98:	481a      	ldr	r0, [pc, #104]	; (8000d04 <main+0x390>)
 8000c9a:	f7ff fe57 	bl	800094c <transmit_string>
        continue;
 8000c9e:	e003      	b.n	8000ca8 <main+0x334>
      }
    }
    else
    {
      transmit_string("> ERROR initializing WIFI MODULE. \n\r");
 8000ca0:	4819      	ldr	r0, [pc, #100]	; (8000d08 <main+0x394>)
 8000ca2:	f7ff fe53 	bl	800094c <transmit_string>
      continue;
 8000ca6:	bf00      	nop
    if (WIFI_Init() == WIFI_STATUS_OK)
 8000ca8:	e68e      	b.n	80009c8 <main+0x54>
 8000caa:	bf00      	nop
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20000280 	.word	0x20000280
 8000cb4:	20000028 	.word	0x20000028
 8000cb8:	08009de8 	.word	0x08009de8
 8000cbc:	08009dfc 	.word	0x08009dfc
 8000cc0:	20000894 	.word	0x20000894
 8000cc4:	08009e10 	.word	0x08009e10
 8000cc8:	200008a4 	.word	0x200008a4
 8000ccc:	08009e44 	.word	0x08009e44
 8000cd0:	86f63db3 	.word	0x86f63db3
 8000cd4:	20000898 	.word	0x20000898
 8000cd8:	2000089c 	.word	0x2000089c
 8000cdc:	200008a0 	.word	0x200008a0
 8000ce0:	42c80000 	.word	0x42c80000
 8000ce4:	08009e5c 	.word	0x08009e5c
 8000ce8:	08009ea0 	.word	0x08009ea0
 8000cec:	000493e0 	.word	0x000493e0
 8000cf0:	08009f08 	.word	0x08009f08
 8000cf4:	08009f28 	.word	0x08009f28
 8000cf8:	08009f4c 	.word	0x08009f4c
 8000cfc:	08009f64 	.word	0x08009f64
 8000d00:	08009f8c 	.word	0x08009f8c
 8000d04:	08009fc4 	.word	0x08009fc4
 8000d08:	08009fe8 	.word	0x08009fe8

08000d0c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b096      	sub	sp, #88	; 0x58
 8000d10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	2244      	movs	r2, #68	; 0x44
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f007 fd9c 	bl	8008858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d20:	463b      	mov	r3, r7
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d32:	f003 f879 	bl	8003e28 <HAL_PWREx_ControlVoltageScaling>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d3c:	f000 fb54 	bl	80013e8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 8000d40:	f003 f854 	bl	8003dec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d44:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <SystemClock_Config+0xc0>)
 8000d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d4a:	4a20      	ldr	r2, [pc, #128]	; (8000dcc <SystemClock_Config+0xc0>)
 8000d4c:	f023 0318 	bic.w	r3, r3, #24
 8000d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 8000d54:	2314      	movs	r3, #20
 8000d56:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d64:	2360      	movs	r3, #96	; 0x60
 8000d66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d70:	2301      	movs	r3, #1
 8000d72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d74:	2328      	movs	r3, #40	; 0x28
 8000d76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d78:	2307      	movs	r3, #7
 8000d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f003 f96f 	bl	800406c <HAL_RCC_OscConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000d94:	f000 fb28 	bl	80013e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000d98:	230f      	movs	r3, #15
 8000d9a:	603b      	str	r3, [r7, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dac:	463b      	mov	r3, r7
 8000dae:	2104      	movs	r1, #4
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 fd37 	bl	8004824 <HAL_RCC_ClockConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000dbc:	f000 fb14 	bl	80013e8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
   */
  HAL_RCCEx_EnableMSIPLLMode();
 8000dc0:	f004 fa3e 	bl	8005240 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000dc4:	bf00      	nop
 8000dc6:	3758      	adds	r7, #88	; 0x58
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <MX_DFSDM1_Init>:
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_DFSDM1_Init+0x68>)
 8000dd6:	4a19      	ldr	r2, [pc, #100]	; (8000e3c <MX_DFSDM1_Init+0x6c>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_DFSDM1_Init+0x68>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_DFSDM1_Init+0x68>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_DFSDM1_Init+0x68>)
 8000de8:	2202      	movs	r2, #2
 8000dea:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_DFSDM1_Init+0x68>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_DFSDM1_Init+0x68>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_DFSDM1_Init+0x68>)
 8000dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dfe:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <MX_DFSDM1_Init+0x68>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_DFSDM1_Init+0x68>)
 8000e08:	2204      	movs	r2, #4
 8000e0a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <MX_DFSDM1_Init+0x68>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_DFSDM1_Init+0x68>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <MX_DFSDM1_Init+0x68>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_DFSDM1_Init+0x68>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <MX_DFSDM1_Init+0x68>)
 8000e26:	f001 fca9 	bl	800277c <HAL_DFSDM_ChannelInit>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000e30:	f000 fada 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	2000011c 	.word	0x2000011c
 8000e3c:	40016020 	.word	0x40016020

08000e40 <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_QUADSPI_Init+0x44>)
 8000e46:	4a10      	ldr	r2, [pc, #64]	; (8000e88 <MX_QUADSPI_Init+0x48>)
 8000e48:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_QUADSPI_Init+0x44>)
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_QUADSPI_Init+0x44>)
 8000e52:	2204      	movs	r2, #4
 8000e54:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <MX_QUADSPI_Init+0x44>)
 8000e58:	2210      	movs	r2, #16
 8000e5a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_QUADSPI_Init+0x44>)
 8000e5e:	2217      	movs	r2, #23
 8000e60:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <MX_QUADSPI_Init+0x44>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_QUADSPI_Init+0x44>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_QUADSPI_Init+0x44>)
 8000e70:	f003 f840 	bl	8003ef4 <HAL_QSPI_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000e7a:	f000 fab5 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000154 	.word	0x20000154
 8000e88:	a0001000 	.word	0xa0001000

08000e8c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000e92:	4a1c      	ldr	r2, [pc, #112]	; (8000f04 <MX_SPI1_Init+0x78>)
 8000e94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000e98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000ea6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000eaa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ebe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000eda:	2207      	movs	r2, #7
 8000edc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000ee6:	2208      	movs	r2, #8
 8000ee8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000eec:	f004 fb8a 	bl	8005604 <HAL_SPI_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ef6:	f000 fa77 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000198 	.word	0x20000198
 8000f04:	40013000 	.word	0x40013000

08000f08 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_UART4_Init+0x58>)
 8000f0e:	4a15      	ldr	r2, [pc, #84]	; (8000f64 <MX_UART4_Init+0x5c>)
 8000f10:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <MX_UART4_Init+0x58>)
 8000f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f18:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_UART4_Init+0x58>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <MX_UART4_Init+0x58>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_UART4_Init+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_UART4_Init+0x58>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <MX_UART4_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_UART4_Init+0x58>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <MX_UART4_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_UART4_Init+0x58>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_UART4_Init+0x58>)
 8000f4c:	f005 fab4 	bl	80064b8 <HAL_UART_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000f56:	f000 fa47 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200001fc 	.word	0x200001fc
 8000f64:	40004c00 	.word	0x40004c00

08000f68 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f6e:	4a15      	ldr	r2, [pc, #84]	; (8000fc4 <MX_USART1_UART_Init+0x5c>)
 8000f70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f8e:	220c      	movs	r2, #12
 8000f90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000fac:	f005 fa84 	bl	80064b8 <HAL_UART_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fb6:	f000 fa17 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000280 	.word	0x20000280
 8000fc4:	40013800 	.word	0x40013800

08000fc8 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_USART3_UART_Init+0x58>)
 8000fce:	4a15      	ldr	r2, [pc, #84]	; (8001024 <MX_USART3_UART_Init+0x5c>)
 8000fd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <MX_USART3_UART_Init+0x58>)
 8000fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_USART3_UART_Init+0x58>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_USART3_UART_Init+0x58>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_USART3_UART_Init+0x58>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_USART3_UART_Init+0x58>)
 8000fee:	220c      	movs	r2, #12
 8000ff0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <MX_USART3_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_USART3_UART_Init+0x58>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MX_USART3_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_USART3_UART_Init+0x58>)
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_USART3_UART_Init+0x58>)
 800100c:	f005 fa54 	bl	80064b8 <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001016:	f000 f9e7 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000304 	.word	0x20000304
 8001024:	40004800 	.word	0x40004800

08001028 <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800102e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001032:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001036:	2206      	movs	r2, #6
 8001038:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800103c:	2202      	movs	r2, #2
 800103e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001042:	2202      	movs	r2, #2
 8001044:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800105a:	2200      	movs	r2, #0
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800106c:	f002 fd75 	bl	8003b5a <HAL_PCD_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001076:	f000 f9b7 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000388 	.word	0x20000388

08001084 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800109a:	4bbc      	ldr	r3, [pc, #752]	; (800138c <MX_GPIO_Init+0x308>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	4abb      	ldr	r2, [pc, #748]	; (800138c <MX_GPIO_Init+0x308>)
 80010a0:	f043 0310 	orr.w	r3, r3, #16
 80010a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a6:	4bb9      	ldr	r3, [pc, #740]	; (800138c <MX_GPIO_Init+0x308>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	f003 0310 	and.w	r3, r3, #16
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b2:	4bb6      	ldr	r3, [pc, #728]	; (800138c <MX_GPIO_Init+0x308>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	4ab5      	ldr	r2, [pc, #724]	; (800138c <MX_GPIO_Init+0x308>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010be:	4bb3      	ldr	r3, [pc, #716]	; (800138c <MX_GPIO_Init+0x308>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	4bb0      	ldr	r3, [pc, #704]	; (800138c <MX_GPIO_Init+0x308>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	4aaf      	ldr	r2, [pc, #700]	; (800138c <MX_GPIO_Init+0x308>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d6:	4bad      	ldr	r3, [pc, #692]	; (800138c <MX_GPIO_Init+0x308>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	4baa      	ldr	r3, [pc, #680]	; (800138c <MX_GPIO_Init+0x308>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4aa9      	ldr	r2, [pc, #676]	; (800138c <MX_GPIO_Init+0x308>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4ba7      	ldr	r3, [pc, #668]	; (800138c <MX_GPIO_Init+0x308>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fa:	4ba4      	ldr	r3, [pc, #656]	; (800138c <MX_GPIO_Init+0x308>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4aa3      	ldr	r2, [pc, #652]	; (800138c <MX_GPIO_Init+0x308>)
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4ba1      	ldr	r3, [pc, #644]	; (800138c <MX_GPIO_Init+0x308>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin | ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001118:	489d      	ldr	r0, [pc, #628]	; (8001390 <MX_GPIO_Init+0x30c>)
 800111a:	f001 fef1 	bl	8002f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	f248 1104 	movw	r1, #33028	; 0x8104
 8001124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001128:	f001 feea 	bl	8002f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin | LED2_Pin | SPSGRF_915_SDN_Pin | ARD_D5_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001132:	4898      	ldr	r0, [pc, #608]	; (8001394 <MX_GPIO_Init+0x310>)
 8001134:	f001 fee4 	bl	8002f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin | PMOD_RESET_Pin | STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	f241 0181 	movw	r1, #4225	; 0x1081
 800113e:	4896      	ldr	r0, [pc, #600]	; (8001398 <MX_GPIO_Init+0x314>)
 8001140:	f001 fede 	bl	8002f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800114a:	4893      	ldr	r0, [pc, #588]	; (8001398 <MX_GPIO_Init+0x314>)
 800114c:	f001 fed8 	bl	8002f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001156:	4891      	ldr	r0, [pc, #580]	; (800139c <MX_GPIO_Init+0x318>)
 8001158:	f001 fed2 	bl	8002f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2120      	movs	r1, #32
 8001160:	488c      	ldr	r0, [pc, #560]	; (8001394 <MX_GPIO_Init+0x310>)
 8001162:	f001 fecd 	bl	8002f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2101      	movs	r1, #1
 800116a:	4889      	ldr	r0, [pc, #548]	; (8001390 <MX_GPIO_Init+0x30c>)
 800116c:	f001 fec8 	bl	8002f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin | ISM43362_RST_Pin | ISM43362_SPI3_CSN_Pin;
 8001170:	f240 1315 	movw	r3, #277	; 0x115
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4881      	ldr	r0, [pc, #516]	; (8001390 <MX_GPIO_Init+0x30c>)
 800118a:	f001 fc03 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin | SPSGRF_915_GPIO3_EXTI5_Pin | SPBTLE_RF_IRQ_EXTI6_Pin | ISM43362_DRDY_EXTI1_Pin;
 800118e:	236a      	movs	r3, #106	; 0x6a
 8001190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001192:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	487b      	ldr	r0, [pc, #492]	; (8001390 <MX_GPIO_Init+0x30c>)
 80011a4:	f001 fbf6 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80011a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	4877      	ldr	r0, [pc, #476]	; (800139c <MX_GPIO_Init+0x318>)
 80011c0:	f001 fbe8 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin | ARD_A4_Pin | ARD_A3_Pin | ARD_A2_Pin | ARD_A1_Pin | ARD_A0_Pin;
 80011c4:	233f      	movs	r3, #63	; 0x3f
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011c8:	230b      	movs	r3, #11
 80011ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	4871      	ldr	r0, [pc, #452]	; (800139c <MX_GPIO_Init+0x318>)
 80011d8:	f001 fbdc 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin;
 80011dc:	f248 1304 	movw	r3, #33028	; 0x8104
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f8:	f001 fbcc 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80011fc:	2308      	movs	r3, #8
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800120c:	2301      	movs	r3, #1
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121a:	f001 fbbb 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800121e:	2310      	movs	r3, #16
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001222:	230b      	movs	r3, #11
 8001224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001234:	f001 fbae 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001238:	2301      	movs	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800123c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	4851      	ldr	r0, [pc, #324]	; (8001394 <MX_GPIO_Init+0x310>)
 800124e:	f001 fba1 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001252:	2302      	movs	r3, #2
 8001254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001256:	230b      	movs	r3, #11
 8001258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	484b      	ldr	r0, [pc, #300]	; (8001394 <MX_GPIO_Init+0x310>)
 8001266:	f001 fb95 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin | LED2_Pin | SPSGRF_915_SDN_Pin | ARD_D5_Pin | SPSGRF_915_SPI3_CSN_Pin;
 800126a:	f24f 0334 	movw	r3, #61492	; 0xf034
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4844      	ldr	r0, [pc, #272]	; (8001394 <MX_GPIO_Init+0x310>)
 8001284:	f001 fb86 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin | INTERNAL_I2C2_SDA_Pin;
 8001288:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128e:	2312      	movs	r3, #18
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001292:	2301      	movs	r3, #1
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800129a:	2304      	movs	r3, #4
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	483b      	ldr	r0, [pc, #236]	; (8001394 <MX_GPIO_Init+0x310>)
 80012a6:	f001 fb75 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin | LSM6DSL_INT1_EXTI11_Pin | ARD_D2_Pin | HTS221_DRDY_EXTI15_Pin | PMOD_IRQ_EXTI12_Pin;
 80012aa:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4835      	ldr	r0, [pc, #212]	; (8001398 <MX_GPIO_Init+0x314>)
 80012c2:	f001 fb67 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | SPBTLE_RF_SPI3_CSN_Pin | PMOD_RESET_Pin | STSAFE_A100_RESET_Pin;
 80012c6:	f243 0381 	movw	r3, #12417	; 0x3081
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	482e      	ldr	r0, [pc, #184]	; (8001398 <MX_GPIO_Init+0x314>)
 80012e0:	f001 fb58 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin;
 80012e4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80012e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	4827      	ldr	r0, [pc, #156]	; (800139c <MX_GPIO_Init+0x318>)
 80012fe:	f001 fb49 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin | LSM3MDL_DRDY_EXTI8_Pin;
 8001302:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001308:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800130c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	4820      	ldr	r0, [pc, #128]	; (800139c <MX_GPIO_Init+0x318>)
 800131a:	f001 fb3b 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin | INTERNAL_SPI3_MISO_Pin | INTERNAL_SPI3_MOSI_Pin;
 800131e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001330:	2306      	movs	r3, #6
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4619      	mov	r1, r3
 800133a:	4818      	ldr	r0, [pc, #96]	; (800139c <MX_GPIO_Init+0x318>)
 800133c:	f001 fb2a 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001340:	2302      	movs	r3, #2
 8001342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001350:	2305      	movs	r3, #5
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	480f      	ldr	r0, [pc, #60]	; (8001398 <MX_GPIO_Init+0x314>)
 800135c:	f001 fb1a 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin | PMOD_UART2_RTS_Pin | PMOD_UART2_TX_Pin | PMOD_UART2_RX_Pin;
 8001360:	2378      	movs	r3, #120	; 0x78
 8001362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001370:	2307      	movs	r3, #7
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	4807      	ldr	r0, [pc, #28]	; (8001398 <MX_GPIO_Init+0x314>)
 800137c:	f001 fb0a 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin | ARD_D14_Pin;
 8001380:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001386:	2312      	movs	r3, #18
 8001388:	e00a      	b.n	80013a0 <MX_GPIO_Init+0x31c>
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000
 8001390:	48001000 	.word	0x48001000
 8001394:	48000400 	.word	0x48000400
 8001398:	48000c00 	.word	0x48000c00
 800139c:	48000800 	.word	0x48000800
 80013a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013aa:	2304      	movs	r3, #4
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	480b      	ldr	r0, [pc, #44]	; (80013e4 <MX_GPIO_Init+0x360>)
 80013b6:	f001 faed 	bl	8002994 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	2017      	movs	r0, #23
 80013c0:	f001 f9a5 	bl	800270e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013c4:	2017      	movs	r0, #23
 80013c6:	f001 f9be 	bl	8002746 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	2028      	movs	r0, #40	; 0x28
 80013d0:	f001 f99d 	bl	800270e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013d4:	2028      	movs	r0, #40	; 0x28
 80013d6:	f001 f9b6 	bl	8002746 <HAL_NVIC_EnableIRQ>
}
 80013da:	bf00      	nop
 80013dc:	3728      	adds	r7, #40	; 0x28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	48000400 	.word	0x48000400

080013e8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ec:	b672      	cpsid	i
}
 80013ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <Error_Handler+0x8>
	...

080013f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_MspInit+0x44>)
 80013fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fe:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <HAL_MspInit+0x44>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6613      	str	r3, [r2, #96]	; 0x60
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_MspInit+0x44>)
 8001408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_MspInit+0x44>)
 8001414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001416:	4a08      	ldr	r2, [pc, #32]	; (8001438 <HAL_MspInit+0x44>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	6593      	str	r3, [r2, #88]	; 0x58
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_MspInit+0x44>)
 8001420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000

0800143c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b0ac      	sub	sp, #176	; 0xb0
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2288      	movs	r2, #136	; 0x88
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f007 f9fb 	bl	8008858 <memset>
  if(DFSDM1_Init == 0)
 8001462:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d142      	bne.n	80014f0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800146a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800146e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4618      	mov	r0, r3
 800147c:	f003 fbf6 	bl	8004c6c <HAL_RCCEx_PeriphCLKConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001486:	f7ff ffaf 	bl	80013e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 800148c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148e:	4a1b      	ldr	r2, [pc, #108]	; (80014fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001490:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001494:	6613      	str	r3, [r2, #96]	; 0x60
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	4a15      	ldr	r2, [pc, #84]	; (80014fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 80014a8:	f043 0310 	orr.w	r3, r3, #16
 80014ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80014ba:	f44f 7320 	mov.w	r3, #640	; 0x280
 80014be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80014d4:	2306      	movs	r3, #6
 80014d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014de:	4619      	mov	r1, r3
 80014e0:	4807      	ldr	r0, [pc, #28]	; (8001500 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80014e2:	f001 fa57 	bl	8002994 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	4a02      	ldr	r2, [pc, #8]	; (80014f8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80014ee:	6013      	str	r3, [r2, #0]
  }

}
 80014f0:	bf00      	nop
 80014f2:	37b0      	adds	r7, #176	; 0xb0
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000908 	.word	0x20000908
 80014fc:	40021000 	.word	0x40021000
 8001500:	48001000 	.word	0x48001000

08001504 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a17      	ldr	r2, [pc, #92]	; (8001580 <HAL_QSPI_MspInit+0x7c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d128      	bne.n	8001578 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <HAL_QSPI_MspInit+0x80>)
 8001528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800152a:	4a16      	ldr	r2, [pc, #88]	; (8001584 <HAL_QSPI_MspInit+0x80>)
 800152c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001530:	6513      	str	r3, [r2, #80]	; 0x50
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_QSPI_MspInit+0x80>)
 8001534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_QSPI_MspInit+0x80>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	4a10      	ldr	r2, [pc, #64]	; (8001584 <HAL_QSPI_MspInit+0x80>)
 8001544:	f043 0310 	orr.w	r3, r3, #16
 8001548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_QSPI_MspInit+0x80>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	f003 0310 	and.w	r3, r3, #16
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001556:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800155a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001568:	230a      	movs	r3, #10
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <HAL_QSPI_MspInit+0x84>)
 8001574:	f001 fa0e 	bl	8002994 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001578:	bf00      	nop
 800157a:	3728      	adds	r7, #40	; 0x28
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	a0001000 	.word	0xa0001000
 8001584:	40021000 	.word	0x40021000
 8001588:	48001000 	.word	0x48001000

0800158c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a17      	ldr	r2, [pc, #92]	; (8001608 <HAL_SPI_MspInit+0x7c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d128      	bne.n	8001600 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_SPI_MspInit+0x80>)
 80015b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b2:	4a16      	ldr	r2, [pc, #88]	; (800160c <HAL_SPI_MspInit+0x80>)
 80015b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015b8:	6613      	str	r3, [r2, #96]	; 0x60
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_SPI_MspInit+0x80>)
 80015bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_SPI_MspInit+0x80>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	4a10      	ldr	r2, [pc, #64]	; (800160c <HAL_SPI_MspInit+0x80>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_SPI_MspInit+0x80>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80015de:	23e0      	movs	r3, #224	; 0xe0
 80015e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ea:	2303      	movs	r3, #3
 80015ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ee:	2305      	movs	r3, #5
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fc:	f001 f9ca 	bl	8002994 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001600:	bf00      	nop
 8001602:	3728      	adds	r7, #40	; 0x28
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40013000 	.word	0x40013000
 800160c:	40021000 	.word	0x40021000

08001610 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a08      	ldr	r2, [pc, #32]	; (8001640 <HAL_SPI_MspDeInit+0x30>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d10a      	bne.n	8001638 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_SPI_MspDeInit+0x34>)
 8001624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001626:	4a07      	ldr	r2, [pc, #28]	; (8001644 <HAL_SPI_MspDeInit+0x34>)
 8001628:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800162c:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin);
 800162e:	21e0      	movs	r1, #224	; 0xe0
 8001630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001634:	f001 fb58 	bl	8002ce8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40013000 	.word	0x40013000
 8001644:	40021000 	.word	0x40021000

08001648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b0b0      	sub	sp, #192	; 0xc0
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001664:	2288      	movs	r2, #136	; 0x88
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f007 f8f5 	bl	8008858 <memset>
  if(huart->Instance==UART4)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a63      	ldr	r2, [pc, #396]	; (8001800 <HAL_UART_MspInit+0x1b8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d13c      	bne.n	80016f2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001678:	2308      	movs	r3, #8
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800167c:	2300      	movs	r3, #0
 800167e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001684:	4618      	mov	r0, r3
 8001686:	f003 faf1 	bl	8004c6c <HAL_RCCEx_PeriphCLKConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001690:	f7ff feaa 	bl	80013e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001694:	4b5b      	ldr	r3, [pc, #364]	; (8001804 <HAL_UART_MspInit+0x1bc>)
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	4a5a      	ldr	r2, [pc, #360]	; (8001804 <HAL_UART_MspInit+0x1bc>)
 800169a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800169e:	6593      	str	r3, [r2, #88]	; 0x58
 80016a0:	4b58      	ldr	r3, [pc, #352]	; (8001804 <HAL_UART_MspInit+0x1bc>)
 80016a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016a8:	623b      	str	r3, [r7, #32]
 80016aa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b55      	ldr	r3, [pc, #340]	; (8001804 <HAL_UART_MspInit+0x1bc>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	4a54      	ldr	r2, [pc, #336]	; (8001804 <HAL_UART_MspInit+0x1bc>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b8:	4b52      	ldr	r3, [pc, #328]	; (8001804 <HAL_UART_MspInit+0x1bc>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80016c4:	2303      	movs	r3, #3
 80016c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d6:	2303      	movs	r3, #3
 80016d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80016dc:	2308      	movs	r3, #8
 80016de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016e6:	4619      	mov	r1, r3
 80016e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ec:	f001 f952 	bl	8002994 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016f0:	e081      	b.n	80017f6 <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART1)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a44      	ldr	r2, [pc, #272]	; (8001808 <HAL_UART_MspInit+0x1c0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d13b      	bne.n	8001774 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001700:	2300      	movs	r3, #0
 8001702:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001708:	4618      	mov	r0, r3
 800170a:	f003 faaf 	bl	8004c6c <HAL_RCCEx_PeriphCLKConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001714:	f7ff fe68 	bl	80013e8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001718:	4b3a      	ldr	r3, [pc, #232]	; (8001804 <HAL_UART_MspInit+0x1bc>)
 800171a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171c:	4a39      	ldr	r2, [pc, #228]	; (8001804 <HAL_UART_MspInit+0x1bc>)
 800171e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001722:	6613      	str	r3, [r2, #96]	; 0x60
 8001724:	4b37      	ldr	r3, [pc, #220]	; (8001804 <HAL_UART_MspInit+0x1bc>)
 8001726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172c:	61bb      	str	r3, [r7, #24]
 800172e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001730:	4b34      	ldr	r3, [pc, #208]	; (8001804 <HAL_UART_MspInit+0x1bc>)
 8001732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001734:	4a33      	ldr	r2, [pc, #204]	; (8001804 <HAL_UART_MspInit+0x1bc>)
 8001736:	f043 0302 	orr.w	r3, r3, #2
 800173a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173c:	4b31      	ldr	r3, [pc, #196]	; (8001804 <HAL_UART_MspInit+0x1bc>)
 800173e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|GPIO_PIN_7;
 8001748:	23c0      	movs	r3, #192	; 0xc0
 800174a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	2303      	movs	r3, #3
 800175c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001760:	2307      	movs	r3, #7
 8001762:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001766:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800176a:	4619      	mov	r1, r3
 800176c:	4827      	ldr	r0, [pc, #156]	; (800180c <HAL_UART_MspInit+0x1c4>)
 800176e:	f001 f911 	bl	8002994 <HAL_GPIO_Init>
}
 8001772:	e040      	b.n	80017f6 <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART3)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a25      	ldr	r2, [pc, #148]	; (8001810 <HAL_UART_MspInit+0x1c8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d13b      	bne.n	80017f6 <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800177e:	2304      	movs	r3, #4
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001782:	2300      	movs	r3, #0
 8001784:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178a:	4618      	mov	r0, r3
 800178c:	f003 fa6e 	bl	8004c6c <HAL_RCCEx_PeriphCLKConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_UART_MspInit+0x152>
      Error_Handler();
 8001796:	f7ff fe27 	bl	80013e8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <HAL_UART_MspInit+0x1bc>)
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	4a19      	ldr	r2, [pc, #100]	; (8001804 <HAL_UART_MspInit+0x1bc>)
 80017a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a4:	6593      	str	r3, [r2, #88]	; 0x58
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_UART_MspInit+0x1bc>)
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_UART_MspInit+0x1bc>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	4a13      	ldr	r2, [pc, #76]	; (8001804 <HAL_UART_MspInit+0x1bc>)
 80017b8:	f043 0308 	orr.w	r3, r3, #8
 80017bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_UART_MspInit+0x1bc>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80017ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017e4:	2307      	movs	r3, #7
 80017e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017ee:	4619      	mov	r1, r3
 80017f0:	4808      	ldr	r0, [pc, #32]	; (8001814 <HAL_UART_MspInit+0x1cc>)
 80017f2:	f001 f8cf 	bl	8002994 <HAL_GPIO_Init>
}
 80017f6:	bf00      	nop
 80017f8:	37c0      	adds	r7, #192	; 0xc0
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40004c00 	.word	0x40004c00
 8001804:	40021000 	.word	0x40021000
 8001808:	40013800 	.word	0x40013800
 800180c:	48000400 	.word	0x48000400
 8001810:	40004800 	.word	0x40004800
 8001814:	48000c00 	.word	0x48000c00

08001818 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b0ac      	sub	sp, #176	; 0xb0
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2288      	movs	r2, #136	; 0x88
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f007 f80d 	bl	8008858 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001846:	d16b      	bne.n	8001920 <HAL_PCD_MspInit+0x108>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800184c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800184e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001852:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001856:	2301      	movs	r3, #1
 8001858:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800185a:	2301      	movs	r3, #1
 800185c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800185e:	2318      	movs	r3, #24
 8001860:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001862:	2307      	movs	r3, #7
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001866:	2302      	movs	r3, #2
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800186a:	2302      	movs	r3, #2
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800186e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001872:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4618      	mov	r0, r3
 800187a:	f003 f9f7 	bl	8004c6c <HAL_RCCEx_PeriphCLKConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001884:	f7ff fdb0 	bl	80013e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001888:	4b27      	ldr	r3, [pc, #156]	; (8001928 <HAL_PCD_MspInit+0x110>)
 800188a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188c:	4a26      	ldr	r2, [pc, #152]	; (8001928 <HAL_PCD_MspInit+0x110>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001894:	4b24      	ldr	r3, [pc, #144]	; (8001928 <HAL_PCD_MspInit+0x110>)
 8001896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80018a0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018ba:	230a      	movs	r3, #10
 80018bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018c4:	4619      	mov	r1, r3
 80018c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ca:	f001 f863 	bl	8002994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018ce:	4b16      	ldr	r3, [pc, #88]	; (8001928 <HAL_PCD_MspInit+0x110>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	4a15      	ldr	r2, [pc, #84]	; (8001928 <HAL_PCD_MspInit+0x110>)
 80018d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018da:	4b13      	ldr	r3, [pc, #76]	; (8001928 <HAL_PCD_MspInit+0x110>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_PCD_MspInit+0x110>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d114      	bne.n	800191c <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <HAL_PCD_MspInit+0x110>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	4a0c      	ldr	r2, [pc, #48]	; (8001928 <HAL_PCD_MspInit+0x110>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6593      	str	r3, [r2, #88]	; 0x58
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_PCD_MspInit+0x110>)
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800190a:	f002 fae3 	bl	8003ed4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_PCD_MspInit+0x110>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	4a05      	ldr	r2, [pc, #20]	; (8001928 <HAL_PCD_MspInit+0x110>)
 8001914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001918:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800191a:	e001      	b.n	8001920 <HAL_PCD_MspInit+0x108>
      HAL_PWREx_EnableVddUSB();
 800191c:	f002 fada 	bl	8003ed4 <HAL_PWREx_EnableVddUSB>
}
 8001920:	bf00      	nop
 8001922:	37b0      	adds	r7, #176	; 0xb0
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000

0800192c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <NMI_Handler+0x4>

08001932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <HardFault_Handler+0x4>

08001938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <MemManage_Handler+0x4>

0800193e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <BusFault_Handler+0x4>

08001944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <UsageFault_Handler+0x4>

0800194a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001978:	f000 fdaa 	bl	80024d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001984:	2020      	movs	r0, #32
 8001986:	f001 fad3 	bl	8002f30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800198a:	2040      	movs	r0, #64	; 0x40
 800198c:	f001 fad0 	bl	8002f30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001990:	2080      	movs	r0, #128	; 0x80
 8001992:	f001 facd 	bl	8002f30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001996:	f44f 7080 	mov.w	r0, #256	; 0x100
 800199a:	f001 fac9 	bl	8002f30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80019a6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019aa:	f001 fac1 	bl	8002f30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80019ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80019b2:	f001 fabd 	bl	8002f30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80019b6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019ba:	f001 fab9 	bl	8002f30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80019be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019c2:	f001 fab5 	bl	8002f30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80019c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80019ca:	f001 fab1 	bl	8002f30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  return 1;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <_kill>:

int _kill(int pid, int sig)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ec:	f006 fefc 	bl	80087e8 <__errno>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2216      	movs	r2, #22
 80019f4:	601a      	str	r2, [r3, #0]
  return -1;
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_exit>:

void _exit (int status)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a0a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffe7 	bl	80019e2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a14:	e7fe      	b.n	8001a14 <_exit+0x12>

08001a16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	e00a      	b.n	8001a3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a28:	f3af 8000 	nop.w
 8001a2c:	4601      	mov	r1, r0
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	60ba      	str	r2, [r7, #8]
 8001a34:	b2ca      	uxtb	r2, r1
 8001a36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dbf0      	blt.n	8001a28 <_read+0x12>
  }

  return len;
 8001a46:	687b      	ldr	r3, [r7, #4]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	e009      	b.n	8001a76 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	60ba      	str	r2, [r7, #8]
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	3301      	adds	r3, #1
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	dbf1      	blt.n	8001a62 <_write+0x12>
  }
  return len;
 8001a7e:	687b      	ldr	r3, [r7, #4]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <_close>:

int _close(int file)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ab0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_isatty>:

int _isatty(int file)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ac8:	2301      	movs	r3, #1
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b085      	sub	sp, #20
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af8:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <_sbrk+0x5c>)
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <_sbrk+0x60>)
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <_sbrk+0x64>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <_sbrk+0x68>)
 8001b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d207      	bcs.n	8001b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b20:	f006 fe62 	bl	80087e8 <__errno>
 8001b24:	4603      	mov	r3, r0
 8001b26:	220c      	movs	r2, #12
 8001b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	e009      	b.n	8001b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <_sbrk+0x64>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <_sbrk+0x64>)
 8001b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20018000 	.word	0x20018000
 8001b50:	00000400 	.word	0x00000400
 8001b54:	2000090c 	.word	0x2000090c
 8001b58:	20001178 	.word	0x20001178

08001b5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <SystemInit+0x20>)
 8001b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <SystemInit+0x20>)
 8001b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b84:	f7ff ffea 	bl	8001b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b88:	480c      	ldr	r0, [pc, #48]	; (8001bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001b8a:	490d      	ldr	r1, [pc, #52]	; (8001bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <LoopForever+0xe>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b90:	e002      	b.n	8001b98 <LoopCopyDataInit>

08001b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b96:	3304      	adds	r3, #4

08001b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b9c:	d3f9      	bcc.n	8001b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ba0:	4c0a      	ldr	r4, [pc, #40]	; (8001bcc <LoopForever+0x16>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba4:	e001      	b.n	8001baa <LoopFillZerobss>

08001ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba8:	3204      	adds	r2, #4

08001baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bac:	d3fb      	bcc.n	8001ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bae:	f006 fe21 	bl	80087f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bb2:	f7fe fedf 	bl	8000974 <main>

08001bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bb6:	e7fe      	b.n	8001bb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bb8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc0:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001bc4:	0800a3c0 	.word	0x0800a3c0
  ldr r2, =_sbss
 8001bc8:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001bcc:	20001174 	.word	0x20001174

08001bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bd0:	e7fe      	b.n	8001bd0 <ADC1_2_IRQHandler>
	...

08001bd4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001bdc:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <I2Cx_MspInit+0xa8>)
 8001bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be0:	4a26      	ldr	r2, [pc, #152]	; (8001c7c <I2Cx_MspInit+0xa8>)
 8001be2:	f043 0302 	orr.w	r3, r3, #2
 8001be6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be8:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <I2Cx_MspInit+0xa8>)
 8001bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001bf4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bf8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001bfa:	2312      	movs	r3, #18
 8001bfc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c02:	2303      	movs	r3, #3
 8001c04:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001c06:	2304      	movs	r3, #4
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4619      	mov	r1, r3
 8001c10:	481b      	ldr	r0, [pc, #108]	; (8001c80 <I2Cx_MspInit+0xac>)
 8001c12:	f000 febf 	bl	8002994 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4818      	ldr	r0, [pc, #96]	; (8001c80 <I2Cx_MspInit+0xac>)
 8001c1e:	f000 feb9 	bl	8002994 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001c22:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <I2Cx_MspInit+0xa8>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c26:	4a15      	ldr	r2, [pc, #84]	; (8001c7c <I2Cx_MspInit+0xa8>)
 8001c28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <I2Cx_MspInit+0xa8>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <I2Cx_MspInit+0xa8>)
 8001c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3e:	4a0f      	ldr	r2, [pc, #60]	; (8001c7c <I2Cx_MspInit+0xa8>)
 8001c40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c44:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001c46:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <I2Cx_MspInit+0xa8>)
 8001c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4a:	4a0c      	ldr	r2, [pc, #48]	; (8001c7c <I2Cx_MspInit+0xa8>)
 8001c4c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c50:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	210f      	movs	r1, #15
 8001c56:	2021      	movs	r0, #33	; 0x21
 8001c58:	f000 fd59 	bl	800270e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001c5c:	2021      	movs	r0, #33	; 0x21
 8001c5e:	f000 fd72 	bl	8002746 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	210f      	movs	r1, #15
 8001c66:	2022      	movs	r0, #34	; 0x22
 8001c68:	f000 fd51 	bl	800270e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001c6c:	2022      	movs	r0, #34	; 0x22
 8001c6e:	f000 fd6a 	bl	8002746 <HAL_NVIC_EnableIRQ>
}
 8001c72:	bf00      	nop
 8001c74:	3728      	adds	r7, #40	; 0x28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	48000400 	.word	0x48000400

08001c84 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <I2Cx_Init+0x54>)
 8001c90:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a11      	ldr	r2, [pc, #68]	; (8001cdc <I2Cx_Init+0x58>)
 8001c96:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff89 	bl	8001bd4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f001 f957 	bl	8002f76 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001cc8:	2100      	movs	r1, #0
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f001 fefa 	bl	8003ac4 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40005800 	.word	0x40005800
 8001cdc:	00702681 	.word	0x00702681

08001ce0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af04      	add	r7, sp, #16
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	4608      	mov	r0, r1
 8001cea:	4611      	mov	r1, r2
 8001cec:	461a      	mov	r2, r3
 8001cee:	4603      	mov	r3, r0
 8001cf0:	72fb      	strb	r3, [r7, #11]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	813b      	strh	r3, [r7, #8]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001cfe:	7afb      	ldrb	r3, [r7, #11]
 8001d00:	b299      	uxth	r1, r3
 8001d02:	88f8      	ldrh	r0, [r7, #6]
 8001d04:	893a      	ldrh	r2, [r7, #8]
 8001d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0a:	9302      	str	r3, [sp, #8]
 8001d0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	4603      	mov	r3, r0
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f001 fb14 	bl	8003344 <HAL_I2C_Mem_Read>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001d20:	7dfb      	ldrb	r3, [r7, #23]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d004      	beq.n	8001d30 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001d26:	7afb      	ldrb	r3, [r7, #11]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f832 	bl	8001d94 <I2Cx_Error>
  }
  return status;
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b08a      	sub	sp, #40	; 0x28
 8001d3e:	af04      	add	r7, sp, #16
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	4608      	mov	r0, r1
 8001d44:	4611      	mov	r1, r2
 8001d46:	461a      	mov	r2, r3
 8001d48:	4603      	mov	r3, r0
 8001d4a:	72fb      	strb	r3, [r7, #11]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	813b      	strh	r3, [r7, #8]
 8001d50:	4613      	mov	r3, r2
 8001d52:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d58:	7afb      	ldrb	r3, [r7, #11]
 8001d5a:	b299      	uxth	r1, r3
 8001d5c:	88f8      	ldrh	r0, [r7, #6]
 8001d5e:	893a      	ldrh	r2, [r7, #8]
 8001d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d64:	9302      	str	r3, [sp, #8]
 8001d66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	4603      	mov	r3, r0
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f001 f9d3 	bl	800311c <HAL_I2C_Mem_Write>
 8001d76:	4603      	mov	r3, r0
 8001d78:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001d7a:	7dfb      	ldrb	r3, [r7, #23]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d004      	beq.n	8001d8a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001d80:	7afb      	ldrb	r3, [r7, #11]
 8001d82:	4619      	mov	r1, r3
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 f805 	bl	8001d94 <I2Cx_Error>
  }
  return status;
 8001d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f001 f977 	bl	8003094 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ff6c 	bl	8001c84 <I2Cx_Init>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001db8:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <SENSOR_IO_Init+0x10>)
 8001dba:	f7ff ff63 	bl	8001c84 <I2Cx_Init>
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000910 	.word	0x20000910

08001dc8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	71bb      	strb	r3, [r7, #6]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001dda:	79bb      	ldrb	r3, [r7, #6]
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	79f9      	ldrb	r1, [r7, #7]
 8001de0:	2301      	movs	r3, #1
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	1d7b      	adds	r3, r7, #5
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2301      	movs	r3, #1
 8001dea:	4803      	ldr	r0, [pc, #12]	; (8001df8 <SENSOR_IO_Write+0x30>)
 8001dec:	f7ff ffa5 	bl	8001d3a <I2Cx_WriteMultiple>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000910 	.word	0x20000910

08001dfc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	4603      	mov	r3, r0
 8001e04:	460a      	mov	r2, r1
 8001e06:	71fb      	strb	r3, [r7, #7]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001e10:	79bb      	ldrb	r3, [r7, #6]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	79f9      	ldrb	r1, [r7, #7]
 8001e16:	2301      	movs	r3, #1
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	f107 030f 	add.w	r3, r7, #15
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2301      	movs	r3, #1
 8001e22:	4804      	ldr	r0, [pc, #16]	; (8001e34 <SENSOR_IO_Read+0x38>)
 8001e24:	f7ff ff5c 	bl	8001ce0 <I2Cx_ReadMultiple>

  return read_value;
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000910 	.word	0x20000910

08001e38 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	603a      	str	r2, [r7, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
 8001e46:	460b      	mov	r3, r1
 8001e48:	71bb      	strb	r3, [r7, #6]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001e4e:	79bb      	ldrb	r3, [r7, #6]
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	79f9      	ldrb	r1, [r7, #7]
 8001e54:	88bb      	ldrh	r3, [r7, #4]
 8001e56:	9301      	str	r3, [sp, #4]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	4804      	ldr	r0, [pc, #16]	; (8001e70 <SENSOR_IO_ReadMultiple+0x38>)
 8001e60:	f7ff ff3e 	bl	8001ce0 <I2Cx_ReadMultiple>
 8001e64:	4603      	mov	r3, r0
 8001e66:	b29b      	uxth	r3, r3
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000910 	.word	0x20000910

08001e74 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <BSP_HSENSOR_Init+0x38>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	20be      	movs	r0, #190	; 0xbe
 8001e80:	4798      	blx	r3
 8001e82:	4603      	mov	r3, r0
 8001e84:	2bbc      	cmp	r3, #188	; 0xbc
 8001e86:	d002      	beq.n	8001e8e <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	e009      	b.n	8001ea2 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <BSP_HSENSOR_Init+0x3c>)
 8001e90:	4a06      	ldr	r2, [pc, #24]	; (8001eac <BSP_HSENSOR_Init+0x38>)
 8001e92:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <BSP_HSENSOR_Init+0x3c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	20be      	movs	r0, #190	; 0xbe
 8001e9c:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001ea2:	687b      	ldr	r3, [r7, #4]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	2000006c 	.word	0x2000006c
 8001eb0:	20000964 	.word	0x20000964

08001eb4 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <BSP_HSENSOR_ReadHumidity+0x18>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	20be      	movs	r0, #190	; 0xbe
 8001ec0:	4798      	blx	r3
 8001ec2:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000964 	.word	0x20000964

08001ed0 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <BSP_PSENSOR_Init+0x38>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	20ba      	movs	r0, #186	; 0xba
 8001edc:	4798      	blx	r3
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2bb1      	cmp	r3, #177	; 0xb1
 8001ee2:	d002      	beq.n	8001eea <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	e009      	b.n	8001efe <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <BSP_PSENSOR_Init+0x3c>)
 8001eec:	4a06      	ldr	r2, [pc, #24]	; (8001f08 <BSP_PSENSOR_Init+0x38>)
 8001eee:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <BSP_PSENSOR_Init+0x3c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	20ba      	movs	r0, #186	; 0xba
 8001ef8:	4798      	blx	r3
    ret = PSENSOR_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001efe:	687b      	ldr	r3, [r7, #4]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000088 	.word	0x20000088
 8001f0c:	20000968 	.word	0x20000968

08001f10 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <BSP_PSENSOR_ReadPressure+0x18>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	20ba      	movs	r0, #186	; 0xba
 8001f1c:	4798      	blx	r3
 8001f1e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001f22:	eeb0 0a67 	vmov.f32	s0, s15
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000968 	.word	0x20000968

08001f2c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <BSP_TSENSOR_Init+0x30>)
 8001f38:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <BSP_TSENSOR_Init+0x34>)
 8001f3a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001f3c:	f7ff ff3a 	bl	8001db4 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <BSP_TSENSOR_Init+0x30>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2100      	movs	r1, #0
 8001f48:	20be      	movs	r0, #190	; 0xbe
 8001f4a:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001f50:	79fb      	ldrb	r3, [r7, #7]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	2000096c 	.word	0x2000096c
 8001f60:	20000078 	.word	0x20000078

08001f64 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <BSP_TSENSOR_ReadTemp+0x18>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	20be      	movs	r0, #190	; 0xbe
 8001f70:	4798      	blx	r3
 8001f72:	eef0 7a40 	vmov.f32	s15, s0
}
 8001f76:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	2000096c 	.word	0x2000096c

08001f80 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2120      	movs	r1, #32
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff33 	bl	8001dfc <SENSOR_IO_Read>
 8001f96:	4603      	mov	r3, r0
 8001f98:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	f023 0304 	bic.w	r3, r3, #4
 8001fa0:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	f043 0304 	orr.w	r3, r3, #4
 8001fa8:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	f023 0303 	bic.w	r3, r3, #3
 8001fb0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fc0:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	2120      	movs	r1, #32
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fefc 	bl	8001dc8 <SENSOR_IO_Write>
}
 8001fd0:	bf00      	nop
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001fe6:	f7ff fee5 	bl	8001db4 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	210f      	movs	r1, #15
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff03 	bl	8001dfc <SENSOR_IO_Read>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	b2d8      	uxtb	r0, r3
 8002012:	f107 020c 	add.w	r2, r7, #12
 8002016:	2302      	movs	r3, #2
 8002018:	21b0      	movs	r1, #176	; 0xb0
 800201a:	f7ff ff0d 	bl	8001e38 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800201e:	7b3b      	ldrb	r3, [r7, #12]
 8002020:	085b      	lsrs	r3, r3, #1
 8002022:	b2db      	uxtb	r3, r3
 8002024:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002026:	7b7b      	ldrb	r3, [r7, #13]
 8002028:	085b      	lsrs	r3, r3, #1
 800202a:	b2db      	uxtb	r3, r3
 800202c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	b2d8      	uxtb	r0, r3
 8002032:	f107 020c 	add.w	r2, r7, #12
 8002036:	2302      	movs	r3, #2
 8002038:	21b6      	movs	r1, #182	; 0xb6
 800203a:	f7ff fefd 	bl	8001e38 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800203e:	7b7b      	ldrb	r3, [r7, #13]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	b21a      	sxth	r2, r3
 8002044:	7b3b      	ldrb	r3, [r7, #12]
 8002046:	b21b      	sxth	r3, r3
 8002048:	4313      	orrs	r3, r2
 800204a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	b2d8      	uxtb	r0, r3
 8002050:	f107 020c 	add.w	r2, r7, #12
 8002054:	2302      	movs	r3, #2
 8002056:	21ba      	movs	r1, #186	; 0xba
 8002058:	f7ff feee 	bl	8001e38 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800205c:	7b7b      	ldrb	r3, [r7, #13]
 800205e:	021b      	lsls	r3, r3, #8
 8002060:	b21a      	sxth	r2, r3
 8002062:	7b3b      	ldrb	r3, [r7, #12]
 8002064:	b21b      	sxth	r3, r3
 8002066:	4313      	orrs	r3, r2
 8002068:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	b2d8      	uxtb	r0, r3
 800206e:	f107 020c 	add.w	r2, r7, #12
 8002072:	2302      	movs	r3, #2
 8002074:	21a8      	movs	r1, #168	; 0xa8
 8002076:	f7ff fedf 	bl	8001e38 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800207a:	7b7b      	ldrb	r3, [r7, #13]
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	b21a      	sxth	r2, r3
 8002080:	7b3b      	ldrb	r3, [r7, #12]
 8002082:	b21b      	sxth	r3, r3
 8002084:	4313      	orrs	r3, r2
 8002086:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002088:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800208c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	ee07 3a90 	vmov	s15, r3
 8002096:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800209a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800209e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	ee07 3a90 	vmov	s15, r3
 80020a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ac:	ee67 6a27 	vmul.f32	s13, s14, s15
 80020b0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80020b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	ee07 3a90 	vmov	s15, r3
 80020be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020c6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80020ca:	ee07 3a90 	vmov	s15, r3
 80020ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d6:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80020da:	edd7 7a04 	vldr	s15, [r7, #16]
 80020de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020e6:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80020ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80020ee:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002134 <HTS221_H_ReadHumidity+0x130>
 80020f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fa:	dd01      	ble.n	8002100 <HTS221_H_ReadHumidity+0xfc>
 80020fc:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <HTS221_H_ReadHumidity+0x134>)
 80020fe:	e00a      	b.n	8002116 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002100:	edd7 7a04 	vldr	s15, [r7, #16]
 8002104:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210c:	d502      	bpl.n	8002114 <HTS221_H_ReadHumidity+0x110>
 800210e:	f04f 0300 	mov.w	r3, #0
 8002112:	e000      	b.n	8002116 <HTS221_H_ReadHumidity+0x112>
 8002114:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002116:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002118:	edd7 7a04 	vldr	s15, [r7, #16]
 800211c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002120:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002124:	eef0 7a66 	vmov.f32	s15, s13
}
 8002128:	eeb0 0a67 	vmov.f32	s0, s15
 800212c:	3720      	adds	r7, #32
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	447a0000 	.word	0x447a0000
 8002138:	447a0000 	.word	0x447a0000

0800213c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2120      	movs	r1, #32
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fe54 	bl	8001dfc <SENSOR_IO_Read>
 8002154:	4603      	mov	r3, r0
 8002156:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	f023 0304 	bic.w	r3, r3, #4
 800215e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	f023 0303 	bic.w	r3, r3, #3
 800216e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800217e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	7bfa      	ldrb	r2, [r7, #15]
 8002186:	2120      	movs	r1, #32
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fe1d 	bl	8001dc8 <SENSOR_IO_Write>
}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b088      	sub	sp, #32
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	b2d8      	uxtb	r0, r3
 80021a4:	f107 0208 	add.w	r2, r7, #8
 80021a8:	2302      	movs	r3, #2
 80021aa:	21b2      	movs	r1, #178	; 0xb2
 80021ac:	f7ff fe44 	bl	8001e38 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80021b0:	88fb      	ldrh	r3, [r7, #6]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2135      	movs	r1, #53	; 0x35
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fe20 	bl	8001dfc <SENSOR_IO_Read>
 80021bc:	4603      	mov	r3, r0
 80021be:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80021c0:	7ffb      	ldrb	r3, [r7, #31]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ca:	b21a      	sxth	r2, r3
 80021cc:	7a3b      	ldrb	r3, [r7, #8]
 80021ce:	b21b      	sxth	r3, r3
 80021d0:	4313      	orrs	r3, r2
 80021d2:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80021d4:	7ffb      	ldrb	r3, [r7, #31]
 80021d6:	019b      	lsls	r3, r3, #6
 80021d8:	b21b      	sxth	r3, r3
 80021da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021de:	b21a      	sxth	r2, r3
 80021e0:	7a7b      	ldrb	r3, [r7, #9]
 80021e2:	b21b      	sxth	r3, r3
 80021e4:	4313      	orrs	r3, r2
 80021e6:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80021e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80021ec:	10db      	asrs	r3, r3, #3
 80021ee:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80021f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80021f4:	10db      	asrs	r3, r3, #3
 80021f6:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	b2d8      	uxtb	r0, r3
 80021fc:	f107 0208 	add.w	r2, r7, #8
 8002200:	2304      	movs	r3, #4
 8002202:	21bc      	movs	r1, #188	; 0xbc
 8002204:	f7ff fe18 	bl	8001e38 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002208:	7a7b      	ldrb	r3, [r7, #9]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	b21a      	sxth	r2, r3
 800220e:	7a3b      	ldrb	r3, [r7, #8]
 8002210:	b21b      	sxth	r3, r3
 8002212:	4313      	orrs	r3, r2
 8002214:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002216:	7afb      	ldrb	r3, [r7, #11]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	b21a      	sxth	r2, r3
 800221c:	7abb      	ldrb	r3, [r7, #10]
 800221e:	b21b      	sxth	r3, r3
 8002220:	4313      	orrs	r3, r2
 8002222:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002224:	88fb      	ldrh	r3, [r7, #6]
 8002226:	b2d8      	uxtb	r0, r3
 8002228:	f107 0208 	add.w	r2, r7, #8
 800222c:	2302      	movs	r3, #2
 800222e:	21aa      	movs	r1, #170	; 0xaa
 8002230:	f7ff fe02 	bl	8001e38 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002234:	7a7b      	ldrb	r3, [r7, #9]
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	b21a      	sxth	r2, r3
 800223a:	7a3b      	ldrb	r3, [r7, #8]
 800223c:	b21b      	sxth	r3, r3
 800223e:	4313      	orrs	r3, r2
 8002240:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002242:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002246:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	ee07 3a90 	vmov	s15, r3
 8002250:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002254:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002258:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	ee07 3a90 	vmov	s15, r3
 8002262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002266:	ee67 6a27 	vmul.f32	s13, s14, s15
 800226a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800226e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	ee07 3a90 	vmov	s15, r3
 8002278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800227c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002280:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002284:	ee07 3a90 	vmov	s15, r3
 8002288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800228c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002290:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	ee07 3a90 	vmov	s15, r3
}
 800229a:	eeb0 0a67 	vmov.f32	s0, s15
 800229e:	3720      	adds	r7, #32
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 f879 	bl	80023a8 <LPS22HB_Init>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80022cc:	f7ff fd72 	bl	8001db4 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80022d0:	88fb      	ldrh	r3, [r7, #6]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	210f      	movs	r1, #15
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fd90 	bl	8001dfc <SENSOR_IO_Read>
 80022dc:	4603      	mov	r3, r0
 80022de:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	74fb      	strb	r3, [r7, #19]
 80022fe:	e013      	b.n	8002328 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002300:	88fb      	ldrh	r3, [r7, #6]
 8002302:	b2da      	uxtb	r2, r3
 8002304:	7cfb      	ldrb	r3, [r7, #19]
 8002306:	3328      	adds	r3, #40	; 0x28
 8002308:	b2db      	uxtb	r3, r3
 800230a:	7cfc      	ldrb	r4, [r7, #19]
 800230c:	4619      	mov	r1, r3
 800230e:	4610      	mov	r0, r2
 8002310:	f7ff fd74 	bl	8001dfc <SENSOR_IO_Read>
 8002314:	4603      	mov	r3, r0
 8002316:	461a      	mov	r2, r3
 8002318:	f104 0318 	add.w	r3, r4, #24
 800231c:	443b      	add	r3, r7
 800231e:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8002322:	7cfb      	ldrb	r3, [r7, #19]
 8002324:	3301      	adds	r3, #1
 8002326:	74fb      	strb	r3, [r7, #19]
 8002328:	7cfb      	ldrb	r3, [r7, #19]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d9e8      	bls.n	8002300 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800232e:	2300      	movs	r3, #0
 8002330:	74fb      	strb	r3, [r7, #19]
 8002332:	e00f      	b.n	8002354 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	3318      	adds	r3, #24
 8002338:	443b      	add	r3, r7
 800233a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800233e:	461a      	mov	r2, r3
 8002340:	7cfb      	ldrb	r3, [r7, #19]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	4313      	orrs	r3, r2
 800234c:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800234e:	7cfb      	ldrb	r3, [r7, #19]
 8002350:	3301      	adds	r3, #1
 8002352:	74fb      	strb	r3, [r7, #19]
 8002354:	7cfb      	ldrb	r3, [r7, #19]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d9ec      	bls.n	8002334 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800236a:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2264      	movs	r2, #100	; 0x64
 8002374:	fb02 f303 	mul.w	r3, r2, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	da01      	bge.n	8002380 <LPS22HB_P_ReadPressure+0x94>
 800237c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002380:	131b      	asrs	r3, r3, #12
 8002382:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	ee07 3a90 	vmov	s15, r3
 800238a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800238e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80023a4 <LPS22HB_P_ReadPressure+0xb8>
 8002392:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002396:	eef0 7a66 	vmov.f32	s15, s13
}
 800239a:	eeb0 0a67 	vmov.f32	s0, s15
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd90      	pop	{r4, r7, pc}
 80023a4:	42c80000 	.word	0x42c80000

080023a8 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	211a      	movs	r1, #26
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fd1f 	bl	8001dfc <SENSOR_IO_Read>
 80023be:	4603      	mov	r3, r0
 80023c0:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	211a      	movs	r1, #26
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fcf4 	bl	8001dc8 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2110      	movs	r1, #16
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fd08 	bl	8001dfc <SENSOR_IO_Read>
 80023ec:	4603      	mov	r3, r0
 80023ee:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80023fe:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	f023 0302 	bic.w	r3, r3, #2
 8002406:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	f043 0302 	orr.w	r3, r3, #2
 800240e:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	2110      	movs	r1, #16
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fcd5 	bl	8001dc8 <SENSOR_IO_Write>
}  
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002430:	2003      	movs	r0, #3
 8002432:	f000 f961 	bl	80026f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002436:	2000      	movs	r0, #0
 8002438:	f000 f80e 	bl	8002458 <HAL_InitTick>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	71fb      	strb	r3, [r7, #7]
 8002446:	e001      	b.n	800244c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002448:	f7fe ffd4 	bl	80013f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800244c:	79fb      	ldrb	r3, [r7, #7]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002464:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <HAL_InitTick+0x6c>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d023      	beq.n	80024b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800246c:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <HAL_InitTick+0x70>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <HAL_InitTick+0x6c>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4619      	mov	r1, r3
 8002476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247a:	fbb3 f3f1 	udiv	r3, r3, r1
 800247e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f96d 	bl	8002762 <HAL_SYSTICK_Config>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10f      	bne.n	80024ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b0f      	cmp	r3, #15
 8002492:	d809      	bhi.n	80024a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002494:	2200      	movs	r2, #0
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	f04f 30ff 	mov.w	r0, #4294967295
 800249c:	f000 f937 	bl	800270e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024a0:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <HAL_InitTick+0x74>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e007      	b.n	80024b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
 80024ac:	e004      	b.n	80024b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
 80024b2:	e001      	b.n	80024b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000098 	.word	0x20000098
 80024c8:	20000068 	.word	0x20000068
 80024cc:	20000094 	.word	0x20000094

080024d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_IncTick+0x20>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_IncTick+0x24>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <HAL_IncTick+0x24>)
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000098 	.word	0x20000098
 80024f4:	20000970 	.word	0x20000970

080024f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return uwTick;
 80024fc:	4b03      	ldr	r3, [pc, #12]	; (800250c <HAL_GetTick+0x14>)
 80024fe:	681b      	ldr	r3, [r3, #0]
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000970 	.word	0x20000970

08002510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002518:	f7ff ffee 	bl	80024f8 <HAL_GetTick>
 800251c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002528:	d005      	beq.n	8002536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800252a:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <HAL_Delay+0x44>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4413      	add	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002536:	bf00      	nop
 8002538:	f7ff ffde 	bl	80024f8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	429a      	cmp	r2, r3
 8002546:	d8f7      	bhi.n	8002538 <HAL_Delay+0x28>
  {
  }
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000098 	.word	0x20000098

08002558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <__NVIC_SetPriorityGrouping+0x44>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002574:	4013      	ands	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800258a:	4a04      	ldr	r2, [pc, #16]	; (800259c <__NVIC_SetPriorityGrouping+0x44>)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	60d3      	str	r3, [r2, #12]
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <__NVIC_GetPriorityGrouping+0x18>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	0a1b      	lsrs	r3, r3, #8
 80025aa:	f003 0307 	and.w	r3, r3, #7
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	db0b      	blt.n	80025e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	f003 021f 	and.w	r2, r3, #31
 80025d4:	4907      	ldr	r1, [pc, #28]	; (80025f4 <__NVIC_EnableIRQ+0x38>)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	2001      	movs	r0, #1
 80025de:	fa00 f202 	lsl.w	r2, r0, r2
 80025e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000e100 	.word	0xe000e100

080025f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	6039      	str	r1, [r7, #0]
 8002602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002608:	2b00      	cmp	r3, #0
 800260a:	db0a      	blt.n	8002622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	490c      	ldr	r1, [pc, #48]	; (8002644 <__NVIC_SetPriority+0x4c>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	0112      	lsls	r2, r2, #4
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	440b      	add	r3, r1
 800261c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002620:	e00a      	b.n	8002638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	b2da      	uxtb	r2, r3
 8002626:	4908      	ldr	r1, [pc, #32]	; (8002648 <__NVIC_SetPriority+0x50>)
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	3b04      	subs	r3, #4
 8002630:	0112      	lsls	r2, r2, #4
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	440b      	add	r3, r1
 8002636:	761a      	strb	r2, [r3, #24]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000e100 	.word	0xe000e100
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800264c:	b480      	push	{r7}
 800264e:	b089      	sub	sp, #36	; 0x24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f1c3 0307 	rsb	r3, r3, #7
 8002666:	2b04      	cmp	r3, #4
 8002668:	bf28      	it	cs
 800266a:	2304      	movcs	r3, #4
 800266c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3304      	adds	r3, #4
 8002672:	2b06      	cmp	r3, #6
 8002674:	d902      	bls.n	800267c <NVIC_EncodePriority+0x30>
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3b03      	subs	r3, #3
 800267a:	e000      	b.n	800267e <NVIC_EncodePriority+0x32>
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002680:	f04f 32ff 	mov.w	r2, #4294967295
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43da      	mvns	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	401a      	ands	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002694:	f04f 31ff 	mov.w	r1, #4294967295
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	fa01 f303 	lsl.w	r3, r1, r3
 800269e:	43d9      	mvns	r1, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	4313      	orrs	r3, r2
         );
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3724      	adds	r7, #36	; 0x24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c4:	d301      	bcc.n	80026ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c6:	2301      	movs	r3, #1
 80026c8:	e00f      	b.n	80026ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ca:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <SysTick_Config+0x40>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026d2:	210f      	movs	r1, #15
 80026d4:	f04f 30ff 	mov.w	r0, #4294967295
 80026d8:	f7ff ff8e 	bl	80025f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <SysTick_Config+0x40>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026e2:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <SysTick_Config+0x40>)
 80026e4:	2207      	movs	r2, #7
 80026e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	e000e010 	.word	0xe000e010

080026f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ff29 	bl	8002558 <__NVIC_SetPriorityGrouping>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002720:	f7ff ff3e 	bl	80025a0 <__NVIC_GetPriorityGrouping>
 8002724:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f7ff ff8e 	bl	800264c <NVIC_EncodePriority>
 8002730:	4602      	mov	r2, r0
 8002732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff5d 	bl	80025f8 <__NVIC_SetPriority>
}
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff31 	bl	80025bc <__NVIC_EnableIRQ>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ffa2 	bl	80026b4 <SysTick_Config>
 8002770:	4603      	mov	r3, r0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e0ac      	b.n	80028e8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f8b2 	bl	80028fc <DFSDM_GetChannelFromInstance>
 8002798:	4603      	mov	r3, r0
 800279a:	4a55      	ldr	r2, [pc, #340]	; (80028f0 <HAL_DFSDM_ChannelInit+0x174>)
 800279c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e09f      	b.n	80028e8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7fe fe47 	bl	800143c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80027ae:	4b51      	ldr	r3, [pc, #324]	; (80028f4 <HAL_DFSDM_ChannelInit+0x178>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	3301      	adds	r3, #1
 80027b4:	4a4f      	ldr	r2, [pc, #316]	; (80028f4 <HAL_DFSDM_ChannelInit+0x178>)
 80027b6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80027b8:	4b4e      	ldr	r3, [pc, #312]	; (80028f4 <HAL_DFSDM_ChannelInit+0x178>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d125      	bne.n	800280c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80027c0:	4b4d      	ldr	r3, [pc, #308]	; (80028f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a4c      	ldr	r2, [pc, #304]	; (80028f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80027c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027ca:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80027cc:	4b4a      	ldr	r3, [pc, #296]	; (80028f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	4948      	ldr	r1, [pc, #288]	; (80028f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80027da:	4b47      	ldr	r3, [pc, #284]	; (80028f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a46      	ldr	r2, [pc, #280]	; (80028f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80027e0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80027e4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	791b      	ldrb	r3, [r3, #4]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d108      	bne.n	8002800 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80027ee:	4b42      	ldr	r3, [pc, #264]	; (80028f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	041b      	lsls	r3, r3, #16
 80027fa:	493f      	ldr	r1, [pc, #252]	; (80028f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002800:	4b3d      	ldr	r3, [pc, #244]	; (80028f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a3c      	ldr	r2, [pc, #240]	; (80028f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002806:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800280a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800281a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6819      	ldr	r1, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800282a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002830:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 020f 	bic.w	r2, r2, #15
 8002848:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6819      	ldr	r1, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002870:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6899      	ldr	r1, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	3b01      	subs	r3, #1
 8002882:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f002 0207 	and.w	r2, r2, #7
 800289c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028c8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 f810 	bl	80028fc <DFSDM_GetChannelFromInstance>
 80028dc:	4602      	mov	r2, r0
 80028de:	4904      	ldr	r1, [pc, #16]	; (80028f0 <HAL_DFSDM_ChannelInit+0x174>)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000978 	.word	0x20000978
 80028f4:	20000974 	.word	0x20000974
 80028f8:	40016000 	.word	0x40016000

080028fc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a1c      	ldr	r2, [pc, #112]	; (8002978 <DFSDM_GetChannelFromInstance+0x7c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d102      	bne.n	8002912 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	e02b      	b.n	800296a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a19      	ldr	r2, [pc, #100]	; (800297c <DFSDM_GetChannelFromInstance+0x80>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d102      	bne.n	8002920 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800291a:	2301      	movs	r3, #1
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e024      	b.n	800296a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a17      	ldr	r2, [pc, #92]	; (8002980 <DFSDM_GetChannelFromInstance+0x84>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d102      	bne.n	800292e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002928:	2302      	movs	r3, #2
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	e01d      	b.n	800296a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a14      	ldr	r2, [pc, #80]	; (8002984 <DFSDM_GetChannelFromInstance+0x88>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d102      	bne.n	800293c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002936:	2304      	movs	r3, #4
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	e016      	b.n	800296a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a12      	ldr	r2, [pc, #72]	; (8002988 <DFSDM_GetChannelFromInstance+0x8c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d102      	bne.n	800294a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002944:	2305      	movs	r3, #5
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	e00f      	b.n	800296a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a0f      	ldr	r2, [pc, #60]	; (800298c <DFSDM_GetChannelFromInstance+0x90>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d102      	bne.n	8002958 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002952:	2306      	movs	r3, #6
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	e008      	b.n	800296a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <DFSDM_GetChannelFromInstance+0x94>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d102      	bne.n	8002966 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002960:	2307      	movs	r3, #7
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	e001      	b.n	800296a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002966:	2303      	movs	r3, #3
 8002968:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800296a:	68fb      	ldr	r3, [r7, #12]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	40016000 	.word	0x40016000
 800297c:	40016020 	.word	0x40016020
 8002980:	40016040 	.word	0x40016040
 8002984:	40016080 	.word	0x40016080
 8002988:	400160a0 	.word	0x400160a0
 800298c:	400160c0 	.word	0x400160c0
 8002990:	400160e0 	.word	0x400160e0

08002994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029a2:	e17f      	b.n	8002ca4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	2101      	movs	r1, #1
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	4013      	ands	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 8171 	beq.w	8002c9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d005      	beq.n	80029d4 <HAL_GPIO_Init+0x40>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d130      	bne.n	8002a36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	2203      	movs	r2, #3
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	f003 0201 	and.w	r2, r3, #1
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d118      	bne.n	8002a74 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a48:	2201      	movs	r2, #1
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4013      	ands	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	08db      	lsrs	r3, r3, #3
 8002a5e:	f003 0201 	and.w	r2, r3, #1
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d017      	beq.n	8002ab0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4013      	ands	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d123      	bne.n	8002b04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	08da      	lsrs	r2, r3, #3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3208      	adds	r2, #8
 8002ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	08da      	lsrs	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3208      	adds	r2, #8
 8002afe:	6939      	ldr	r1, [r7, #16]
 8002b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	2203      	movs	r2, #3
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0203 	and.w	r2, r3, #3
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80ac 	beq.w	8002c9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b46:	4b5f      	ldr	r3, [pc, #380]	; (8002cc4 <HAL_GPIO_Init+0x330>)
 8002b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4a:	4a5e      	ldr	r2, [pc, #376]	; (8002cc4 <HAL_GPIO_Init+0x330>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6613      	str	r3, [r2, #96]	; 0x60
 8002b52:	4b5c      	ldr	r3, [pc, #368]	; (8002cc4 <HAL_GPIO_Init+0x330>)
 8002b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	60bb      	str	r3, [r7, #8]
 8002b5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b5e:	4a5a      	ldr	r2, [pc, #360]	; (8002cc8 <HAL_GPIO_Init+0x334>)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	089b      	lsrs	r3, r3, #2
 8002b64:	3302      	adds	r3, #2
 8002b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	220f      	movs	r2, #15
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b88:	d025      	beq.n	8002bd6 <HAL_GPIO_Init+0x242>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4f      	ldr	r2, [pc, #316]	; (8002ccc <HAL_GPIO_Init+0x338>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d01f      	beq.n	8002bd2 <HAL_GPIO_Init+0x23e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4e      	ldr	r2, [pc, #312]	; (8002cd0 <HAL_GPIO_Init+0x33c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d019      	beq.n	8002bce <HAL_GPIO_Init+0x23a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a4d      	ldr	r2, [pc, #308]	; (8002cd4 <HAL_GPIO_Init+0x340>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d013      	beq.n	8002bca <HAL_GPIO_Init+0x236>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a4c      	ldr	r2, [pc, #304]	; (8002cd8 <HAL_GPIO_Init+0x344>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00d      	beq.n	8002bc6 <HAL_GPIO_Init+0x232>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a4b      	ldr	r2, [pc, #300]	; (8002cdc <HAL_GPIO_Init+0x348>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d007      	beq.n	8002bc2 <HAL_GPIO_Init+0x22e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a4a      	ldr	r2, [pc, #296]	; (8002ce0 <HAL_GPIO_Init+0x34c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d101      	bne.n	8002bbe <HAL_GPIO_Init+0x22a>
 8002bba:	2306      	movs	r3, #6
 8002bbc:	e00c      	b.n	8002bd8 <HAL_GPIO_Init+0x244>
 8002bbe:	2307      	movs	r3, #7
 8002bc0:	e00a      	b.n	8002bd8 <HAL_GPIO_Init+0x244>
 8002bc2:	2305      	movs	r3, #5
 8002bc4:	e008      	b.n	8002bd8 <HAL_GPIO_Init+0x244>
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	e006      	b.n	8002bd8 <HAL_GPIO_Init+0x244>
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e004      	b.n	8002bd8 <HAL_GPIO_Init+0x244>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e002      	b.n	8002bd8 <HAL_GPIO_Init+0x244>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_GPIO_Init+0x244>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	f002 0203 	and.w	r2, r2, #3
 8002bde:	0092      	lsls	r2, r2, #2
 8002be0:	4093      	lsls	r3, r2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002be8:	4937      	ldr	r1, [pc, #220]	; (8002cc8 <HAL_GPIO_Init+0x334>)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	3302      	adds	r3, #2
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bf6:	4b3b      	ldr	r3, [pc, #236]	; (8002ce4 <HAL_GPIO_Init+0x350>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4013      	ands	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c1a:	4a32      	ldr	r2, [pc, #200]	; (8002ce4 <HAL_GPIO_Init+0x350>)
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c20:	4b30      	ldr	r3, [pc, #192]	; (8002ce4 <HAL_GPIO_Init+0x350>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c44:	4a27      	ldr	r2, [pc, #156]	; (8002ce4 <HAL_GPIO_Init+0x350>)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c4a:	4b26      	ldr	r3, [pc, #152]	; (8002ce4 <HAL_GPIO_Init+0x350>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ce4 <HAL_GPIO_Init+0x350>)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c74:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <HAL_GPIO_Init+0x350>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c98:	4a12      	ldr	r2, [pc, #72]	; (8002ce4 <HAL_GPIO_Init+0x350>)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f47f ae78 	bne.w	80029a4 <HAL_GPIO_Init+0x10>
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40010000 	.word	0x40010000
 8002ccc:	48000400 	.word	0x48000400
 8002cd0:	48000800 	.word	0x48000800
 8002cd4:	48000c00 	.word	0x48000c00
 8002cd8:	48001000 	.word	0x48001000
 8002cdc:	48001400 	.word	0x48001400
 8002ce0:	48001800 	.word	0x48001800
 8002ce4:	40010400 	.word	0x40010400

08002ce8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002cf6:	e0cd      	b.n	8002e94 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	4013      	ands	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80c0 	beq.w	8002e8e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002d0e:	4a68      	ldr	r2, [pc, #416]	; (8002eb0 <HAL_GPIO_DeInit+0x1c8>)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	089b      	lsrs	r3, r3, #2
 8002d14:	3302      	adds	r3, #2
 8002d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	220f      	movs	r2, #15
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d36:	d025      	beq.n	8002d84 <HAL_GPIO_DeInit+0x9c>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a5e      	ldr	r2, [pc, #376]	; (8002eb4 <HAL_GPIO_DeInit+0x1cc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d01f      	beq.n	8002d80 <HAL_GPIO_DeInit+0x98>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a5d      	ldr	r2, [pc, #372]	; (8002eb8 <HAL_GPIO_DeInit+0x1d0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d019      	beq.n	8002d7c <HAL_GPIO_DeInit+0x94>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a5c      	ldr	r2, [pc, #368]	; (8002ebc <HAL_GPIO_DeInit+0x1d4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d013      	beq.n	8002d78 <HAL_GPIO_DeInit+0x90>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a5b      	ldr	r2, [pc, #364]	; (8002ec0 <HAL_GPIO_DeInit+0x1d8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00d      	beq.n	8002d74 <HAL_GPIO_DeInit+0x8c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a5a      	ldr	r2, [pc, #360]	; (8002ec4 <HAL_GPIO_DeInit+0x1dc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d007      	beq.n	8002d70 <HAL_GPIO_DeInit+0x88>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a59      	ldr	r2, [pc, #356]	; (8002ec8 <HAL_GPIO_DeInit+0x1e0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d101      	bne.n	8002d6c <HAL_GPIO_DeInit+0x84>
 8002d68:	2306      	movs	r3, #6
 8002d6a:	e00c      	b.n	8002d86 <HAL_GPIO_DeInit+0x9e>
 8002d6c:	2307      	movs	r3, #7
 8002d6e:	e00a      	b.n	8002d86 <HAL_GPIO_DeInit+0x9e>
 8002d70:	2305      	movs	r3, #5
 8002d72:	e008      	b.n	8002d86 <HAL_GPIO_DeInit+0x9e>
 8002d74:	2304      	movs	r3, #4
 8002d76:	e006      	b.n	8002d86 <HAL_GPIO_DeInit+0x9e>
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e004      	b.n	8002d86 <HAL_GPIO_DeInit+0x9e>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e002      	b.n	8002d86 <HAL_GPIO_DeInit+0x9e>
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <HAL_GPIO_DeInit+0x9e>
 8002d84:	2300      	movs	r3, #0
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	f002 0203 	and.w	r2, r2, #3
 8002d8c:	0092      	lsls	r2, r2, #2
 8002d8e:	4093      	lsls	r3, r2
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d132      	bne.n	8002dfc <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002d96:	4b4d      	ldr	r3, [pc, #308]	; (8002ecc <HAL_GPIO_DeInit+0x1e4>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	494b      	ldr	r1, [pc, #300]	; (8002ecc <HAL_GPIO_DeInit+0x1e4>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002da4:	4b49      	ldr	r3, [pc, #292]	; (8002ecc <HAL_GPIO_DeInit+0x1e4>)
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	4947      	ldr	r1, [pc, #284]	; (8002ecc <HAL_GPIO_DeInit+0x1e4>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002db2:	4b46      	ldr	r3, [pc, #280]	; (8002ecc <HAL_GPIO_DeInit+0x1e4>)
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	4944      	ldr	r1, [pc, #272]	; (8002ecc <HAL_GPIO_DeInit+0x1e4>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002dc0:	4b42      	ldr	r3, [pc, #264]	; (8002ecc <HAL_GPIO_DeInit+0x1e4>)
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	4940      	ldr	r1, [pc, #256]	; (8002ecc <HAL_GPIO_DeInit+0x1e4>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	220f      	movs	r2, #15
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002dde:	4a34      	ldr	r2, [pc, #208]	; (8002eb0 <HAL_GPIO_DeInit+0x1c8>)
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	3302      	adds	r3, #2
 8002de6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	43da      	mvns	r2, r3
 8002dee:	4830      	ldr	r0, [pc, #192]	; (8002eb0 <HAL_GPIO_DeInit+0x1c8>)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	089b      	lsrs	r3, r3, #2
 8002df4:	400a      	ands	r2, r1
 8002df6:	3302      	adds	r3, #2
 8002df8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	2103      	movs	r1, #3
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	08da      	lsrs	r2, r3, #3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3208      	adds	r2, #8
 8002e18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	220f      	movs	r2, #15
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	08d2      	lsrs	r2, r2, #3
 8002e30:	4019      	ands	r1, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3208      	adds	r2, #8
 8002e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	2103      	movs	r1, #3
 8002e44:	fa01 f303 	lsl.w	r3, r1, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	2101      	movs	r1, #1
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	401a      	ands	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	2103      	movs	r1, #3
 8002e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	401a      	ands	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7e:	2101      	movs	r1, #1
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	fa01 f303 	lsl.w	r3, r1, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	401a      	ands	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	3301      	adds	r3, #1
 8002e92:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f47f af2b 	bne.w	8002cf8 <HAL_GPIO_DeInit+0x10>
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	bf00      	nop
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	40010000 	.word	0x40010000
 8002eb4:	48000400 	.word	0x48000400
 8002eb8:	48000800 	.word	0x48000800
 8002ebc:	48000c00 	.word	0x48000c00
 8002ec0:	48001000 	.word	0x48001000
 8002ec4:	48001400 	.word	0x48001400
 8002ec8:	48001800 	.word	0x48001800
 8002ecc:	40010400 	.word	0x40010400

08002ed0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	887b      	ldrh	r3, [r7, #2]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
 8002eec:	e001      	b.n	8002ef2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	807b      	strh	r3, [r7, #2]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f10:	787b      	ldrb	r3, [r7, #1]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f16:	887a      	ldrh	r2, [r7, #2]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f1c:	e002      	b.n	8002f24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f1e:	887a      	ldrh	r2, [r7, #2]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f3a:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d006      	beq.n	8002f54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f46:	4a05      	ldr	r2, [pc, #20]	; (8002f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f806 	bl	8002f60 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f54:	bf00      	nop
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40010400 	.word	0x40010400

08002f60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e081      	b.n	800308c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d106      	bne.n	8002fa2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f8a8 	bl	80030f2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2224      	movs	r2, #36	; 0x24
 8002fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0201 	bic.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fc6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fd6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d107      	bne.n	8002ff0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fec:	609a      	str	r2, [r3, #8]
 8002fee:	e006      	b.n	8002ffe <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ffc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d104      	bne.n	8003010 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800300e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800301e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003022:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003032:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69d9      	ldr	r1, [r3, #28]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1a      	ldr	r2, [r3, #32]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 0201 	orr.w	r2, r2, #1
 800306c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e021      	b.n	80030ea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2224      	movs	r2, #36	; 0x24
 80030aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f821 	bl	8003106 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	4608      	mov	r0, r1
 8003126:	4611      	mov	r1, r2
 8003128:	461a      	mov	r2, r3
 800312a:	4603      	mov	r3, r0
 800312c:	817b      	strh	r3, [r7, #10]
 800312e:	460b      	mov	r3, r1
 8003130:	813b      	strh	r3, [r7, #8]
 8003132:	4613      	mov	r3, r2
 8003134:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b20      	cmp	r3, #32
 8003140:	f040 80f9 	bne.w	8003336 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_I2C_Mem_Write+0x34>
 800314a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800314c:	2b00      	cmp	r3, #0
 800314e:	d105      	bne.n	800315c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003156:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0ed      	b.n	8003338 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_I2C_Mem_Write+0x4e>
 8003166:	2302      	movs	r3, #2
 8003168:	e0e6      	b.n	8003338 <HAL_I2C_Mem_Write+0x21c>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003172:	f7ff f9c1 	bl	80024f8 <HAL_GetTick>
 8003176:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	2319      	movs	r3, #25
 800317e:	2201      	movs	r2, #1
 8003180:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 fac3 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0d1      	b.n	8003338 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2221      	movs	r2, #33	; 0x21
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2240      	movs	r2, #64	; 0x40
 80031a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a3a      	ldr	r2, [r7, #32]
 80031ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031bc:	88f8      	ldrh	r0, [r7, #6]
 80031be:	893a      	ldrh	r2, [r7, #8]
 80031c0:	8979      	ldrh	r1, [r7, #10]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	4603      	mov	r3, r0
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f9d3 	bl	8003578 <I2C_RequestMemoryWrite>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0a9      	b.n	8003338 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	2bff      	cmp	r3, #255	; 0xff
 80031ec:	d90e      	bls.n	800320c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	22ff      	movs	r2, #255	; 0xff
 80031f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	8979      	ldrh	r1, [r7, #10]
 80031fc:	2300      	movs	r3, #0
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 fc2b 	bl	8003a60 <I2C_TransferConfig>
 800320a:	e00f      	b.n	800322c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003210:	b29a      	uxth	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321a:	b2da      	uxtb	r2, r3
 800321c:	8979      	ldrh	r1, [r7, #10]
 800321e:	2300      	movs	r3, #0
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 fc1a 	bl	8003a60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 faad 	bl	8003790 <I2C_WaitOnTXISFlagUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e07b      	b.n	8003338 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	781a      	ldrb	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d034      	beq.n	80032e4 <HAL_I2C_Mem_Write+0x1c8>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327e:	2b00      	cmp	r3, #0
 8003280:	d130      	bne.n	80032e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	2200      	movs	r2, #0
 800328a:	2180      	movs	r1, #128	; 0x80
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fa3f 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e04d      	b.n	8003338 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2bff      	cmp	r3, #255	; 0xff
 80032a4:	d90e      	bls.n	80032c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	22ff      	movs	r2, #255	; 0xff
 80032aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	8979      	ldrh	r1, [r7, #10]
 80032b4:	2300      	movs	r3, #0
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 fbcf 	bl	8003a60 <I2C_TransferConfig>
 80032c2:	e00f      	b.n	80032e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	8979      	ldrh	r1, [r7, #10]
 80032d6:	2300      	movs	r3, #0
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fbbe 	bl	8003a60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d19e      	bne.n	800322c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 fa8c 	bl	8003810 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e01a      	b.n	8003338 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2220      	movs	r2, #32
 8003308:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6859      	ldr	r1, [r3, #4]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <HAL_I2C_Mem_Write+0x224>)
 8003316:	400b      	ands	r3, r1
 8003318:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e000      	b.n	8003338 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003336:	2302      	movs	r3, #2
  }
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	fe00e800 	.word	0xfe00e800

08003344 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af02      	add	r7, sp, #8
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	4608      	mov	r0, r1
 800334e:	4611      	mov	r1, r2
 8003350:	461a      	mov	r2, r3
 8003352:	4603      	mov	r3, r0
 8003354:	817b      	strh	r3, [r7, #10]
 8003356:	460b      	mov	r3, r1
 8003358:	813b      	strh	r3, [r7, #8]
 800335a:	4613      	mov	r3, r2
 800335c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b20      	cmp	r3, #32
 8003368:	f040 80fd 	bne.w	8003566 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <HAL_I2C_Mem_Read+0x34>
 8003372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003374:	2b00      	cmp	r3, #0
 8003376:	d105      	bne.n	8003384 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800337e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0f1      	b.n	8003568 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_I2C_Mem_Read+0x4e>
 800338e:	2302      	movs	r3, #2
 8003390:	e0ea      	b.n	8003568 <HAL_I2C_Mem_Read+0x224>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800339a:	f7ff f8ad 	bl	80024f8 <HAL_GetTick>
 800339e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	2319      	movs	r3, #25
 80033a6:	2201      	movs	r2, #1
 80033a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f9af 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0d5      	b.n	8003568 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2222      	movs	r2, #34	; 0x22
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2240      	movs	r2, #64	; 0x40
 80033c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a3a      	ldr	r2, [r7, #32]
 80033d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033e4:	88f8      	ldrh	r0, [r7, #6]
 80033e6:	893a      	ldrh	r2, [r7, #8]
 80033e8:	8979      	ldrh	r1, [r7, #10]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	4603      	mov	r3, r0
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f913 	bl	8003620 <I2C_RequestMemoryRead>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0ad      	b.n	8003568 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003410:	b29b      	uxth	r3, r3
 8003412:	2bff      	cmp	r3, #255	; 0xff
 8003414:	d90e      	bls.n	8003434 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	22ff      	movs	r2, #255	; 0xff
 800341a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003420:	b2da      	uxtb	r2, r3
 8003422:	8979      	ldrh	r1, [r7, #10]
 8003424:	4b52      	ldr	r3, [pc, #328]	; (8003570 <HAL_I2C_Mem_Read+0x22c>)
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 fb17 	bl	8003a60 <I2C_TransferConfig>
 8003432:	e00f      	b.n	8003454 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003442:	b2da      	uxtb	r2, r3
 8003444:	8979      	ldrh	r1, [r7, #10]
 8003446:	4b4a      	ldr	r3, [pc, #296]	; (8003570 <HAL_I2C_Mem_Read+0x22c>)
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fb06 	bl	8003a60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345a:	2200      	movs	r2, #0
 800345c:	2104      	movs	r1, #4
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f956 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e07c      	b.n	8003568 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d034      	beq.n	8003514 <HAL_I2C_Mem_Read+0x1d0>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d130      	bne.n	8003514 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	2200      	movs	r2, #0
 80034ba:	2180      	movs	r1, #128	; 0x80
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 f927 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e04d      	b.n	8003568 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2bff      	cmp	r3, #255	; 0xff
 80034d4:	d90e      	bls.n	80034f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	22ff      	movs	r2, #255	; 0xff
 80034da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	8979      	ldrh	r1, [r7, #10]
 80034e4:	2300      	movs	r3, #0
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 fab7 	bl	8003a60 <I2C_TransferConfig>
 80034f2:	e00f      	b.n	8003514 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003502:	b2da      	uxtb	r2, r3
 8003504:	8979      	ldrh	r1, [r7, #10]
 8003506:	2300      	movs	r3, #0
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 faa6 	bl	8003a60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d19a      	bne.n	8003454 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f974 	bl	8003810 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e01a      	b.n	8003568 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2220      	movs	r2, #32
 8003538:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <HAL_I2C_Mem_Read+0x230>)
 8003546:	400b      	ands	r3, r1
 8003548:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	e000      	b.n	8003568 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003566:	2302      	movs	r3, #2
  }
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	80002400 	.word	0x80002400
 8003574:	fe00e800 	.word	0xfe00e800

08003578 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af02      	add	r7, sp, #8
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	4608      	mov	r0, r1
 8003582:	4611      	mov	r1, r2
 8003584:	461a      	mov	r2, r3
 8003586:	4603      	mov	r3, r0
 8003588:	817b      	strh	r3, [r7, #10]
 800358a:	460b      	mov	r3, r1
 800358c:	813b      	strh	r3, [r7, #8]
 800358e:	4613      	mov	r3, r2
 8003590:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	b2da      	uxtb	r2, r3
 8003596:	8979      	ldrh	r1, [r7, #10]
 8003598:	4b20      	ldr	r3, [pc, #128]	; (800361c <I2C_RequestMemoryWrite+0xa4>)
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 fa5d 	bl	8003a60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	69b9      	ldr	r1, [r7, #24]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f8f0 	bl	8003790 <I2C_WaitOnTXISFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e02c      	b.n	8003614 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d105      	bne.n	80035cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035c0:	893b      	ldrh	r3, [r7, #8]
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	629a      	str	r2, [r3, #40]	; 0x28
 80035ca:	e015      	b.n	80035f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035cc:	893b      	ldrh	r3, [r7, #8]
 80035ce:	0a1b      	lsrs	r3, r3, #8
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	69b9      	ldr	r1, [r7, #24]
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 f8d6 	bl	8003790 <I2C_WaitOnTXISFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e012      	b.n	8003614 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035ee:	893b      	ldrh	r3, [r7, #8]
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2200      	movs	r2, #0
 8003600:	2180      	movs	r1, #128	; 0x80
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f884 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	80002000 	.word	0x80002000

08003620 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	4608      	mov	r0, r1
 800362a:	4611      	mov	r1, r2
 800362c:	461a      	mov	r2, r3
 800362e:	4603      	mov	r3, r0
 8003630:	817b      	strh	r3, [r7, #10]
 8003632:	460b      	mov	r3, r1
 8003634:	813b      	strh	r3, [r7, #8]
 8003636:	4613      	mov	r3, r2
 8003638:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	8979      	ldrh	r1, [r7, #10]
 8003640:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <I2C_RequestMemoryRead+0xa4>)
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	2300      	movs	r3, #0
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fa0a 	bl	8003a60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	69b9      	ldr	r1, [r7, #24]
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f89d 	bl	8003790 <I2C_WaitOnTXISFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e02c      	b.n	80036ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d105      	bne.n	8003672 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003666:	893b      	ldrh	r3, [r7, #8]
 8003668:	b2da      	uxtb	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	629a      	str	r2, [r3, #40]	; 0x28
 8003670:	e015      	b.n	800369e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003672:	893b      	ldrh	r3, [r7, #8]
 8003674:	0a1b      	lsrs	r3, r3, #8
 8003676:	b29b      	uxth	r3, r3
 8003678:	b2da      	uxtb	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003680:	69fa      	ldr	r2, [r7, #28]
 8003682:	69b9      	ldr	r1, [r7, #24]
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f883 	bl	8003790 <I2C_WaitOnTXISFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e012      	b.n	80036ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003694:	893b      	ldrh	r3, [r7, #8]
 8003696:	b2da      	uxtb	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	2200      	movs	r2, #0
 80036a6:	2140      	movs	r1, #64	; 0x40
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 f831 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	80002000 	.word	0x80002000

080036c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d103      	bne.n	80036e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2200      	movs	r2, #0
 80036e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d007      	beq.n	8003704 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699a      	ldr	r2, [r3, #24]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	619a      	str	r2, [r3, #24]
  }
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	4613      	mov	r3, r2
 800371e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003720:	e022      	b.n	8003768 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d01e      	beq.n	8003768 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372a:	f7fe fee5 	bl	80024f8 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d302      	bcc.n	8003740 <I2C_WaitOnFlagUntilTimeout+0x30>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d113      	bne.n	8003768 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003744:	f043 0220 	orr.w	r2, r3, #32
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e00f      	b.n	8003788 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4013      	ands	r3, r2
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	429a      	cmp	r2, r3
 8003776:	bf0c      	ite	eq
 8003778:	2301      	moveq	r3, #1
 800377a:	2300      	movne	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	429a      	cmp	r2, r3
 8003784:	d0cd      	beq.n	8003722 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800379c:	e02c      	b.n	80037f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f870 	bl	8003888 <I2C_IsErrorOccurred>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e02a      	b.n	8003808 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b8:	d01e      	beq.n	80037f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ba:	f7fe fe9d 	bl	80024f8 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d302      	bcc.n	80037d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d113      	bne.n	80037f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d4:	f043 0220 	orr.w	r2, r3, #32
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e007      	b.n	8003808 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b02      	cmp	r3, #2
 8003804:	d1cb      	bne.n	800379e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800381c:	e028      	b.n	8003870 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f830 	bl	8003888 <I2C_IsErrorOccurred>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e026      	b.n	8003880 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003832:	f7fe fe61 	bl	80024f8 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	429a      	cmp	r2, r3
 8003840:	d302      	bcc.n	8003848 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d113      	bne.n	8003870 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384c:	f043 0220 	orr.w	r2, r3, #32
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e007      	b.n	8003880 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b20      	cmp	r3, #32
 800387c:	d1cf      	bne.n	800381e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08a      	sub	sp, #40	; 0x28
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80038a2:	2300      	movs	r3, #0
 80038a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d075      	beq.n	80039a0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2210      	movs	r2, #16
 80038ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038bc:	e056      	b.n	800396c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c4:	d052      	beq.n	800396c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038c6:	f7fe fe17 	bl	80024f8 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d302      	bcc.n	80038dc <I2C_IsErrorOccurred+0x54>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d147      	bne.n	800396c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038fe:	d12e      	bne.n	800395e <I2C_IsErrorOccurred+0xd6>
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003906:	d02a      	beq.n	800395e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003908:	7cfb      	ldrb	r3, [r7, #19]
 800390a:	2b20      	cmp	r3, #32
 800390c:	d027      	beq.n	800395e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800391c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800391e:	f7fe fdeb 	bl	80024f8 <HAL_GetTick>
 8003922:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003924:	e01b      	b.n	800395e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003926:	f7fe fde7 	bl	80024f8 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b19      	cmp	r3, #25
 8003932:	d914      	bls.n	800395e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003938:	f043 0220 	orr.w	r2, r3, #32
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b20      	cmp	r3, #32
 800396a:	d1dc      	bne.n	8003926 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b20      	cmp	r3, #32
 8003978:	d003      	beq.n	8003982 <I2C_IsErrorOccurred+0xfa>
 800397a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800397e:	2b00      	cmp	r3, #0
 8003980:	d09d      	beq.n	80038be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003986:	2b00      	cmp	r3, #0
 8003988:	d103      	bne.n	8003992 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2220      	movs	r2, #32
 8003990:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	f043 0304 	orr.w	r3, r3, #4
 8003998:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00b      	beq.n	80039ec <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	f043 0308 	orr.w	r3, r3, #8
 80039da:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00b      	beq.n	8003a0e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	f043 0302 	orr.w	r3, r3, #2
 80039fc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d01c      	beq.n	8003a50 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f7ff fe56 	bl	80036c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6859      	ldr	r1, [r3, #4]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <I2C_IsErrorOccurred+0x1d4>)
 8003a28:	400b      	ands	r3, r1
 8003a2a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3728      	adds	r7, #40	; 0x28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	fe00e800 	.word	0xfe00e800

08003a60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	817b      	strh	r3, [r7, #10]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a72:	897b      	ldrh	r3, [r7, #10]
 8003a74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a78:	7a7b      	ldrb	r3, [r7, #9]
 8003a7a:	041b      	lsls	r3, r3, #16
 8003a7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	0d5b      	lsrs	r3, r3, #21
 8003a9a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <I2C_TransferConfig+0x60>)
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	ea02 0103 	and.w	r1, r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	03ff63ff 	.word	0x03ff63ff

08003ac4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d138      	bne.n	8003b4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e032      	b.n	8003b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2224      	movs	r2, #36	; 0x24
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0201 	bic.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6819      	ldr	r1, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e000      	b.n	8003b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b4c:	2302      	movs	r3, #2
  }
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b5c:	b08f      	sub	sp, #60	; 0x3c
 8003b5e:	af0a      	add	r7, sp, #40	; 0x28
 8003b60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e116      	b.n	8003d9a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fd fe46 	bl	8001818 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2203      	movs	r2, #3
 8003b90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f003 f9f9 	bl	8006fa2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	603b      	str	r3, [r7, #0]
 8003bb6:	687e      	ldr	r6, [r7, #4]
 8003bb8:	466d      	mov	r5, sp
 8003bba:	f106 0410 	add.w	r4, r6, #16
 8003bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bca:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bce:	1d33      	adds	r3, r6, #4
 8003bd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bd2:	6838      	ldr	r0, [r7, #0]
 8003bd4:	f003 f9b9 	bl	8006f4a <USB_CoreInit>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2202      	movs	r2, #2
 8003be2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0d7      	b.n	8003d9a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f003 f9e7 	bl	8006fc4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	73fb      	strb	r3, [r7, #15]
 8003bfa:	e04a      	b.n	8003c92 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bfc:	7bfa      	ldrb	r2, [r7, #15]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	333d      	adds	r3, #61	; 0x3d
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c10:	7bfa      	ldrb	r2, [r7, #15]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	333c      	adds	r3, #60	; 0x3c
 8003c20:	7bfa      	ldrb	r2, [r7, #15]
 8003c22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c24:	7bfa      	ldrb	r2, [r7, #15]
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	b298      	uxth	r0, r3
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	3344      	adds	r3, #68	; 0x44
 8003c38:	4602      	mov	r2, r0
 8003c3a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c3c:	7bfa      	ldrb	r2, [r7, #15]
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	4613      	mov	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	3340      	adds	r3, #64	; 0x40
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c50:	7bfa      	ldrb	r2, [r7, #15]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	3348      	adds	r3, #72	; 0x48
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c64:	7bfa      	ldrb	r2, [r7, #15]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	334c      	adds	r3, #76	; 0x4c
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c78:	7bfa      	ldrb	r2, [r7, #15]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	3354      	adds	r3, #84	; 0x54
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	73fb      	strb	r3, [r7, #15]
 8003c92:	7bfa      	ldrb	r2, [r7, #15]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d3af      	bcc.n	8003bfc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	73fb      	strb	r3, [r7, #15]
 8003ca0:	e044      	b.n	8003d2c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ca2:	7bfa      	ldrb	r2, [r7, #15]
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	4413      	add	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cb8:	7bfa      	ldrb	r2, [r7, #15]
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003cca:	7bfa      	ldrb	r2, [r7, #15]
 8003ccc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cce:	7bfa      	ldrb	r2, [r7, #15]
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ce4:	7bfa      	ldrb	r2, [r7, #15]
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cfa:	7bfa      	ldrb	r2, [r7, #15]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d10:	7bfa      	ldrb	r2, [r7, #15]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d26:	7bfb      	ldrb	r3, [r7, #15]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]
 8003d2c:	7bfa      	ldrb	r2, [r7, #15]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d3b5      	bcc.n	8003ca2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	687e      	ldr	r6, [r7, #4]
 8003d3e:	466d      	mov	r5, sp
 8003d40:	f106 0410 	add.w	r4, r6, #16
 8003d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d50:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d54:	1d33      	adds	r3, r6, #4
 8003d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d58:	6838      	ldr	r0, [r7, #0]
 8003d5a:	f003 f97f 	bl	800705c <USB_DevInit>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e014      	b.n	8003d9a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d102      	bne.n	8003d8e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f80a 	bl	8003da2 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f003 fb2b 	bl	80073ee <USB_DevDisconnect>

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003da2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b085      	sub	sp, #20
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	f043 0303 	orr.w	r3, r3, #3
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfa:	6013      	str	r3, [r2, #0]
}
 8003dfc:	bf00      	nop
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40007000 	.word	0x40007000

08003e0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e10:	4b04      	ldr	r3, [pc, #16]	; (8003e24 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40007000 	.word	0x40007000

08003e28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e36:	d130      	bne.n	8003e9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e38:	4b23      	ldr	r3, [pc, #140]	; (8003ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e44:	d038      	beq.n	8003eb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e46:	4b20      	ldr	r3, [pc, #128]	; (8003ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e4e:	4a1e      	ldr	r2, [pc, #120]	; (8003ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e56:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2232      	movs	r2, #50	; 0x32
 8003e5c:	fb02 f303 	mul.w	r3, r2, r3
 8003e60:	4a1b      	ldr	r2, [pc, #108]	; (8003ed0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	0c9b      	lsrs	r3, r3, #18
 8003e68:	3301      	adds	r3, #1
 8003e6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e6c:	e002      	b.n	8003e74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e74:	4b14      	ldr	r3, [pc, #80]	; (8003ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e80:	d102      	bne.n	8003e88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1f2      	bne.n	8003e6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e88:	4b0f      	ldr	r3, [pc, #60]	; (8003ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e94:	d110      	bne.n	8003eb8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e00f      	b.n	8003eba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea6:	d007      	beq.n	8003eb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ea8:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003eb0:	4a05      	ldr	r2, [pc, #20]	; (8003ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eb6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	40007000 	.word	0x40007000
 8003ecc:	20000068 	.word	0x20000068
 8003ed0:	431bde83 	.word	0x431bde83

08003ed4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003ed8:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	4a04      	ldr	r2, [pc, #16]	; (8003ef0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ee2:	6053      	str	r3, [r2, #4]
}
 8003ee4:	bf00      	nop
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40007000 	.word	0x40007000

08003ef4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003efc:	f7fe fafc 	bl	80024f8 <HAL_GetTick>
 8003f00:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e063      	b.n	8003fd4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10b      	bne.n	8003f30 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7fd faef 	bl	8001504 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003f26:	f241 3188 	movw	r1, #5000	; 0x1388
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f858 	bl	8003fe0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	021a      	lsls	r2, r3, #8
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	2120      	movs	r1, #32
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f850 	bl	8003ffc <QSPI_WaitFlagStateUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003f60:	7afb      	ldrb	r3, [r7, #11]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d131      	bne.n	8003fca <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003f70:	f023 0310 	bic.w	r3, r3, #16
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6852      	ldr	r2, [r2, #4]
 8003f78:	0611      	lsls	r1, r2, #24
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	68d2      	ldr	r2, [r2, #12]
 8003f7e:	4311      	orrs	r1, r2
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	430b      	orrs	r3, r1
 8003f86:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	4b13      	ldr	r3, [pc, #76]	; (8003fdc <HAL_QSPI_Init+0xe8>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6912      	ldr	r2, [r2, #16]
 8003f96:	0411      	lsls	r1, r2, #16
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6952      	ldr	r2, [r2, #20]
 8003f9c:	4311      	orrs	r1, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6992      	ldr	r2, [r2, #24]
 8003fa2:	4311      	orrs	r1, r2
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003fd2:	7afb      	ldrb	r3, [r7, #11]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	ffe0f8fe 	.word	0xffe0f8fe

08003fe0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800400c:	e01a      	b.n	8004044 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004014:	d016      	beq.n	8004044 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004016:	f7fe fa6f 	bl	80024f8 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	429a      	cmp	r2, r3
 8004024:	d302      	bcc.n	800402c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10b      	bne.n	8004044 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2204      	movs	r2, #4
 8004030:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004038:	f043 0201 	orr.w	r2, r3, #1
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e00e      	b.n	8004062 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	bf14      	ite	ne
 8004052:	2301      	movne	r3, #1
 8004054:	2300      	moveq	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	79fb      	ldrb	r3, [r7, #7]
 800405c:	429a      	cmp	r2, r3
 800405e:	d1d6      	bne.n	800400e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e3ca      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800407e:	4b97      	ldr	r3, [pc, #604]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 030c 	and.w	r3, r3, #12
 8004086:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004088:	4b94      	ldr	r3, [pc, #592]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 80e4 	beq.w	8004268 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d007      	beq.n	80040b6 <HAL_RCC_OscConfig+0x4a>
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	2b0c      	cmp	r3, #12
 80040aa:	f040 808b 	bne.w	80041c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	f040 8087 	bne.w	80041c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040b6:	4b89      	ldr	r3, [pc, #548]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_RCC_OscConfig+0x62>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e3a2      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1a      	ldr	r2, [r3, #32]
 80040d2:	4b82      	ldr	r3, [pc, #520]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d004      	beq.n	80040e8 <HAL_RCC_OscConfig+0x7c>
 80040de:	4b7f      	ldr	r3, [pc, #508]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e6:	e005      	b.n	80040f4 <HAL_RCC_OscConfig+0x88>
 80040e8:	4b7c      	ldr	r3, [pc, #496]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 80040ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ee:	091b      	lsrs	r3, r3, #4
 80040f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d223      	bcs.n	8004140 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fd55 	bl	8004bac <RCC_SetFlashLatencyFromMSIRange>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e383      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800410c:	4b73      	ldr	r3, [pc, #460]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a72      	ldr	r2, [pc, #456]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 8004112:	f043 0308 	orr.w	r3, r3, #8
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	4b70      	ldr	r3, [pc, #448]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	496d      	ldr	r1, [pc, #436]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800412a:	4b6c      	ldr	r3, [pc, #432]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	021b      	lsls	r3, r3, #8
 8004138:	4968      	ldr	r1, [pc, #416]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 800413a:	4313      	orrs	r3, r2
 800413c:	604b      	str	r3, [r1, #4]
 800413e:	e025      	b.n	800418c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004140:	4b66      	ldr	r3, [pc, #408]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a65      	ldr	r2, [pc, #404]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 8004146:	f043 0308 	orr.w	r3, r3, #8
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	4b63      	ldr	r3, [pc, #396]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	4960      	ldr	r1, [pc, #384]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800415e:	4b5f      	ldr	r3, [pc, #380]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	021b      	lsls	r3, r3, #8
 800416c:	495b      	ldr	r1, [pc, #364]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 800416e:	4313      	orrs	r3, r2
 8004170:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d109      	bne.n	800418c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fd15 	bl	8004bac <RCC_SetFlashLatencyFromMSIRange>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e343      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800418c:	f000 fc4a 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 8004190:	4602      	mov	r2, r0
 8004192:	4b52      	ldr	r3, [pc, #328]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	091b      	lsrs	r3, r3, #4
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	4950      	ldr	r1, [pc, #320]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 800419e:	5ccb      	ldrb	r3, [r1, r3]
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	fa22 f303 	lsr.w	r3, r2, r3
 80041a8:	4a4e      	ldr	r2, [pc, #312]	; (80042e4 <HAL_RCC_OscConfig+0x278>)
 80041aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041ac:	4b4e      	ldr	r3, [pc, #312]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe f951 	bl	8002458 <HAL_InitTick>
 80041b6:	4603      	mov	r3, r0
 80041b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d052      	beq.n	8004266 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	e327      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d032      	beq.n	8004232 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041cc:	4b43      	ldr	r3, [pc, #268]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a42      	ldr	r2, [pc, #264]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 80041d2:	f043 0301 	orr.w	r3, r3, #1
 80041d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041d8:	f7fe f98e 	bl	80024f8 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041e0:	f7fe f98a 	bl	80024f8 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e310      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041f2:	4b3a      	ldr	r3, [pc, #232]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041fe:	4b37      	ldr	r3, [pc, #220]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a36      	ldr	r2, [pc, #216]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 8004204:	f043 0308 	orr.w	r3, r3, #8
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	4b34      	ldr	r3, [pc, #208]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	4931      	ldr	r1, [pc, #196]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 8004218:	4313      	orrs	r3, r2
 800421a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800421c:	4b2f      	ldr	r3, [pc, #188]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	021b      	lsls	r3, r3, #8
 800422a:	492c      	ldr	r1, [pc, #176]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 800422c:	4313      	orrs	r3, r2
 800422e:	604b      	str	r3, [r1, #4]
 8004230:	e01a      	b.n	8004268 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004232:	4b2a      	ldr	r3, [pc, #168]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a29      	ldr	r2, [pc, #164]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 8004238:	f023 0301 	bic.w	r3, r3, #1
 800423c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800423e:	f7fe f95b 	bl	80024f8 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004246:	f7fe f957 	bl	80024f8 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e2dd      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004258:	4b20      	ldr	r3, [pc, #128]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f0      	bne.n	8004246 <HAL_RCC_OscConfig+0x1da>
 8004264:	e000      	b.n	8004268 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004266:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d074      	beq.n	800435e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	2b08      	cmp	r3, #8
 8004278:	d005      	beq.n	8004286 <HAL_RCC_OscConfig+0x21a>
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	2b0c      	cmp	r3, #12
 800427e:	d10e      	bne.n	800429e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2b03      	cmp	r3, #3
 8004284:	d10b      	bne.n	800429e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004286:	4b15      	ldr	r3, [pc, #84]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d064      	beq.n	800435c <HAL_RCC_OscConfig+0x2f0>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d160      	bne.n	800435c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e2ba      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a6:	d106      	bne.n	80042b6 <HAL_RCC_OscConfig+0x24a>
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a0b      	ldr	r2, [pc, #44]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 80042ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	e026      	b.n	8004304 <HAL_RCC_OscConfig+0x298>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042be:	d115      	bne.n	80042ec <HAL_RCC_OscConfig+0x280>
 80042c0:	4b06      	ldr	r3, [pc, #24]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a05      	ldr	r2, [pc, #20]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 80042c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a02      	ldr	r2, [pc, #8]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 80042d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	e014      	b.n	8004304 <HAL_RCC_OscConfig+0x298>
 80042da:	bf00      	nop
 80042dc:	40021000 	.word	0x40021000
 80042e0:	0800a220 	.word	0x0800a220
 80042e4:	20000068 	.word	0x20000068
 80042e8:	20000094 	.word	0x20000094
 80042ec:	4ba0      	ldr	r3, [pc, #640]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a9f      	ldr	r2, [pc, #636]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 80042f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	4b9d      	ldr	r3, [pc, #628]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a9c      	ldr	r2, [pc, #624]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 80042fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d013      	beq.n	8004334 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430c:	f7fe f8f4 	bl	80024f8 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004314:	f7fe f8f0 	bl	80024f8 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	; 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e276      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004326:	4b92      	ldr	r3, [pc, #584]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCC_OscConfig+0x2a8>
 8004332:	e014      	b.n	800435e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fe f8e0 	bl	80024f8 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800433c:	f7fe f8dc 	bl	80024f8 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b64      	cmp	r3, #100	; 0x64
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e262      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800434e:	4b88      	ldr	r3, [pc, #544]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f0      	bne.n	800433c <HAL_RCC_OscConfig+0x2d0>
 800435a:	e000      	b.n	800435e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800435c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d060      	beq.n	800442c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	2b04      	cmp	r3, #4
 800436e:	d005      	beq.n	800437c <HAL_RCC_OscConfig+0x310>
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	2b0c      	cmp	r3, #12
 8004374:	d119      	bne.n	80043aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d116      	bne.n	80043aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800437c:	4b7c      	ldr	r3, [pc, #496]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004384:	2b00      	cmp	r3, #0
 8004386:	d005      	beq.n	8004394 <HAL_RCC_OscConfig+0x328>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e23f      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004394:	4b76      	ldr	r3, [pc, #472]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	061b      	lsls	r3, r3, #24
 80043a2:	4973      	ldr	r1, [pc, #460]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043a8:	e040      	b.n	800442c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d023      	beq.n	80043fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b2:	4b6f      	ldr	r3, [pc, #444]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a6e      	ldr	r2, [pc, #440]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 80043b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043be:	f7fe f89b 	bl	80024f8 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c6:	f7fe f897 	bl	80024f8 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e21d      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043d8:	4b65      	ldr	r3, [pc, #404]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0f0      	beq.n	80043c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e4:	4b62      	ldr	r3, [pc, #392]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	061b      	lsls	r3, r3, #24
 80043f2:	495f      	ldr	r1, [pc, #380]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	604b      	str	r3, [r1, #4]
 80043f8:	e018      	b.n	800442c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043fa:	4b5d      	ldr	r3, [pc, #372]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a5c      	ldr	r2, [pc, #368]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 8004400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004406:	f7fe f877 	bl	80024f8 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440e:	f7fe f873 	bl	80024f8 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e1f9      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004420:	4b53      	ldr	r3, [pc, #332]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1f0      	bne.n	800440e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	2b00      	cmp	r3, #0
 8004436:	d03c      	beq.n	80044b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d01c      	beq.n	800447a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004440:	4b4b      	ldr	r3, [pc, #300]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 8004442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004446:	4a4a      	ldr	r2, [pc, #296]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 8004448:	f043 0301 	orr.w	r3, r3, #1
 800444c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004450:	f7fe f852 	bl	80024f8 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004458:	f7fe f84e 	bl	80024f8 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e1d4      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800446a:	4b41      	ldr	r3, [pc, #260]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 800446c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0ef      	beq.n	8004458 <HAL_RCC_OscConfig+0x3ec>
 8004478:	e01b      	b.n	80044b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800447a:	4b3d      	ldr	r3, [pc, #244]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 800447c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004480:	4a3b      	ldr	r2, [pc, #236]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 8004482:	f023 0301 	bic.w	r3, r3, #1
 8004486:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448a:	f7fe f835 	bl	80024f8 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004492:	f7fe f831 	bl	80024f8 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e1b7      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044a4:	4b32      	ldr	r3, [pc, #200]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 80044a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1ef      	bne.n	8004492 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 80a6 	beq.w	800460c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044c0:	2300      	movs	r3, #0
 80044c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80044c4:	4b2a      	ldr	r3, [pc, #168]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 80044c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10d      	bne.n	80044ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044d0:	4b27      	ldr	r3, [pc, #156]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 80044d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d4:	4a26      	ldr	r2, [pc, #152]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 80044d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044da:	6593      	str	r3, [r2, #88]	; 0x58
 80044dc:	4b24      	ldr	r3, [pc, #144]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 80044de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e4:	60bb      	str	r3, [r7, #8]
 80044e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e8:	2301      	movs	r3, #1
 80044ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ec:	4b21      	ldr	r3, [pc, #132]	; (8004574 <HAL_RCC_OscConfig+0x508>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d118      	bne.n	800452a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044f8:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <HAL_RCC_OscConfig+0x508>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <HAL_RCC_OscConfig+0x508>)
 80044fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004502:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004504:	f7fd fff8 	bl	80024f8 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450c:	f7fd fff4 	bl	80024f8 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e17a      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800451e:	4b15      	ldr	r3, [pc, #84]	; (8004574 <HAL_RCC_OscConfig+0x508>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d108      	bne.n	8004544 <HAL_RCC_OscConfig+0x4d8>
 8004532:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	4a0d      	ldr	r2, [pc, #52]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004542:	e029      	b.n	8004598 <HAL_RCC_OscConfig+0x52c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	2b05      	cmp	r3, #5
 800454a:	d115      	bne.n	8004578 <HAL_RCC_OscConfig+0x50c>
 800454c:	4b08      	ldr	r3, [pc, #32]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 800454e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004552:	4a07      	ldr	r2, [pc, #28]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 8004554:	f043 0304 	orr.w	r3, r3, #4
 8004558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800455c:	4b04      	ldr	r3, [pc, #16]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 800455e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004562:	4a03      	ldr	r2, [pc, #12]	; (8004570 <HAL_RCC_OscConfig+0x504>)
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800456c:	e014      	b.n	8004598 <HAL_RCC_OscConfig+0x52c>
 800456e:	bf00      	nop
 8004570:	40021000 	.word	0x40021000
 8004574:	40007000 	.word	0x40007000
 8004578:	4b9c      	ldr	r3, [pc, #624]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457e:	4a9b      	ldr	r2, [pc, #620]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004588:	4b98      	ldr	r3, [pc, #608]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 800458a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458e:	4a97      	ldr	r2, [pc, #604]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 8004590:	f023 0304 	bic.w	r3, r3, #4
 8004594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d016      	beq.n	80045ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a0:	f7fd ffaa 	bl	80024f8 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a6:	e00a      	b.n	80045be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a8:	f7fd ffa6 	bl	80024f8 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e12a      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045be:	4b8b      	ldr	r3, [pc, #556]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 80045c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0ed      	beq.n	80045a8 <HAL_RCC_OscConfig+0x53c>
 80045cc:	e015      	b.n	80045fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ce:	f7fd ff93 	bl	80024f8 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045d4:	e00a      	b.n	80045ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d6:	f7fd ff8f 	bl	80024f8 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e113      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045ec:	4b7f      	ldr	r3, [pc, #508]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1ed      	bne.n	80045d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045fa:	7ffb      	ldrb	r3, [r7, #31]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d105      	bne.n	800460c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004600:	4b7a      	ldr	r3, [pc, #488]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 8004602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004604:	4a79      	ldr	r2, [pc, #484]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 8004606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800460a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80fe 	beq.w	8004812 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461a:	2b02      	cmp	r3, #2
 800461c:	f040 80d0 	bne.w	80047c0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004620:	4b72      	ldr	r3, [pc, #456]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f003 0203 	and.w	r2, r3, #3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	429a      	cmp	r2, r3
 8004632:	d130      	bne.n	8004696 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	3b01      	subs	r3, #1
 8004640:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004642:	429a      	cmp	r2, r3
 8004644:	d127      	bne.n	8004696 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004650:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004652:	429a      	cmp	r2, r3
 8004654:	d11f      	bne.n	8004696 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004660:	2a07      	cmp	r2, #7
 8004662:	bf14      	ite	ne
 8004664:	2201      	movne	r2, #1
 8004666:	2200      	moveq	r2, #0
 8004668:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800466a:	4293      	cmp	r3, r2
 800466c:	d113      	bne.n	8004696 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004678:	085b      	lsrs	r3, r3, #1
 800467a:	3b01      	subs	r3, #1
 800467c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800467e:	429a      	cmp	r2, r3
 8004680:	d109      	bne.n	8004696 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	085b      	lsrs	r3, r3, #1
 800468e:	3b01      	subs	r3, #1
 8004690:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004692:	429a      	cmp	r2, r3
 8004694:	d06e      	beq.n	8004774 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	2b0c      	cmp	r3, #12
 800469a:	d069      	beq.n	8004770 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800469c:	4b53      	ldr	r3, [pc, #332]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d105      	bne.n	80046b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80046a8:	4b50      	ldr	r3, [pc, #320]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0ad      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046b8:	4b4c      	ldr	r3, [pc, #304]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a4b      	ldr	r2, [pc, #300]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 80046be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046c4:	f7fd ff18 	bl	80024f8 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046cc:	f7fd ff14 	bl	80024f8 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e09a      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046de:	4b43      	ldr	r3, [pc, #268]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f0      	bne.n	80046cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ea:	4b40      	ldr	r3, [pc, #256]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	4b40      	ldr	r3, [pc, #256]	; (80047f0 <HAL_RCC_OscConfig+0x784>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046fa:	3a01      	subs	r2, #1
 80046fc:	0112      	lsls	r2, r2, #4
 80046fe:	4311      	orrs	r1, r2
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004704:	0212      	lsls	r2, r2, #8
 8004706:	4311      	orrs	r1, r2
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800470c:	0852      	lsrs	r2, r2, #1
 800470e:	3a01      	subs	r2, #1
 8004710:	0552      	lsls	r2, r2, #21
 8004712:	4311      	orrs	r1, r2
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004718:	0852      	lsrs	r2, r2, #1
 800471a:	3a01      	subs	r2, #1
 800471c:	0652      	lsls	r2, r2, #25
 800471e:	4311      	orrs	r1, r2
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004724:	0912      	lsrs	r2, r2, #4
 8004726:	0452      	lsls	r2, r2, #17
 8004728:	430a      	orrs	r2, r1
 800472a:	4930      	ldr	r1, [pc, #192]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 800472c:	4313      	orrs	r3, r2
 800472e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004730:	4b2e      	ldr	r3, [pc, #184]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a2d      	ldr	r2, [pc, #180]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 8004736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800473a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800473c:	4b2b      	ldr	r3, [pc, #172]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4a2a      	ldr	r2, [pc, #168]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 8004742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004746:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004748:	f7fd fed6 	bl	80024f8 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004750:	f7fd fed2 	bl	80024f8 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e058      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004762:	4b22      	ldr	r3, [pc, #136]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800476e:	e050      	b.n	8004812 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e04f      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004774:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d148      	bne.n	8004812 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004780:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a19      	ldr	r2, [pc, #100]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 8004786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800478a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800478c:	4b17      	ldr	r3, [pc, #92]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4a16      	ldr	r2, [pc, #88]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 8004792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004796:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004798:	f7fd feae 	bl	80024f8 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fd feaa 	bl	80024f8 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e030      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047b2:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0f0      	beq.n	80047a0 <HAL_RCC_OscConfig+0x734>
 80047be:	e028      	b.n	8004812 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	2b0c      	cmp	r3, #12
 80047c4:	d023      	beq.n	800480e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a08      	ldr	r2, [pc, #32]	; (80047ec <HAL_RCC_OscConfig+0x780>)
 80047cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d2:	f7fd fe91 	bl	80024f8 <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047d8:	e00c      	b.n	80047f4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047da:	f7fd fe8d 	bl	80024f8 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d905      	bls.n	80047f4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e013      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
 80047ec:	40021000 	.word	0x40021000
 80047f0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047f4:	4b09      	ldr	r3, [pc, #36]	; (800481c <HAL_RCC_OscConfig+0x7b0>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1ec      	bne.n	80047da <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004800:	4b06      	ldr	r3, [pc, #24]	; (800481c <HAL_RCC_OscConfig+0x7b0>)
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	4905      	ldr	r1, [pc, #20]	; (800481c <HAL_RCC_OscConfig+0x7b0>)
 8004806:	4b06      	ldr	r3, [pc, #24]	; (8004820 <HAL_RCC_OscConfig+0x7b4>)
 8004808:	4013      	ands	r3, r2
 800480a:	60cb      	str	r3, [r1, #12]
 800480c:	e001      	b.n	8004812 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3720      	adds	r7, #32
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40021000 	.word	0x40021000
 8004820:	feeefffc 	.word	0xfeeefffc

08004824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0e7      	b.n	8004a08 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004838:	4b75      	ldr	r3, [pc, #468]	; (8004a10 <HAL_RCC_ClockConfig+0x1ec>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d910      	bls.n	8004868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004846:	4b72      	ldr	r3, [pc, #456]	; (8004a10 <HAL_RCC_ClockConfig+0x1ec>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 0207 	bic.w	r2, r3, #7
 800484e:	4970      	ldr	r1, [pc, #448]	; (8004a10 <HAL_RCC_ClockConfig+0x1ec>)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	4313      	orrs	r3, r2
 8004854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b6e      	ldr	r3, [pc, #440]	; (8004a10 <HAL_RCC_ClockConfig+0x1ec>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0cf      	b.n	8004a08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d010      	beq.n	8004896 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	4b66      	ldr	r3, [pc, #408]	; (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004880:	429a      	cmp	r2, r3
 8004882:	d908      	bls.n	8004896 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004884:	4b63      	ldr	r3, [pc, #396]	; (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	4960      	ldr	r1, [pc, #384]	; (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 8004892:	4313      	orrs	r3, r2
 8004894:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d04c      	beq.n	800493c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d107      	bne.n	80048ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048aa:	4b5a      	ldr	r3, [pc, #360]	; (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d121      	bne.n	80048fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e0a6      	b.n	8004a08 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048c2:	4b54      	ldr	r3, [pc, #336]	; (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d115      	bne.n	80048fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e09a      	b.n	8004a08 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d107      	bne.n	80048ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048da:	4b4e      	ldr	r3, [pc, #312]	; (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e08e      	b.n	8004a08 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048ea:	4b4a      	ldr	r3, [pc, #296]	; (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e086      	b.n	8004a08 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048fa:	4b46      	ldr	r3, [pc, #280]	; (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f023 0203 	bic.w	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	4943      	ldr	r1, [pc, #268]	; (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 8004908:	4313      	orrs	r3, r2
 800490a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800490c:	f7fd fdf4 	bl	80024f8 <HAL_GetTick>
 8004910:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004912:	e00a      	b.n	800492a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004914:	f7fd fdf0 	bl	80024f8 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004922:	4293      	cmp	r3, r2
 8004924:	d901      	bls.n	800492a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e06e      	b.n	8004a08 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492a:	4b3a      	ldr	r3, [pc, #232]	; (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 020c 	and.w	r2, r3, #12
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	429a      	cmp	r2, r3
 800493a:	d1eb      	bne.n	8004914 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d010      	beq.n	800496a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	4b31      	ldr	r3, [pc, #196]	; (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004954:	429a      	cmp	r2, r3
 8004956:	d208      	bcs.n	800496a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004958:	4b2e      	ldr	r3, [pc, #184]	; (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	492b      	ldr	r1, [pc, #172]	; (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 8004966:	4313      	orrs	r3, r2
 8004968:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800496a:	4b29      	ldr	r3, [pc, #164]	; (8004a10 <HAL_RCC_ClockConfig+0x1ec>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d210      	bcs.n	800499a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004978:	4b25      	ldr	r3, [pc, #148]	; (8004a10 <HAL_RCC_ClockConfig+0x1ec>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f023 0207 	bic.w	r2, r3, #7
 8004980:	4923      	ldr	r1, [pc, #140]	; (8004a10 <HAL_RCC_ClockConfig+0x1ec>)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	4313      	orrs	r3, r2
 8004986:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004988:	4b21      	ldr	r3, [pc, #132]	; (8004a10 <HAL_RCC_ClockConfig+0x1ec>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d001      	beq.n	800499a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e036      	b.n	8004a08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049a6:	4b1b      	ldr	r3, [pc, #108]	; (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	4918      	ldr	r1, [pc, #96]	; (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d009      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049c4:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	4910      	ldr	r1, [pc, #64]	; (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049d8:	f000 f824 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 80049dc:	4602      	mov	r2, r0
 80049de:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	091b      	lsrs	r3, r3, #4
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	490b      	ldr	r1, [pc, #44]	; (8004a18 <HAL_RCC_ClockConfig+0x1f4>)
 80049ea:	5ccb      	ldrb	r3, [r1, r3]
 80049ec:	f003 031f 	and.w	r3, r3, #31
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
 80049f4:	4a09      	ldr	r2, [pc, #36]	; (8004a1c <HAL_RCC_ClockConfig+0x1f8>)
 80049f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049f8:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <HAL_RCC_ClockConfig+0x1fc>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fd fd2b 	bl	8002458 <HAL_InitTick>
 8004a02:	4603      	mov	r3, r0
 8004a04:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a06:	7afb      	ldrb	r3, [r7, #11]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40022000 	.word	0x40022000
 8004a14:	40021000 	.word	0x40021000
 8004a18:	0800a220 	.word	0x0800a220
 8004a1c:	20000068 	.word	0x20000068
 8004a20:	20000094 	.word	0x20000094

08004a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b089      	sub	sp, #36	; 0x24
 8004a28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61fb      	str	r3, [r7, #28]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a32:	4b3e      	ldr	r3, [pc, #248]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 030c 	and.w	r3, r3, #12
 8004a3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a3c:	4b3b      	ldr	r3, [pc, #236]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0303 	and.w	r3, r3, #3
 8004a44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d005      	beq.n	8004a58 <HAL_RCC_GetSysClockFreq+0x34>
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	2b0c      	cmp	r3, #12
 8004a50:	d121      	bne.n	8004a96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d11e      	bne.n	8004a96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a58:	4b34      	ldr	r3, [pc, #208]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d107      	bne.n	8004a74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a64:	4b31      	ldr	r3, [pc, #196]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a6a:	0a1b      	lsrs	r3, r3, #8
 8004a6c:	f003 030f 	and.w	r3, r3, #15
 8004a70:	61fb      	str	r3, [r7, #28]
 8004a72:	e005      	b.n	8004a80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a74:	4b2d      	ldr	r3, [pc, #180]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	091b      	lsrs	r3, r3, #4
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a80:	4a2b      	ldr	r2, [pc, #172]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10d      	bne.n	8004aac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a94:	e00a      	b.n	8004aac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d102      	bne.n	8004aa2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a9c:	4b25      	ldr	r3, [pc, #148]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a9e:	61bb      	str	r3, [r7, #24]
 8004aa0:	e004      	b.n	8004aac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d101      	bne.n	8004aac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004aa8:	4b23      	ldr	r3, [pc, #140]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x114>)
 8004aaa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	2b0c      	cmp	r3, #12
 8004ab0:	d134      	bne.n	8004b1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ab2:	4b1e      	ldr	r3, [pc, #120]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d003      	beq.n	8004aca <HAL_RCC_GetSysClockFreq+0xa6>
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d003      	beq.n	8004ad0 <HAL_RCC_GetSysClockFreq+0xac>
 8004ac8:	e005      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004aca:	4b1a      	ldr	r3, [pc, #104]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x110>)
 8004acc:	617b      	str	r3, [r7, #20]
      break;
 8004ace:	e005      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ad0:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ad2:	617b      	str	r3, [r7, #20]
      break;
 8004ad4:	e002      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	617b      	str	r3, [r7, #20]
      break;
 8004ada:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004adc:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	091b      	lsrs	r3, r3, #4
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004aea:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	0a1b      	lsrs	r3, r3, #8
 8004af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	fb03 f202 	mul.w	r2, r3, r2
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b02:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	0e5b      	lsrs	r3, r3, #25
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b1c:	69bb      	ldr	r3, [r7, #24]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3724      	adds	r7, #36	; 0x24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	0800a238 	.word	0x0800a238
 8004b34:	00f42400 	.word	0x00f42400
 8004b38:	007a1200 	.word	0x007a1200

08004b3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b40:	4b03      	ldr	r3, [pc, #12]	; (8004b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b42:	681b      	ldr	r3, [r3, #0]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	20000068 	.word	0x20000068

08004b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b58:	f7ff fff0 	bl	8004b3c <HAL_RCC_GetHCLKFreq>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	0a1b      	lsrs	r3, r3, #8
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	4904      	ldr	r1, [pc, #16]	; (8004b7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b6a:	5ccb      	ldrb	r3, [r1, r3]
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	0800a230 	.word	0x0800a230

08004b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b84:	f7ff ffda 	bl	8004b3c <HAL_RCC_GetHCLKFreq>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	0adb      	lsrs	r3, r3, #11
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	4904      	ldr	r1, [pc, #16]	; (8004ba8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b96:	5ccb      	ldrb	r3, [r1, r3]
 8004b98:	f003 031f 	and.w	r3, r3, #31
 8004b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	40021000 	.word	0x40021000
 8004ba8:	0800a230 	.word	0x0800a230

08004bac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004bb8:	4b2a      	ldr	r3, [pc, #168]	; (8004c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004bc4:	f7ff f922 	bl	8003e0c <HAL_PWREx_GetVoltageRange>
 8004bc8:	6178      	str	r0, [r7, #20]
 8004bca:	e014      	b.n	8004bf6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bcc:	4b25      	ldr	r3, [pc, #148]	; (8004c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd0:	4a24      	ldr	r2, [pc, #144]	; (8004c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	6593      	str	r3, [r2, #88]	; 0x58
 8004bd8:	4b22      	ldr	r3, [pc, #136]	; (8004c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be0:	60fb      	str	r3, [r7, #12]
 8004be2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004be4:	f7ff f912 	bl	8003e0c <HAL_PWREx_GetVoltageRange>
 8004be8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004bea:	4b1e      	ldr	r3, [pc, #120]	; (8004c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bee:	4a1d      	ldr	r2, [pc, #116]	; (8004c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bf4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bfc:	d10b      	bne.n	8004c16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b80      	cmp	r3, #128	; 0x80
 8004c02:	d919      	bls.n	8004c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2ba0      	cmp	r3, #160	; 0xa0
 8004c08:	d902      	bls.n	8004c10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	e013      	b.n	8004c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c10:	2301      	movs	r3, #1
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	e010      	b.n	8004c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b80      	cmp	r3, #128	; 0x80
 8004c1a:	d902      	bls.n	8004c22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	e00a      	b.n	8004c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b80      	cmp	r3, #128	; 0x80
 8004c26:	d102      	bne.n	8004c2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c28:	2302      	movs	r3, #2
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	e004      	b.n	8004c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b70      	cmp	r3, #112	; 0x70
 8004c32:	d101      	bne.n	8004c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c34:	2301      	movs	r3, #1
 8004c36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c38:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f023 0207 	bic.w	r2, r3, #7
 8004c40:	4909      	ldr	r1, [pc, #36]	; (8004c68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c48:	4b07      	ldr	r3, [pc, #28]	; (8004c68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d001      	beq.n	8004c5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40021000 	.word	0x40021000
 8004c68:	40022000 	.word	0x40022000

08004c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c74:	2300      	movs	r3, #0
 8004c76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c78:	2300      	movs	r3, #0
 8004c7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d041      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c90:	d02a      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004c92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c96:	d824      	bhi.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c9c:	d008      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ca2:	d81e      	bhi.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cac:	d010      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004cae:	e018      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cb0:	4b86      	ldr	r3, [pc, #536]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4a85      	ldr	r2, [pc, #532]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cbc:	e015      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 facb 	bl	8005260 <RCCEx_PLLSAI1_Config>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cce:	e00c      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3320      	adds	r3, #32
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fbb6 	bl	8005448 <RCCEx_PLLSAI2_Config>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ce0:	e003      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	74fb      	strb	r3, [r7, #19]
      break;
 8004ce6:	e000      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cea:	7cfb      	ldrb	r3, [r7, #19]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10b      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cf0:	4b76      	ldr	r3, [pc, #472]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cfe:	4973      	ldr	r1, [pc, #460]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d06:	e001      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d08:	7cfb      	ldrb	r3, [r7, #19]
 8004d0a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d041      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d20:	d02a      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004d22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d26:	d824      	bhi.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d2c:	d008      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d32:	d81e      	bhi.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d3c:	d010      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d3e:	e018      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d40:	4b62      	ldr	r3, [pc, #392]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	4a61      	ldr	r2, [pc, #388]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d4a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d4c:	e015      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3304      	adds	r3, #4
 8004d52:	2100      	movs	r1, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fa83 	bl	8005260 <RCCEx_PLLSAI1_Config>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d5e:	e00c      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3320      	adds	r3, #32
 8004d64:	2100      	movs	r1, #0
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fb6e 	bl	8005448 <RCCEx_PLLSAI2_Config>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d70:	e003      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	74fb      	strb	r3, [r7, #19]
      break;
 8004d76:	e000      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d7a:	7cfb      	ldrb	r3, [r7, #19]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10b      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d80:	4b52      	ldr	r3, [pc, #328]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d86:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d8e:	494f      	ldr	r1, [pc, #316]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d96:	e001      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d98:	7cfb      	ldrb	r3, [r7, #19]
 8004d9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 80a0 	beq.w	8004eea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004daa:	2300      	movs	r3, #0
 8004dac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004dae:	4b47      	ldr	r3, [pc, #284]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00d      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dc4:	4b41      	ldr	r3, [pc, #260]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc8:	4a40      	ldr	r2, [pc, #256]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dce:	6593      	str	r3, [r2, #88]	; 0x58
 8004dd0:	4b3e      	ldr	r3, [pc, #248]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	60bb      	str	r3, [r7, #8]
 8004dda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004de0:	4b3b      	ldr	r3, [pc, #236]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a3a      	ldr	r2, [pc, #232]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dec:	f7fd fb84 	bl	80024f8 <HAL_GetTick>
 8004df0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004df2:	e009      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df4:	f7fd fb80 	bl	80024f8 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d902      	bls.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	74fb      	strb	r3, [r7, #19]
        break;
 8004e06:	e005      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e08:	4b31      	ldr	r3, [pc, #196]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0ef      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004e14:	7cfb      	ldrb	r3, [r7, #19]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d15c      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e1a:	4b2c      	ldr	r3, [pc, #176]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01f      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d019      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e38:	4b24      	ldr	r3, [pc, #144]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e44:	4b21      	ldr	r3, [pc, #132]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4a:	4a20      	ldr	r2, [pc, #128]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e54:	4b1d      	ldr	r3, [pc, #116]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5a:	4a1c      	ldr	r2, [pc, #112]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e64:	4a19      	ldr	r2, [pc, #100]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d016      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e76:	f7fd fb3f 	bl	80024f8 <HAL_GetTick>
 8004e7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e7c:	e00b      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e7e:	f7fd fb3b 	bl	80024f8 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d902      	bls.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	74fb      	strb	r3, [r7, #19]
            break;
 8004e94:	e006      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e96:	4b0d      	ldr	r3, [pc, #52]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0ec      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004ea4:	7cfb      	ldrb	r3, [r7, #19]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10c      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eaa:	4b08      	ldr	r3, [pc, #32]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eba:	4904      	ldr	r1, [pc, #16]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ec2:	e009      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ec4:	7cfb      	ldrb	r3, [r7, #19]
 8004ec6:	74bb      	strb	r3, [r7, #18]
 8004ec8:	e006      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004eca:	bf00      	nop
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed4:	7cfb      	ldrb	r3, [r7, #19]
 8004ed6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ed8:	7c7b      	ldrb	r3, [r7, #17]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d105      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ede:	4b9e      	ldr	r3, [pc, #632]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee2:	4a9d      	ldr	r2, [pc, #628]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ef6:	4b98      	ldr	r3, [pc, #608]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efc:	f023 0203 	bic.w	r2, r3, #3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	4994      	ldr	r1, [pc, #592]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f18:	4b8f      	ldr	r3, [pc, #572]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1e:	f023 020c 	bic.w	r2, r3, #12
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f26:	498c      	ldr	r1, [pc, #560]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f3a:	4b87      	ldr	r3, [pc, #540]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	4983      	ldr	r1, [pc, #524]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f5c:	4b7e      	ldr	r3, [pc, #504]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6a:	497b      	ldr	r1, [pc, #492]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f7e:	4b76      	ldr	r3, [pc, #472]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8c:	4972      	ldr	r1, [pc, #456]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fa0:	4b6d      	ldr	r3, [pc, #436]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fae:	496a      	ldr	r1, [pc, #424]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fc2:	4b65      	ldr	r3, [pc, #404]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd0:	4961      	ldr	r1, [pc, #388]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fe4:	4b5c      	ldr	r3, [pc, #368]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff2:	4959      	ldr	r1, [pc, #356]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005006:	4b54      	ldr	r3, [pc, #336]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005014:	4950      	ldr	r1, [pc, #320]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005028:	4b4b      	ldr	r3, [pc, #300]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800502a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005036:	4948      	ldr	r1, [pc, #288]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800504a:	4b43      	ldr	r3, [pc, #268]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800504c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005050:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005058:	493f      	ldr	r1, [pc, #252]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d028      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800506c:	4b3a      	ldr	r3, [pc, #232]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005072:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800507a:	4937      	ldr	r1, [pc, #220]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005086:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800508a:	d106      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800508c:	4b32      	ldr	r3, [pc, #200]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4a31      	ldr	r2, [pc, #196]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005096:	60d3      	str	r3, [r2, #12]
 8005098:	e011      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800509e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050a2:	d10c      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3304      	adds	r3, #4
 80050a8:	2101      	movs	r1, #1
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 f8d8 	bl	8005260 <RCCEx_PLLSAI1_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80050b4:	7cfb      	ldrb	r3, [r7, #19]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80050ba:	7cfb      	ldrb	r3, [r7, #19]
 80050bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d028      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050ca:	4b23      	ldr	r3, [pc, #140]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d8:	491f      	ldr	r1, [pc, #124]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050e8:	d106      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050ea:	4b1b      	ldr	r3, [pc, #108]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	4a1a      	ldr	r2, [pc, #104]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050f4:	60d3      	str	r3, [r2, #12]
 80050f6:	e011      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005100:	d10c      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3304      	adds	r3, #4
 8005106:	2101      	movs	r1, #1
 8005108:	4618      	mov	r0, r3
 800510a:	f000 f8a9 	bl	8005260 <RCCEx_PLLSAI1_Config>
 800510e:	4603      	mov	r3, r0
 8005110:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005112:	7cfb      	ldrb	r3, [r7, #19]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005118:	7cfb      	ldrb	r3, [r7, #19]
 800511a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d02b      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005128:	4b0b      	ldr	r3, [pc, #44]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005136:	4908      	ldr	r1, [pc, #32]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005142:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005146:	d109      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005148:	4b03      	ldr	r3, [pc, #12]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4a02      	ldr	r2, [pc, #8]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800514e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005152:	60d3      	str	r3, [r2, #12]
 8005154:	e014      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005156:	bf00      	nop
 8005158:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005160:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005164:	d10c      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3304      	adds	r3, #4
 800516a:	2101      	movs	r1, #1
 800516c:	4618      	mov	r0, r3
 800516e:	f000 f877 	bl	8005260 <RCCEx_PLLSAI1_Config>
 8005172:	4603      	mov	r3, r0
 8005174:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005176:	7cfb      	ldrb	r3, [r7, #19]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800517c:	7cfb      	ldrb	r3, [r7, #19]
 800517e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d02f      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800518c:	4b2b      	ldr	r3, [pc, #172]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800518e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005192:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800519a:	4928      	ldr	r1, [pc, #160]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051aa:	d10d      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3304      	adds	r3, #4
 80051b0:	2102      	movs	r1, #2
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 f854 	bl	8005260 <RCCEx_PLLSAI1_Config>
 80051b8:	4603      	mov	r3, r0
 80051ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051bc:	7cfb      	ldrb	r3, [r7, #19]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d014      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80051c2:	7cfb      	ldrb	r3, [r7, #19]
 80051c4:	74bb      	strb	r3, [r7, #18]
 80051c6:	e011      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d0:	d10c      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3320      	adds	r3, #32
 80051d6:	2102      	movs	r1, #2
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 f935 	bl	8005448 <RCCEx_PLLSAI2_Config>
 80051de:	4603      	mov	r3, r0
 80051e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051e2:	7cfb      	ldrb	r3, [r7, #19]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80051e8:	7cfb      	ldrb	r3, [r7, #19]
 80051ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051f8:	4b10      	ldr	r3, [pc, #64]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005206:	490d      	ldr	r1, [pc, #52]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00b      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800521a:	4b08      	ldr	r3, [pc, #32]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800521c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005220:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800522a:	4904      	ldr	r1, [pc, #16]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800522c:	4313      	orrs	r3, r2
 800522e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005232:	7cbb      	ldrb	r3, [r7, #18]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40021000 	.word	0x40021000

08005240 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005244:	4b05      	ldr	r3, [pc, #20]	; (800525c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a04      	ldr	r2, [pc, #16]	; (800525c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800524a:	f043 0304 	orr.w	r3, r3, #4
 800524e:	6013      	str	r3, [r2, #0]
}
 8005250:	bf00      	nop
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40021000 	.word	0x40021000

08005260 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800526a:	2300      	movs	r3, #0
 800526c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800526e:	4b75      	ldr	r3, [pc, #468]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d018      	beq.n	80052ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800527a:	4b72      	ldr	r3, [pc, #456]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f003 0203 	and.w	r2, r3, #3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d10d      	bne.n	80052a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
       ||
 800528e:	2b00      	cmp	r3, #0
 8005290:	d009      	beq.n	80052a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005292:	4b6c      	ldr	r3, [pc, #432]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	091b      	lsrs	r3, r3, #4
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
       ||
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d047      	beq.n	8005336 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	73fb      	strb	r3, [r7, #15]
 80052aa:	e044      	b.n	8005336 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d018      	beq.n	80052e6 <RCCEx_PLLSAI1_Config+0x86>
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d825      	bhi.n	8005304 <RCCEx_PLLSAI1_Config+0xa4>
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d002      	beq.n	80052c2 <RCCEx_PLLSAI1_Config+0x62>
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d009      	beq.n	80052d4 <RCCEx_PLLSAI1_Config+0x74>
 80052c0:	e020      	b.n	8005304 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052c2:	4b60      	ldr	r3, [pc, #384]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d11d      	bne.n	800530a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052d2:	e01a      	b.n	800530a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052d4:	4b5b      	ldr	r3, [pc, #364]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d116      	bne.n	800530e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052e4:	e013      	b.n	800530e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052e6:	4b57      	ldr	r3, [pc, #348]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10f      	bne.n	8005312 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052f2:	4b54      	ldr	r3, [pc, #336]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d109      	bne.n	8005312 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005302:	e006      	b.n	8005312 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
      break;
 8005308:	e004      	b.n	8005314 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800530a:	bf00      	nop
 800530c:	e002      	b.n	8005314 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800530e:	bf00      	nop
 8005310:	e000      	b.n	8005314 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005312:	bf00      	nop
    }

    if(status == HAL_OK)
 8005314:	7bfb      	ldrb	r3, [r7, #15]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10d      	bne.n	8005336 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800531a:	4b4a      	ldr	r3, [pc, #296]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6819      	ldr	r1, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	3b01      	subs	r3, #1
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	430b      	orrs	r3, r1
 8005330:	4944      	ldr	r1, [pc, #272]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005332:	4313      	orrs	r3, r2
 8005334:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005336:	7bfb      	ldrb	r3, [r7, #15]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d17d      	bne.n	8005438 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800533c:	4b41      	ldr	r3, [pc, #260]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a40      	ldr	r2, [pc, #256]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005342:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005346:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005348:	f7fd f8d6 	bl	80024f8 <HAL_GetTick>
 800534c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800534e:	e009      	b.n	8005364 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005350:	f7fd f8d2 	bl	80024f8 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d902      	bls.n	8005364 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	73fb      	strb	r3, [r7, #15]
        break;
 8005362:	e005      	b.n	8005370 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005364:	4b37      	ldr	r3, [pc, #220]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1ef      	bne.n	8005350 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005370:	7bfb      	ldrb	r3, [r7, #15]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d160      	bne.n	8005438 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d111      	bne.n	80053a0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800537c:	4b31      	ldr	r3, [pc, #196]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6892      	ldr	r2, [r2, #8]
 800538c:	0211      	lsls	r1, r2, #8
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	68d2      	ldr	r2, [r2, #12]
 8005392:	0912      	lsrs	r2, r2, #4
 8005394:	0452      	lsls	r2, r2, #17
 8005396:	430a      	orrs	r2, r1
 8005398:	492a      	ldr	r1, [pc, #168]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800539a:	4313      	orrs	r3, r2
 800539c:	610b      	str	r3, [r1, #16]
 800539e:	e027      	b.n	80053f0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d112      	bne.n	80053cc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053a6:	4b27      	ldr	r3, [pc, #156]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80053ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	6892      	ldr	r2, [r2, #8]
 80053b6:	0211      	lsls	r1, r2, #8
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6912      	ldr	r2, [r2, #16]
 80053bc:	0852      	lsrs	r2, r2, #1
 80053be:	3a01      	subs	r2, #1
 80053c0:	0552      	lsls	r2, r2, #21
 80053c2:	430a      	orrs	r2, r1
 80053c4:	491f      	ldr	r1, [pc, #124]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	610b      	str	r3, [r1, #16]
 80053ca:	e011      	b.n	80053f0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053cc:	4b1d      	ldr	r3, [pc, #116]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80053d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6892      	ldr	r2, [r2, #8]
 80053dc:	0211      	lsls	r1, r2, #8
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6952      	ldr	r2, [r2, #20]
 80053e2:	0852      	lsrs	r2, r2, #1
 80053e4:	3a01      	subs	r2, #1
 80053e6:	0652      	lsls	r2, r2, #25
 80053e8:	430a      	orrs	r2, r1
 80053ea:	4916      	ldr	r1, [pc, #88]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053f0:	4b14      	ldr	r3, [pc, #80]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a13      	ldr	r2, [pc, #76]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fc:	f7fd f87c 	bl	80024f8 <HAL_GetTick>
 8005400:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005402:	e009      	b.n	8005418 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005404:	f7fd f878 	bl	80024f8 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d902      	bls.n	8005418 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	73fb      	strb	r3, [r7, #15]
          break;
 8005416:	e005      	b.n	8005424 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005418:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0ef      	beq.n	8005404 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800542a:	4b06      	ldr	r3, [pc, #24]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	4904      	ldr	r1, [pc, #16]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005434:	4313      	orrs	r3, r2
 8005436:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005438:	7bfb      	ldrb	r3, [r7, #15]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	40021000 	.word	0x40021000

08005448 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005456:	4b6a      	ldr	r3, [pc, #424]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d018      	beq.n	8005494 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005462:	4b67      	ldr	r3, [pc, #412]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f003 0203 	and.w	r2, r3, #3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d10d      	bne.n	800548e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
       ||
 8005476:	2b00      	cmp	r3, #0
 8005478:	d009      	beq.n	800548e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800547a:	4b61      	ldr	r3, [pc, #388]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	091b      	lsrs	r3, r3, #4
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
       ||
 800548a:	429a      	cmp	r2, r3
 800548c:	d047      	beq.n	800551e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	73fb      	strb	r3, [r7, #15]
 8005492:	e044      	b.n	800551e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b03      	cmp	r3, #3
 800549a:	d018      	beq.n	80054ce <RCCEx_PLLSAI2_Config+0x86>
 800549c:	2b03      	cmp	r3, #3
 800549e:	d825      	bhi.n	80054ec <RCCEx_PLLSAI2_Config+0xa4>
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d002      	beq.n	80054aa <RCCEx_PLLSAI2_Config+0x62>
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d009      	beq.n	80054bc <RCCEx_PLLSAI2_Config+0x74>
 80054a8:	e020      	b.n	80054ec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054aa:	4b55      	ldr	r3, [pc, #340]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d11d      	bne.n	80054f2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ba:	e01a      	b.n	80054f2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054bc:	4b50      	ldr	r3, [pc, #320]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d116      	bne.n	80054f6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054cc:	e013      	b.n	80054f6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054ce:	4b4c      	ldr	r3, [pc, #304]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10f      	bne.n	80054fa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054da:	4b49      	ldr	r3, [pc, #292]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d109      	bne.n	80054fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054ea:	e006      	b.n	80054fa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	73fb      	strb	r3, [r7, #15]
      break;
 80054f0:	e004      	b.n	80054fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054f2:	bf00      	nop
 80054f4:	e002      	b.n	80054fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054f6:	bf00      	nop
 80054f8:	e000      	b.n	80054fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10d      	bne.n	800551e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005502:	4b3f      	ldr	r3, [pc, #252]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6819      	ldr	r1, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	3b01      	subs	r3, #1
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	430b      	orrs	r3, r1
 8005518:	4939      	ldr	r1, [pc, #228]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 800551a:	4313      	orrs	r3, r2
 800551c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800551e:	7bfb      	ldrb	r3, [r7, #15]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d167      	bne.n	80055f4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005524:	4b36      	ldr	r3, [pc, #216]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a35      	ldr	r2, [pc, #212]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 800552a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800552e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005530:	f7fc ffe2 	bl	80024f8 <HAL_GetTick>
 8005534:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005536:	e009      	b.n	800554c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005538:	f7fc ffde 	bl	80024f8 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d902      	bls.n	800554c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	73fb      	strb	r3, [r7, #15]
        break;
 800554a:	e005      	b.n	8005558 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800554c:	4b2c      	ldr	r3, [pc, #176]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1ef      	bne.n	8005538 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005558:	7bfb      	ldrb	r3, [r7, #15]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d14a      	bne.n	80055f4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d111      	bne.n	8005588 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005564:	4b26      	ldr	r3, [pc, #152]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800556c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6892      	ldr	r2, [r2, #8]
 8005574:	0211      	lsls	r1, r2, #8
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	68d2      	ldr	r2, [r2, #12]
 800557a:	0912      	lsrs	r2, r2, #4
 800557c:	0452      	lsls	r2, r2, #17
 800557e:	430a      	orrs	r2, r1
 8005580:	491f      	ldr	r1, [pc, #124]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005582:	4313      	orrs	r3, r2
 8005584:	614b      	str	r3, [r1, #20]
 8005586:	e011      	b.n	80055ac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005588:	4b1d      	ldr	r3, [pc, #116]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005590:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6892      	ldr	r2, [r2, #8]
 8005598:	0211      	lsls	r1, r2, #8
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6912      	ldr	r2, [r2, #16]
 800559e:	0852      	lsrs	r2, r2, #1
 80055a0:	3a01      	subs	r2, #1
 80055a2:	0652      	lsls	r2, r2, #25
 80055a4:	430a      	orrs	r2, r1
 80055a6:	4916      	ldr	r1, [pc, #88]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80055ac:	4b14      	ldr	r3, [pc, #80]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a13      	ldr	r2, [pc, #76]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b8:	f7fc ff9e 	bl	80024f8 <HAL_GetTick>
 80055bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055be:	e009      	b.n	80055d4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055c0:	f7fc ff9a 	bl	80024f8 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d902      	bls.n	80055d4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	73fb      	strb	r3, [r7, #15]
          break;
 80055d2:	e005      	b.n	80055e0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055d4:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0ef      	beq.n	80055c0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80055e6:	4b06      	ldr	r3, [pc, #24]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055e8:	695a      	ldr	r2, [r3, #20]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	4904      	ldr	r1, [pc, #16]	; (8005600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	40021000 	.word	0x40021000

08005604 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e095      	b.n	8005742 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	2b00      	cmp	r3, #0
 800561c:	d108      	bne.n	8005630 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005626:	d009      	beq.n	800563c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	61da      	str	r2, [r3, #28]
 800562e:	e005      	b.n	800563c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d106      	bne.n	800565c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7fb ff98 	bl	800158c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005672:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800567c:	d902      	bls.n	8005684 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	e002      	b.n	800568a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005688:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005692:	d007      	beq.n	80056a4 <HAL_SPI_Init+0xa0>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800569c:	d002      	beq.n	80056a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056b4:	431a      	orrs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	431a      	orrs	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e6:	ea42 0103 	orr.w	r1, r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	0c1b      	lsrs	r3, r3, #16
 8005700:	f003 0204 	and.w	r2, r3, #4
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	431a      	orrs	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005720:	ea42 0103 	orr.w	r1, r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b082      	sub	sp, #8
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e01a      	b.n	8005792 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005772:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7fb ff4b 	bl	8001610 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b088      	sub	sp, #32
 800579e:	af00      	add	r7, sp, #0
 80057a0:	60f8      	str	r0, [r7, #12]
 80057a2:	60b9      	str	r1, [r7, #8]
 80057a4:	603b      	str	r3, [r7, #0]
 80057a6:	4613      	mov	r3, r2
 80057a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d101      	bne.n	80057bc <HAL_SPI_Transmit+0x22>
 80057b8:	2302      	movs	r3, #2
 80057ba:	e158      	b.n	8005a6e <HAL_SPI_Transmit+0x2d4>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057c4:	f7fc fe98 	bl	80024f8 <HAL_GetTick>
 80057c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80057ca:	88fb      	ldrh	r3, [r7, #6]
 80057cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d002      	beq.n	80057e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80057da:	2302      	movs	r3, #2
 80057dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057de:	e13d      	b.n	8005a5c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_SPI_Transmit+0x52>
 80057e6:	88fb      	ldrh	r3, [r7, #6]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d102      	bne.n	80057f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057f0:	e134      	b.n	8005a5c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2203      	movs	r2, #3
 80057f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	88fa      	ldrh	r2, [r7, #6]
 800580a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	88fa      	ldrh	r2, [r7, #6]
 8005810:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800583c:	d10f      	bne.n	800585e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800584c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800585c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005868:	2b40      	cmp	r3, #64	; 0x40
 800586a:	d007      	beq.n	800587c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800587a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005884:	d94b      	bls.n	800591e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <HAL_SPI_Transmit+0xfa>
 800588e:	8afb      	ldrh	r3, [r7, #22]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d13e      	bne.n	8005912 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005898:	881a      	ldrh	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	1c9a      	adds	r2, r3, #2
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058b8:	e02b      	b.n	8005912 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d112      	bne.n	80058ee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	881a      	ldrh	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d8:	1c9a      	adds	r2, r3, #2
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058ec:	e011      	b.n	8005912 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058ee:	f7fc fe03 	bl	80024f8 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d803      	bhi.n	8005906 <HAL_SPI_Transmit+0x16c>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005904:	d102      	bne.n	800590c <HAL_SPI_Transmit+0x172>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d102      	bne.n	8005912 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005910:	e0a4      	b.n	8005a5c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005916:	b29b      	uxth	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1ce      	bne.n	80058ba <HAL_SPI_Transmit+0x120>
 800591c:	e07c      	b.n	8005a18 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <HAL_SPI_Transmit+0x192>
 8005926:	8afb      	ldrh	r3, [r7, #22]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d170      	bne.n	8005a0e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005930:	b29b      	uxth	r3, r3
 8005932:	2b01      	cmp	r3, #1
 8005934:	d912      	bls.n	800595c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593a:	881a      	ldrh	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	1c9a      	adds	r2, r3, #2
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b02      	subs	r3, #2
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	87da      	strh	r2, [r3, #62]	; 0x3e
 800595a:	e058      	b.n	8005a0e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	330c      	adds	r3, #12
 8005966:	7812      	ldrb	r2, [r2, #0]
 8005968:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005978:	b29b      	uxth	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005982:	e044      	b.n	8005a0e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b02      	cmp	r3, #2
 8005990:	d12b      	bne.n	80059ea <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005996:	b29b      	uxth	r3, r3
 8005998:	2b01      	cmp	r3, #1
 800599a:	d912      	bls.n	80059c2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	881a      	ldrh	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ac:	1c9a      	adds	r2, r3, #2
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b02      	subs	r3, #2
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059c0:	e025      	b.n	8005a0e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	330c      	adds	r3, #12
 80059cc:	7812      	ldrb	r2, [r2, #0]
 80059ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059e8:	e011      	b.n	8005a0e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059ea:	f7fc fd85 	bl	80024f8 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d803      	bhi.n	8005a02 <HAL_SPI_Transmit+0x268>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a00:	d102      	bne.n	8005a08 <HAL_SPI_Transmit+0x26e>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d102      	bne.n	8005a0e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a0c:	e026      	b.n	8005a5c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1b5      	bne.n	8005984 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	6839      	ldr	r1, [r7, #0]
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 fce3 	bl	80063e8 <SPI_EndRxTxTransaction>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10a      	bne.n	8005a4c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a36:	2300      	movs	r3, #0
 8005a38:	613b      	str	r3, [r7, #16]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	77fb      	strb	r3, [r7, #31]
 8005a58:	e000      	b.n	8005a5c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005a5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3720      	adds	r7, #32
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b088      	sub	sp, #32
 8005a7a:	af02      	add	r7, sp, #8
 8005a7c:	60f8      	str	r0, [r7, #12]
 8005a7e:	60b9      	str	r1, [r7, #8]
 8005a80:	603b      	str	r3, [r7, #0]
 8005a82:	4613      	mov	r3, r2
 8005a84:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a92:	d112      	bne.n	8005aba <HAL_SPI_Receive+0x44>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10e      	bne.n	8005aba <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2204      	movs	r2, #4
 8005aa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005aa4:	88fa      	ldrh	r2, [r7, #6]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	68b9      	ldr	r1, [r7, #8]
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f000 f910 	bl	8005cd6 <HAL_SPI_TransmitReceive>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	e109      	b.n	8005cce <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d101      	bne.n	8005ac8 <HAL_SPI_Receive+0x52>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e102      	b.n	8005cce <HAL_SPI_Receive+0x258>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ad0:	f7fc fd12 	bl	80024f8 <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d002      	beq.n	8005ae8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ae6:	e0e9      	b.n	8005cbc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <HAL_SPI_Receive+0x7e>
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d102      	bne.n	8005afa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005af8:	e0e0      	b.n	8005cbc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2204      	movs	r2, #4
 8005afe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	88fa      	ldrh	r2, [r7, #6]
 8005b12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	88fa      	ldrh	r2, [r7, #6]
 8005b1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b44:	d908      	bls.n	8005b58 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b54:	605a      	str	r2, [r3, #4]
 8005b56:	e007      	b.n	8005b68 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b66:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b70:	d10f      	bne.n	8005b92 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b90:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9c:	2b40      	cmp	r3, #64	; 0x40
 8005b9e:	d007      	beq.n	8005bb0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bb8:	d867      	bhi.n	8005c8a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005bba:	e030      	b.n	8005c1e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d117      	bne.n	8005bfa <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f103 020c 	add.w	r2, r3, #12
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	7812      	ldrb	r2, [r2, #0]
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005bf8:	e011      	b.n	8005c1e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bfa:	f7fc fc7d 	bl	80024f8 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d803      	bhi.n	8005c12 <HAL_SPI_Receive+0x19c>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c10:	d102      	bne.n	8005c18 <HAL_SPI_Receive+0x1a2>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d102      	bne.n	8005c1e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c1c:	e04e      	b.n	8005cbc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1c8      	bne.n	8005bbc <HAL_SPI_Receive+0x146>
 8005c2a:	e034      	b.n	8005c96 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d115      	bne.n	8005c66 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	b292      	uxth	r2, r2
 8005c46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	1c9a      	adds	r2, r3, #2
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005c64:	e011      	b.n	8005c8a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c66:	f7fc fc47 	bl	80024f8 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d803      	bhi.n	8005c7e <HAL_SPI_Receive+0x208>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7c:	d102      	bne.n	8005c84 <HAL_SPI_Receive+0x20e>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d102      	bne.n	8005c8a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c88:	e018      	b.n	8005cbc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1ca      	bne.n	8005c2c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 fb4c 	bl	8006338 <SPI_EndRxTransaction>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	75fb      	strb	r3, [r7, #23]
 8005cb8:	e000      	b.n	8005cbc <HAL_SPI_Receive+0x246>
  }

error :
 8005cba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b08a      	sub	sp, #40	; 0x28
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	607a      	str	r2, [r7, #4]
 8005ce2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_SPI_TransmitReceive+0x26>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e1fb      	b.n	80060f4 <HAL_SPI_TransmitReceive+0x41e>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d04:	f7fc fbf8 	bl	80024f8 <HAL_GetTick>
 8005d08:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d10:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005d18:	887b      	ldrh	r3, [r7, #2]
 8005d1a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005d1c:	887b      	ldrh	r3, [r7, #2]
 8005d1e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d20:	7efb      	ldrb	r3, [r7, #27]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d00e      	beq.n	8005d44 <HAL_SPI_TransmitReceive+0x6e>
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d2c:	d106      	bne.n	8005d3c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d102      	bne.n	8005d3c <HAL_SPI_TransmitReceive+0x66>
 8005d36:	7efb      	ldrb	r3, [r7, #27]
 8005d38:	2b04      	cmp	r3, #4
 8005d3a:	d003      	beq.n	8005d44 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005d42:	e1cd      	b.n	80060e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d005      	beq.n	8005d56 <HAL_SPI_TransmitReceive+0x80>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <HAL_SPI_TransmitReceive+0x80>
 8005d50:	887b      	ldrh	r3, [r7, #2]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d103      	bne.n	8005d5e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005d5c:	e1c0      	b.n	80060e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d003      	beq.n	8005d72 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2205      	movs	r2, #5
 8005d6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	887a      	ldrh	r2, [r7, #2]
 8005d82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	887a      	ldrh	r2, [r7, #2]
 8005d8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	887a      	ldrh	r2, [r7, #2]
 8005d98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	887a      	ldrh	r2, [r7, #2]
 8005d9e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005db4:	d802      	bhi.n	8005dbc <HAL_SPI_TransmitReceive+0xe6>
 8005db6:	8a3b      	ldrh	r3, [r7, #16]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d908      	bls.n	8005dce <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dca:	605a      	str	r2, [r3, #4]
 8005dcc:	e007      	b.n	8005dde <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ddc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de8:	2b40      	cmp	r3, #64	; 0x40
 8005dea:	d007      	beq.n	8005dfc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e04:	d97c      	bls.n	8005f00 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <HAL_SPI_TransmitReceive+0x13e>
 8005e0e:	8a7b      	ldrh	r3, [r7, #18]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d169      	bne.n	8005ee8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e18:	881a      	ldrh	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	1c9a      	adds	r2, r3, #2
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e38:	e056      	b.n	8005ee8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d11b      	bne.n	8005e80 <HAL_SPI_TransmitReceive+0x1aa>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d016      	beq.n	8005e80 <HAL_SPI_TransmitReceive+0x1aa>
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d113      	bne.n	8005e80 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	881a      	ldrh	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e68:	1c9a      	adds	r2, r3, #2
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	3b01      	subs	r3, #1
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d11c      	bne.n	8005ec8 <HAL_SPI_TransmitReceive+0x1f2>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d016      	beq.n	8005ec8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea4:	b292      	uxth	r2, r2
 8005ea6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	1c9a      	adds	r2, r3, #2
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ec8:	f7fc fb16 	bl	80024f8 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d807      	bhi.n	8005ee8 <HAL_SPI_TransmitReceive+0x212>
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ede:	d003      	beq.n	8005ee8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005ee6:	e0fb      	b.n	80060e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1a3      	bne.n	8005e3a <HAL_SPI_TransmitReceive+0x164>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d19d      	bne.n	8005e3a <HAL_SPI_TransmitReceive+0x164>
 8005efe:	e0df      	b.n	80060c0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <HAL_SPI_TransmitReceive+0x23a>
 8005f08:	8a7b      	ldrh	r3, [r7, #18]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	f040 80cb 	bne.w	80060a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d912      	bls.n	8005f40 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1e:	881a      	ldrh	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	1c9a      	adds	r2, r3, #2
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	3b02      	subs	r3, #2
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f3e:	e0b2      	b.n	80060a6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	330c      	adds	r3, #12
 8005f4a:	7812      	ldrb	r2, [r2, #0]
 8005f4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f66:	e09e      	b.n	80060a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d134      	bne.n	8005fe0 <HAL_SPI_TransmitReceive+0x30a>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d02f      	beq.n	8005fe0 <HAL_SPI_TransmitReceive+0x30a>
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d12c      	bne.n	8005fe0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d912      	bls.n	8005fb6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f94:	881a      	ldrh	r2, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa0:	1c9a      	adds	r2, r3, #2
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	3b02      	subs	r3, #2
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fb4:	e012      	b.n	8005fdc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	330c      	adds	r3, #12
 8005fc0:	7812      	ldrb	r2, [r2, #0]
 8005fc2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d148      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x3aa>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d042      	beq.n	8006080 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d923      	bls.n	800604e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	b292      	uxth	r2, r2
 8006012:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006018:	1c9a      	adds	r2, r3, #2
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006024:	b29b      	uxth	r3, r3
 8006026:	3b02      	subs	r3, #2
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006036:	b29b      	uxth	r3, r3
 8006038:	2b01      	cmp	r3, #1
 800603a:	d81f      	bhi.n	800607c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800604a:	605a      	str	r2, [r3, #4]
 800604c:	e016      	b.n	800607c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f103 020c 	add.w	r2, r3, #12
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	7812      	ldrb	r2, [r2, #0]
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006070:	b29b      	uxth	r3, r3
 8006072:	3b01      	subs	r3, #1
 8006074:	b29a      	uxth	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800607c:	2301      	movs	r3, #1
 800607e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006080:	f7fc fa3a 	bl	80024f8 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800608c:	429a      	cmp	r2, r3
 800608e:	d803      	bhi.n	8006098 <HAL_SPI_TransmitReceive+0x3c2>
 8006090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006096:	d102      	bne.n	800609e <HAL_SPI_TransmitReceive+0x3c8>
 8006098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609a:	2b00      	cmp	r3, #0
 800609c:	d103      	bne.n	80060a6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80060a4:	e01c      	b.n	80060e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f47f af5b 	bne.w	8005f68 <HAL_SPI_TransmitReceive+0x292>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f47f af54 	bne.w	8005f68 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060c0:	69fa      	ldr	r2, [r7, #28]
 80060c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 f98f 	bl	80063e8 <SPI_EndRxTxTransaction>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d006      	beq.n	80060de <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2220      	movs	r2, #32
 80060da:	661a      	str	r2, [r3, #96]	; 0x60
 80060dc:	e000      	b.n	80060e0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80060de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3728      	adds	r7, #40	; 0x28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b088      	sub	sp, #32
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	4613      	mov	r3, r2
 800610a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800610c:	f7fc f9f4 	bl	80024f8 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	1a9b      	subs	r3, r3, r2
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	4413      	add	r3, r2
 800611a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800611c:	f7fc f9ec 	bl	80024f8 <HAL_GetTick>
 8006120:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006122:	4b39      	ldr	r3, [pc, #228]	; (8006208 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	015b      	lsls	r3, r3, #5
 8006128:	0d1b      	lsrs	r3, r3, #20
 800612a:	69fa      	ldr	r2, [r7, #28]
 800612c:	fb02 f303 	mul.w	r3, r2, r3
 8006130:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006132:	e054      	b.n	80061de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613a:	d050      	beq.n	80061de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800613c:	f7fc f9dc 	bl	80024f8 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	69fa      	ldr	r2, [r7, #28]
 8006148:	429a      	cmp	r2, r3
 800614a:	d902      	bls.n	8006152 <SPI_WaitFlagStateUntilTimeout+0x56>
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d13d      	bne.n	80061ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006160:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800616a:	d111      	bne.n	8006190 <SPI_WaitFlagStateUntilTimeout+0x94>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006174:	d004      	beq.n	8006180 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800617e:	d107      	bne.n	8006190 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800618e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006198:	d10f      	bne.n	80061ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e017      	b.n	80061fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	3b01      	subs	r3, #1
 80061dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	4013      	ands	r3, r2
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	bf0c      	ite	eq
 80061ee:	2301      	moveq	r3, #1
 80061f0:	2300      	movne	r3, #0
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	461a      	mov	r2, r3
 80061f6:	79fb      	ldrb	r3, [r7, #7]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d19b      	bne.n	8006134 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3720      	adds	r7, #32
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000068 	.word	0x20000068

0800620c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08a      	sub	sp, #40	; 0x28
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800621a:	2300      	movs	r3, #0
 800621c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800621e:	f7fc f96b 	bl	80024f8 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	1a9b      	subs	r3, r3, r2
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	4413      	add	r3, r2
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800622e:	f7fc f963 	bl	80024f8 <HAL_GetTick>
 8006232:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	330c      	adds	r3, #12
 800623a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800623c:	4b3d      	ldr	r3, [pc, #244]	; (8006334 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	4613      	mov	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	00da      	lsls	r2, r3, #3
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	0d1b      	lsrs	r3, r3, #20
 800624c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800624e:	fb02 f303 	mul.w	r3, r2, r3
 8006252:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006254:	e060      	b.n	8006318 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800625c:	d107      	bne.n	800626e <SPI_WaitFifoStateUntilTimeout+0x62>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d104      	bne.n	800626e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800626c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006274:	d050      	beq.n	8006318 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006276:	f7fc f93f 	bl	80024f8 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006282:	429a      	cmp	r2, r3
 8006284:	d902      	bls.n	800628c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	2b00      	cmp	r3, #0
 800628a:	d13d      	bne.n	8006308 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800629a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062a4:	d111      	bne.n	80062ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ae:	d004      	beq.n	80062ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b8:	d107      	bne.n	80062ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d2:	d10f      	bne.n	80062f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e010      	b.n	800632a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	3b01      	subs	r3, #1
 8006316:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	4013      	ands	r3, r2
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	429a      	cmp	r2, r3
 8006326:	d196      	bne.n	8006256 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3728      	adds	r7, #40	; 0x28
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	20000068 	.word	0x20000068

08006338 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af02      	add	r7, sp, #8
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800634c:	d111      	bne.n	8006372 <SPI_EndRxTransaction+0x3a>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006356:	d004      	beq.n	8006362 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006360:	d107      	bne.n	8006372 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006370:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2200      	movs	r2, #0
 800637a:	2180      	movs	r1, #128	; 0x80
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f7ff febd 	bl	80060fc <SPI_WaitFlagStateUntilTimeout>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d007      	beq.n	8006398 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800638c:	f043 0220 	orr.w	r2, r3, #32
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e023      	b.n	80063e0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063a0:	d11d      	bne.n	80063de <SPI_EndRxTransaction+0xa6>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063aa:	d004      	beq.n	80063b6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b4:	d113      	bne.n	80063de <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2200      	movs	r2, #0
 80063be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f7ff ff22 	bl	800620c <SPI_WaitFifoStateUntilTimeout>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d007      	beq.n	80063de <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d2:	f043 0220 	orr.w	r2, r3, #32
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e000      	b.n	80063e0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af02      	add	r7, sp, #8
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f7ff ff03 	bl	800620c <SPI_WaitFifoStateUntilTimeout>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d007      	beq.n	800641c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006410:	f043 0220 	orr.w	r2, r3, #32
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e027      	b.n	800646c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2200      	movs	r2, #0
 8006424:	2180      	movs	r1, #128	; 0x80
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f7ff fe68 	bl	80060fc <SPI_WaitFlagStateUntilTimeout>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d007      	beq.n	8006442 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006436:	f043 0220 	orr.w	r2, r3, #32
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e014      	b.n	800646c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2200      	movs	r2, #0
 800644a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f7ff fedc 	bl	800620c <SPI_WaitFifoStateUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d007      	beq.n	800646a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800645e:	f043 0220 	orr.w	r2, r3, #32
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e000      	b.n	800646c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	73fb      	strb	r3, [r7, #15]
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8006480:	e00c      	b.n	800649c <HAL_SPIEx_FlushRxFifo+0x28>
  {
    count++;
 8006482:	7bfb      	ldrb	r3, [r7, #15]
 8006484:	3301      	adds	r3, #1
 8006486:	73fb      	strb	r3, [r7, #15]
    tmpreg = hspi->Instance->DR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	60bb      	str	r3, [r7, #8]
    UNUSED(tmpreg); /* To avoid GCC warning */
 8006490:	68bb      	ldr	r3, [r7, #8]
    if (count == SPI_FIFO_SIZE)
 8006492:	7bfb      	ldrb	r3, [r7, #15]
 8006494:	2b04      	cmp	r3, #4
 8006496:	d101      	bne.n	800649c <HAL_SPIEx_FlushRxFifo+0x28>
    {
      return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e007      	b.n	80064ac <HAL_SPIEx_FlushRxFifo+0x38>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1eb      	bne.n	8006482 <HAL_SPIEx_FlushRxFifo+0xe>
    }
  }
  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e040      	b.n	800654c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d106      	bne.n	80064e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7fb f8b4 	bl	8001648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2224      	movs	r2, #36	; 0x24
 80064e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0201 	bic.w	r2, r2, #1
 80064f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f8c0 	bl	800667c <UART_SetConfig>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d101      	bne.n	8006506 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e022      	b.n	800654c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fb6c 	bl	8006bec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006522:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689a      	ldr	r2, [r3, #8]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006532:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0201 	orr.w	r2, r2, #1
 8006542:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fbf3 	bl	8006d30 <UART_CheckIdleState>
 800654a:	4603      	mov	r3, r0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b08a      	sub	sp, #40	; 0x28
 8006558:	af02      	add	r7, sp, #8
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	4613      	mov	r3, r2
 8006562:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006568:	2b20      	cmp	r3, #32
 800656a:	f040 8082 	bne.w	8006672 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <HAL_UART_Transmit+0x26>
 8006574:	88fb      	ldrh	r3, [r7, #6]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e07a      	b.n	8006674 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006584:	2b01      	cmp	r3, #1
 8006586:	d101      	bne.n	800658c <HAL_UART_Transmit+0x38>
 8006588:	2302      	movs	r3, #2
 800658a:	e073      	b.n	8006674 <HAL_UART_Transmit+0x120>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2221      	movs	r2, #33	; 0x21
 80065a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065a2:	f7fb ffa9 	bl	80024f8 <HAL_GetTick>
 80065a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	88fa      	ldrh	r2, [r7, #6]
 80065ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	88fa      	ldrh	r2, [r7, #6]
 80065b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c0:	d108      	bne.n	80065d4 <HAL_UART_Transmit+0x80>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d104      	bne.n	80065d4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80065ca:	2300      	movs	r3, #0
 80065cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	e003      	b.n	80065dc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065d8:	2300      	movs	r3, #0
 80065da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80065e4:	e02d      	b.n	8006642 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2200      	movs	r2, #0
 80065ee:	2180      	movs	r1, #128	; 0x80
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 fbe6 	bl	8006dc2 <UART_WaitOnFlagUntilTimeout>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e039      	b.n	8006674 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10b      	bne.n	800661e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	881a      	ldrh	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006612:	b292      	uxth	r2, r2
 8006614:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	3302      	adds	r3, #2
 800661a:	61bb      	str	r3, [r7, #24]
 800661c:	e008      	b.n	8006630 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	781a      	ldrb	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	b292      	uxth	r2, r2
 8006628:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	3301      	adds	r3, #1
 800662e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006636:	b29b      	uxth	r3, r3
 8006638:	3b01      	subs	r3, #1
 800663a:	b29a      	uxth	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1cb      	bne.n	80065e6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2200      	movs	r2, #0
 8006656:	2140      	movs	r1, #64	; 0x40
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 fbb2 	bl	8006dc2 <UART_WaitOnFlagUntilTimeout>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e005      	b.n	8006674 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2220      	movs	r2, #32
 800666c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	e000      	b.n	8006674 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006672:	2302      	movs	r3, #2
  }
}
 8006674:	4618      	mov	r0, r3
 8006676:	3720      	adds	r7, #32
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800667c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006680:	b08a      	sub	sp, #40	; 0x28
 8006682:	af00      	add	r7, sp, #0
 8006684:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	689a      	ldr	r2, [r3, #8]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	431a      	orrs	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	431a      	orrs	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	4ba4      	ldr	r3, [pc, #656]	; (800693c <UART_SetConfig+0x2c0>)
 80066ac:	4013      	ands	r3, r2
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	6812      	ldr	r2, [r2, #0]
 80066b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066b4:	430b      	orrs	r3, r1
 80066b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a99      	ldr	r2, [pc, #612]	; (8006940 <UART_SetConfig+0x2c4>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d004      	beq.n	80066e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e4:	4313      	orrs	r3, r2
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f8:	430a      	orrs	r2, r1
 80066fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a90      	ldr	r2, [pc, #576]	; (8006944 <UART_SetConfig+0x2c8>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d126      	bne.n	8006754 <UART_SetConfig+0xd8>
 8006706:	4b90      	ldr	r3, [pc, #576]	; (8006948 <UART_SetConfig+0x2cc>)
 8006708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670c:	f003 0303 	and.w	r3, r3, #3
 8006710:	2b03      	cmp	r3, #3
 8006712:	d81b      	bhi.n	800674c <UART_SetConfig+0xd0>
 8006714:	a201      	add	r2, pc, #4	; (adr r2, 800671c <UART_SetConfig+0xa0>)
 8006716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671a:	bf00      	nop
 800671c:	0800672d 	.word	0x0800672d
 8006720:	0800673d 	.word	0x0800673d
 8006724:	08006735 	.word	0x08006735
 8006728:	08006745 	.word	0x08006745
 800672c:	2301      	movs	r3, #1
 800672e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006732:	e116      	b.n	8006962 <UART_SetConfig+0x2e6>
 8006734:	2302      	movs	r3, #2
 8006736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800673a:	e112      	b.n	8006962 <UART_SetConfig+0x2e6>
 800673c:	2304      	movs	r3, #4
 800673e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006742:	e10e      	b.n	8006962 <UART_SetConfig+0x2e6>
 8006744:	2308      	movs	r3, #8
 8006746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800674a:	e10a      	b.n	8006962 <UART_SetConfig+0x2e6>
 800674c:	2310      	movs	r3, #16
 800674e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006752:	e106      	b.n	8006962 <UART_SetConfig+0x2e6>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a7c      	ldr	r2, [pc, #496]	; (800694c <UART_SetConfig+0x2d0>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d138      	bne.n	80067d0 <UART_SetConfig+0x154>
 800675e:	4b7a      	ldr	r3, [pc, #488]	; (8006948 <UART_SetConfig+0x2cc>)
 8006760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006764:	f003 030c 	and.w	r3, r3, #12
 8006768:	2b0c      	cmp	r3, #12
 800676a:	d82d      	bhi.n	80067c8 <UART_SetConfig+0x14c>
 800676c:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <UART_SetConfig+0xf8>)
 800676e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006772:	bf00      	nop
 8006774:	080067a9 	.word	0x080067a9
 8006778:	080067c9 	.word	0x080067c9
 800677c:	080067c9 	.word	0x080067c9
 8006780:	080067c9 	.word	0x080067c9
 8006784:	080067b9 	.word	0x080067b9
 8006788:	080067c9 	.word	0x080067c9
 800678c:	080067c9 	.word	0x080067c9
 8006790:	080067c9 	.word	0x080067c9
 8006794:	080067b1 	.word	0x080067b1
 8006798:	080067c9 	.word	0x080067c9
 800679c:	080067c9 	.word	0x080067c9
 80067a0:	080067c9 	.word	0x080067c9
 80067a4:	080067c1 	.word	0x080067c1
 80067a8:	2300      	movs	r3, #0
 80067aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ae:	e0d8      	b.n	8006962 <UART_SetConfig+0x2e6>
 80067b0:	2302      	movs	r3, #2
 80067b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067b6:	e0d4      	b.n	8006962 <UART_SetConfig+0x2e6>
 80067b8:	2304      	movs	r3, #4
 80067ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067be:	e0d0      	b.n	8006962 <UART_SetConfig+0x2e6>
 80067c0:	2308      	movs	r3, #8
 80067c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067c6:	e0cc      	b.n	8006962 <UART_SetConfig+0x2e6>
 80067c8:	2310      	movs	r3, #16
 80067ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ce:	e0c8      	b.n	8006962 <UART_SetConfig+0x2e6>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a5e      	ldr	r2, [pc, #376]	; (8006950 <UART_SetConfig+0x2d4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d125      	bne.n	8006826 <UART_SetConfig+0x1aa>
 80067da:	4b5b      	ldr	r3, [pc, #364]	; (8006948 <UART_SetConfig+0x2cc>)
 80067dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067e4:	2b30      	cmp	r3, #48	; 0x30
 80067e6:	d016      	beq.n	8006816 <UART_SetConfig+0x19a>
 80067e8:	2b30      	cmp	r3, #48	; 0x30
 80067ea:	d818      	bhi.n	800681e <UART_SetConfig+0x1a2>
 80067ec:	2b20      	cmp	r3, #32
 80067ee:	d00a      	beq.n	8006806 <UART_SetConfig+0x18a>
 80067f0:	2b20      	cmp	r3, #32
 80067f2:	d814      	bhi.n	800681e <UART_SetConfig+0x1a2>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <UART_SetConfig+0x182>
 80067f8:	2b10      	cmp	r3, #16
 80067fa:	d008      	beq.n	800680e <UART_SetConfig+0x192>
 80067fc:	e00f      	b.n	800681e <UART_SetConfig+0x1a2>
 80067fe:	2300      	movs	r3, #0
 8006800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006804:	e0ad      	b.n	8006962 <UART_SetConfig+0x2e6>
 8006806:	2302      	movs	r3, #2
 8006808:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800680c:	e0a9      	b.n	8006962 <UART_SetConfig+0x2e6>
 800680e:	2304      	movs	r3, #4
 8006810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006814:	e0a5      	b.n	8006962 <UART_SetConfig+0x2e6>
 8006816:	2308      	movs	r3, #8
 8006818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800681c:	e0a1      	b.n	8006962 <UART_SetConfig+0x2e6>
 800681e:	2310      	movs	r3, #16
 8006820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006824:	e09d      	b.n	8006962 <UART_SetConfig+0x2e6>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a4a      	ldr	r2, [pc, #296]	; (8006954 <UART_SetConfig+0x2d8>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d125      	bne.n	800687c <UART_SetConfig+0x200>
 8006830:	4b45      	ldr	r3, [pc, #276]	; (8006948 <UART_SetConfig+0x2cc>)
 8006832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006836:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800683a:	2bc0      	cmp	r3, #192	; 0xc0
 800683c:	d016      	beq.n	800686c <UART_SetConfig+0x1f0>
 800683e:	2bc0      	cmp	r3, #192	; 0xc0
 8006840:	d818      	bhi.n	8006874 <UART_SetConfig+0x1f8>
 8006842:	2b80      	cmp	r3, #128	; 0x80
 8006844:	d00a      	beq.n	800685c <UART_SetConfig+0x1e0>
 8006846:	2b80      	cmp	r3, #128	; 0x80
 8006848:	d814      	bhi.n	8006874 <UART_SetConfig+0x1f8>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <UART_SetConfig+0x1d8>
 800684e:	2b40      	cmp	r3, #64	; 0x40
 8006850:	d008      	beq.n	8006864 <UART_SetConfig+0x1e8>
 8006852:	e00f      	b.n	8006874 <UART_SetConfig+0x1f8>
 8006854:	2300      	movs	r3, #0
 8006856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800685a:	e082      	b.n	8006962 <UART_SetConfig+0x2e6>
 800685c:	2302      	movs	r3, #2
 800685e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006862:	e07e      	b.n	8006962 <UART_SetConfig+0x2e6>
 8006864:	2304      	movs	r3, #4
 8006866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800686a:	e07a      	b.n	8006962 <UART_SetConfig+0x2e6>
 800686c:	2308      	movs	r3, #8
 800686e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006872:	e076      	b.n	8006962 <UART_SetConfig+0x2e6>
 8006874:	2310      	movs	r3, #16
 8006876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800687a:	e072      	b.n	8006962 <UART_SetConfig+0x2e6>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a35      	ldr	r2, [pc, #212]	; (8006958 <UART_SetConfig+0x2dc>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d12a      	bne.n	80068dc <UART_SetConfig+0x260>
 8006886:	4b30      	ldr	r3, [pc, #192]	; (8006948 <UART_SetConfig+0x2cc>)
 8006888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006890:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006894:	d01a      	beq.n	80068cc <UART_SetConfig+0x250>
 8006896:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800689a:	d81b      	bhi.n	80068d4 <UART_SetConfig+0x258>
 800689c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068a0:	d00c      	beq.n	80068bc <UART_SetConfig+0x240>
 80068a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068a6:	d815      	bhi.n	80068d4 <UART_SetConfig+0x258>
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <UART_SetConfig+0x238>
 80068ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068b0:	d008      	beq.n	80068c4 <UART_SetConfig+0x248>
 80068b2:	e00f      	b.n	80068d4 <UART_SetConfig+0x258>
 80068b4:	2300      	movs	r3, #0
 80068b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ba:	e052      	b.n	8006962 <UART_SetConfig+0x2e6>
 80068bc:	2302      	movs	r3, #2
 80068be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068c2:	e04e      	b.n	8006962 <UART_SetConfig+0x2e6>
 80068c4:	2304      	movs	r3, #4
 80068c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ca:	e04a      	b.n	8006962 <UART_SetConfig+0x2e6>
 80068cc:	2308      	movs	r3, #8
 80068ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068d2:	e046      	b.n	8006962 <UART_SetConfig+0x2e6>
 80068d4:	2310      	movs	r3, #16
 80068d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068da:	e042      	b.n	8006962 <UART_SetConfig+0x2e6>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a17      	ldr	r2, [pc, #92]	; (8006940 <UART_SetConfig+0x2c4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d13a      	bne.n	800695c <UART_SetConfig+0x2e0>
 80068e6:	4b18      	ldr	r3, [pc, #96]	; (8006948 <UART_SetConfig+0x2cc>)
 80068e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068f4:	d01a      	beq.n	800692c <UART_SetConfig+0x2b0>
 80068f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068fa:	d81b      	bhi.n	8006934 <UART_SetConfig+0x2b8>
 80068fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006900:	d00c      	beq.n	800691c <UART_SetConfig+0x2a0>
 8006902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006906:	d815      	bhi.n	8006934 <UART_SetConfig+0x2b8>
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <UART_SetConfig+0x298>
 800690c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006910:	d008      	beq.n	8006924 <UART_SetConfig+0x2a8>
 8006912:	e00f      	b.n	8006934 <UART_SetConfig+0x2b8>
 8006914:	2300      	movs	r3, #0
 8006916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800691a:	e022      	b.n	8006962 <UART_SetConfig+0x2e6>
 800691c:	2302      	movs	r3, #2
 800691e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006922:	e01e      	b.n	8006962 <UART_SetConfig+0x2e6>
 8006924:	2304      	movs	r3, #4
 8006926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800692a:	e01a      	b.n	8006962 <UART_SetConfig+0x2e6>
 800692c:	2308      	movs	r3, #8
 800692e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006932:	e016      	b.n	8006962 <UART_SetConfig+0x2e6>
 8006934:	2310      	movs	r3, #16
 8006936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800693a:	e012      	b.n	8006962 <UART_SetConfig+0x2e6>
 800693c:	efff69f3 	.word	0xefff69f3
 8006940:	40008000 	.word	0x40008000
 8006944:	40013800 	.word	0x40013800
 8006948:	40021000 	.word	0x40021000
 800694c:	40004400 	.word	0x40004400
 8006950:	40004800 	.word	0x40004800
 8006954:	40004c00 	.word	0x40004c00
 8006958:	40005000 	.word	0x40005000
 800695c:	2310      	movs	r3, #16
 800695e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a9f      	ldr	r2, [pc, #636]	; (8006be4 <UART_SetConfig+0x568>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d17a      	bne.n	8006a62 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800696c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006970:	2b08      	cmp	r3, #8
 8006972:	d824      	bhi.n	80069be <UART_SetConfig+0x342>
 8006974:	a201      	add	r2, pc, #4	; (adr r2, 800697c <UART_SetConfig+0x300>)
 8006976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697a:	bf00      	nop
 800697c:	080069a1 	.word	0x080069a1
 8006980:	080069bf 	.word	0x080069bf
 8006984:	080069a9 	.word	0x080069a9
 8006988:	080069bf 	.word	0x080069bf
 800698c:	080069af 	.word	0x080069af
 8006990:	080069bf 	.word	0x080069bf
 8006994:	080069bf 	.word	0x080069bf
 8006998:	080069bf 	.word	0x080069bf
 800699c:	080069b7 	.word	0x080069b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069a0:	f7fe f8d8 	bl	8004b54 <HAL_RCC_GetPCLK1Freq>
 80069a4:	61f8      	str	r0, [r7, #28]
        break;
 80069a6:	e010      	b.n	80069ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069a8:	4b8f      	ldr	r3, [pc, #572]	; (8006be8 <UART_SetConfig+0x56c>)
 80069aa:	61fb      	str	r3, [r7, #28]
        break;
 80069ac:	e00d      	b.n	80069ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ae:	f7fe f839 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 80069b2:	61f8      	str	r0, [r7, #28]
        break;
 80069b4:	e009      	b.n	80069ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ba:	61fb      	str	r3, [r7, #28]
        break;
 80069bc:	e005      	b.n	80069ca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80069be:	2300      	movs	r3, #0
 80069c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80069c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 80fb 	beq.w	8006bc8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	4613      	mov	r3, r2
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	4413      	add	r3, r2
 80069dc:	69fa      	ldr	r2, [r7, #28]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d305      	bcc.n	80069ee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069e8:	69fa      	ldr	r2, [r7, #28]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d903      	bls.n	80069f6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80069f4:	e0e8      	b.n	8006bc8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	2200      	movs	r2, #0
 80069fa:	461c      	mov	r4, r3
 80069fc:	4615      	mov	r5, r2
 80069fe:	f04f 0200 	mov.w	r2, #0
 8006a02:	f04f 0300 	mov.w	r3, #0
 8006a06:	022b      	lsls	r3, r5, #8
 8006a08:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006a0c:	0222      	lsls	r2, r4, #8
 8006a0e:	68f9      	ldr	r1, [r7, #12]
 8006a10:	6849      	ldr	r1, [r1, #4]
 8006a12:	0849      	lsrs	r1, r1, #1
 8006a14:	2000      	movs	r0, #0
 8006a16:	4688      	mov	r8, r1
 8006a18:	4681      	mov	r9, r0
 8006a1a:	eb12 0a08 	adds.w	sl, r2, r8
 8006a1e:	eb43 0b09 	adc.w	fp, r3, r9
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	603b      	str	r3, [r7, #0]
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a30:	4650      	mov	r0, sl
 8006a32:	4659      	mov	r1, fp
 8006a34:	f7f9 fe08 	bl	8000648 <__aeabi_uldivmod>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a46:	d308      	bcc.n	8006a5a <UART_SetConfig+0x3de>
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a4e:	d204      	bcs.n	8006a5a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	60da      	str	r2, [r3, #12]
 8006a58:	e0b6      	b.n	8006bc8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a60:	e0b2      	b.n	8006bc8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a6a:	d15e      	bne.n	8006b2a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d828      	bhi.n	8006ac6 <UART_SetConfig+0x44a>
 8006a74:	a201      	add	r2, pc, #4	; (adr r2, 8006a7c <UART_SetConfig+0x400>)
 8006a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7a:	bf00      	nop
 8006a7c:	08006aa1 	.word	0x08006aa1
 8006a80:	08006aa9 	.word	0x08006aa9
 8006a84:	08006ab1 	.word	0x08006ab1
 8006a88:	08006ac7 	.word	0x08006ac7
 8006a8c:	08006ab7 	.word	0x08006ab7
 8006a90:	08006ac7 	.word	0x08006ac7
 8006a94:	08006ac7 	.word	0x08006ac7
 8006a98:	08006ac7 	.word	0x08006ac7
 8006a9c:	08006abf 	.word	0x08006abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aa0:	f7fe f858 	bl	8004b54 <HAL_RCC_GetPCLK1Freq>
 8006aa4:	61f8      	str	r0, [r7, #28]
        break;
 8006aa6:	e014      	b.n	8006ad2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aa8:	f7fe f86a 	bl	8004b80 <HAL_RCC_GetPCLK2Freq>
 8006aac:	61f8      	str	r0, [r7, #28]
        break;
 8006aae:	e010      	b.n	8006ad2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ab0:	4b4d      	ldr	r3, [pc, #308]	; (8006be8 <UART_SetConfig+0x56c>)
 8006ab2:	61fb      	str	r3, [r7, #28]
        break;
 8006ab4:	e00d      	b.n	8006ad2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ab6:	f7fd ffb5 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 8006aba:	61f8      	str	r0, [r7, #28]
        break;
 8006abc:	e009      	b.n	8006ad2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ac2:	61fb      	str	r3, [r7, #28]
        break;
 8006ac4:	e005      	b.n	8006ad2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ad0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d077      	beq.n	8006bc8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	005a      	lsls	r2, r3, #1
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	085b      	lsrs	r3, r3, #1
 8006ae2:	441a      	add	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	2b0f      	cmp	r3, #15
 8006af2:	d916      	bls.n	8006b22 <UART_SetConfig+0x4a6>
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006afa:	d212      	bcs.n	8006b22 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	f023 030f 	bic.w	r3, r3, #15
 8006b04:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	085b      	lsrs	r3, r3, #1
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f003 0307 	and.w	r3, r3, #7
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	8afb      	ldrh	r3, [r7, #22]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	8afa      	ldrh	r2, [r7, #22]
 8006b1e:	60da      	str	r2, [r3, #12]
 8006b20:	e052      	b.n	8006bc8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b28:	e04e      	b.n	8006bc8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b2e:	2b08      	cmp	r3, #8
 8006b30:	d827      	bhi.n	8006b82 <UART_SetConfig+0x506>
 8006b32:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <UART_SetConfig+0x4bc>)
 8006b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b38:	08006b5d 	.word	0x08006b5d
 8006b3c:	08006b65 	.word	0x08006b65
 8006b40:	08006b6d 	.word	0x08006b6d
 8006b44:	08006b83 	.word	0x08006b83
 8006b48:	08006b73 	.word	0x08006b73
 8006b4c:	08006b83 	.word	0x08006b83
 8006b50:	08006b83 	.word	0x08006b83
 8006b54:	08006b83 	.word	0x08006b83
 8006b58:	08006b7b 	.word	0x08006b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b5c:	f7fd fffa 	bl	8004b54 <HAL_RCC_GetPCLK1Freq>
 8006b60:	61f8      	str	r0, [r7, #28]
        break;
 8006b62:	e014      	b.n	8006b8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b64:	f7fe f80c 	bl	8004b80 <HAL_RCC_GetPCLK2Freq>
 8006b68:	61f8      	str	r0, [r7, #28]
        break;
 8006b6a:	e010      	b.n	8006b8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b6c:	4b1e      	ldr	r3, [pc, #120]	; (8006be8 <UART_SetConfig+0x56c>)
 8006b6e:	61fb      	str	r3, [r7, #28]
        break;
 8006b70:	e00d      	b.n	8006b8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b72:	f7fd ff57 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 8006b76:	61f8      	str	r0, [r7, #28]
        break;
 8006b78:	e009      	b.n	8006b8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b7e:	61fb      	str	r3, [r7, #28]
        break;
 8006b80:	e005      	b.n	8006b8e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b8c:	bf00      	nop
    }

    if (pclk != 0U)
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d019      	beq.n	8006bc8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	085a      	lsrs	r2, r3, #1
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	441a      	add	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	2b0f      	cmp	r3, #15
 8006bac:	d909      	bls.n	8006bc2 <UART_SetConfig+0x546>
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb4:	d205      	bcs.n	8006bc2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	60da      	str	r2, [r3, #12]
 8006bc0:	e002      	b.n	8006bc8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006bd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3728      	adds	r7, #40	; 0x28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006be2:	bf00      	nop
 8006be4:	40008000 	.word	0x40008000
 8006be8:	00f42400 	.word	0x00f42400

08006bec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00a      	beq.n	8006c16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00a      	beq.n	8006c38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	f003 0304 	and.w	r3, r3, #4
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00a      	beq.n	8006c5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	f003 0308 	and.w	r3, r3, #8
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	f003 0310 	and.w	r3, r3, #16
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00a      	beq.n	8006c9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	f003 0320 	and.w	r3, r3, #32
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d01a      	beq.n	8006d02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cea:	d10a      	bne.n	8006d02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	605a      	str	r2, [r3, #4]
  }
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d40:	f7fb fbda 	bl	80024f8 <HAL_GetTick>
 8006d44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0308 	and.w	r3, r3, #8
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d10e      	bne.n	8006d72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f82d 	bl	8006dc2 <UART_WaitOnFlagUntilTimeout>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e023      	b.n	8006dba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b04      	cmp	r3, #4
 8006d7e:	d10e      	bne.n	8006d9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f817 	bl	8006dc2 <UART_WaitOnFlagUntilTimeout>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e00d      	b.n	8006dba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2220      	movs	r2, #32
 8006da2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2220      	movs	r2, #32
 8006da8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b09c      	sub	sp, #112	; 0x70
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	60f8      	str	r0, [r7, #12]
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	603b      	str	r3, [r7, #0]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd2:	e0a5      	b.n	8006f20 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dda:	f000 80a1 	beq.w	8006f20 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dde:	f7fb fb8b 	bl	80024f8 <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d302      	bcc.n	8006df4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006dee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d13e      	bne.n	8006e72 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e08:	667b      	str	r3, [r7, #100]	; 0x64
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e14:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e6      	bne.n	8006df4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e38:	f023 0301 	bic.w	r3, r3, #1
 8006e3c:	663b      	str	r3, [r7, #96]	; 0x60
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3308      	adds	r3, #8
 8006e44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e46:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e5      	bne.n	8006e26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2220      	movs	r2, #32
 8006e64:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e067      	b.n	8006f42 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d04f      	beq.n	8006f20 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e8e:	d147      	bne.n	8006f20 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e98:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	e853 3f00 	ldrex	r3, [r3]
 8006ea6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006eae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ec0:	e841 2300 	strex	r3, r2, [r1]
 8006ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e6      	bne.n	8006e9a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	e853 3f00 	ldrex	r3, [r3]
 8006eda:	613b      	str	r3, [r7, #16]
   return(result);
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f023 0301 	bic.w	r3, r3, #1
 8006ee2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3308      	adds	r3, #8
 8006eea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006eec:	623a      	str	r2, [r7, #32]
 8006eee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	69f9      	ldr	r1, [r7, #28]
 8006ef2:	6a3a      	ldr	r2, [r7, #32]
 8006ef4:	e841 2300 	strex	r3, r2, [r1]
 8006ef8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1e5      	bne.n	8006ecc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2220      	movs	r2, #32
 8006f04:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e010      	b.n	8006f42 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	69da      	ldr	r2, [r3, #28]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	4013      	ands	r3, r2
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	bf0c      	ite	eq
 8006f30:	2301      	moveq	r3, #1
 8006f32:	2300      	movne	r3, #0
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	461a      	mov	r2, r3
 8006f38:	79fb      	ldrb	r3, [r7, #7]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	f43f af4a 	beq.w	8006dd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3770      	adds	r7, #112	; 0x70
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	f107 001c 	add.w	r0, r7, #28
 8006f58:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fa6f 	bl	800744c <USB_CoreReset>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d106      	bne.n	8006f86 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38
 8006f84:	e005      	b.n	8006f92 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f9e:	b004      	add	sp, #16
 8006fa0:	4770      	bx	lr

08006fa2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f023 0201 	bic.w	r2, r3, #1
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006fe0:	78fb      	ldrb	r3, [r7, #3]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d115      	bne.n	8007012 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ff2:	2001      	movs	r0, #1
 8006ff4:	f7fb fa8c 	bl	8002510 <HAL_Delay>
      ms++;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fa16 	bl	8007430 <USB_GetMode>
 8007004:	4603      	mov	r3, r0
 8007006:	2b01      	cmp	r3, #1
 8007008:	d01e      	beq.n	8007048 <USB_SetCurrentMode+0x84>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b31      	cmp	r3, #49	; 0x31
 800700e:	d9f0      	bls.n	8006ff2 <USB_SetCurrentMode+0x2e>
 8007010:	e01a      	b.n	8007048 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007012:	78fb      	ldrb	r3, [r7, #3]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d115      	bne.n	8007044 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007024:	2001      	movs	r0, #1
 8007026:	f7fb fa73 	bl	8002510 <HAL_Delay>
      ms++;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3301      	adds	r3, #1
 800702e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f9fd 	bl	8007430 <USB_GetMode>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d005      	beq.n	8007048 <USB_SetCurrentMode+0x84>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2b31      	cmp	r3, #49	; 0x31
 8007040:	d9f0      	bls.n	8007024 <USB_SetCurrentMode+0x60>
 8007042:	e001      	b.n	8007048 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e005      	b.n	8007054 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b32      	cmp	r3, #50	; 0x32
 800704c:	d101      	bne.n	8007052 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e000      	b.n	8007054 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800705c:	b084      	sub	sp, #16
 800705e:	b580      	push	{r7, lr}
 8007060:	b086      	sub	sp, #24
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800706a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007076:	2300      	movs	r3, #0
 8007078:	613b      	str	r3, [r7, #16]
 800707a:	e009      	b.n	8007090 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	3340      	adds	r3, #64	; 0x40
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	2200      	movs	r2, #0
 8007088:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	3301      	adds	r3, #1
 800708e:	613b      	str	r3, [r7, #16]
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	2b0e      	cmp	r3, #14
 8007094:	d9f2      	bls.n	800707c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007098:	2b00      	cmp	r3, #0
 800709a:	d11c      	bne.n	80070d6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070aa:	f043 0302 	orr.w	r3, r3, #2
 80070ae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	e005      	b.n	80070e2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070e8:	461a      	mov	r2, r3
 80070ea:	2300      	movs	r3, #0
 80070ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f4:	4619      	mov	r1, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070fc:	461a      	mov	r2, r3
 80070fe:	680b      	ldr	r3, [r1, #0]
 8007100:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007102:	2103      	movs	r1, #3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f959 	bl	80073bc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800710a:	2110      	movs	r1, #16
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f8f1 	bl	80072f4 <USB_FlushTxFifo>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f91d 	bl	800735c <USB_FlushRxFifo>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d001      	beq.n	800712c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007132:	461a      	mov	r2, r3
 8007134:	2300      	movs	r3, #0
 8007136:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800713e:	461a      	mov	r2, r3
 8007140:	2300      	movs	r3, #0
 8007142:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714a:	461a      	mov	r2, r3
 800714c:	2300      	movs	r3, #0
 800714e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007150:	2300      	movs	r3, #0
 8007152:	613b      	str	r3, [r7, #16]
 8007154:	e043      	b.n	80071de <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	015a      	lsls	r2, r3, #5
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	4413      	add	r3, r2
 800715e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007168:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800716c:	d118      	bne.n	80071a0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10a      	bne.n	800718a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007180:	461a      	mov	r2, r3
 8007182:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007186:	6013      	str	r3, [r2, #0]
 8007188:	e013      	b.n	80071b2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	4413      	add	r3, r2
 8007192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007196:	461a      	mov	r2, r3
 8007198:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	e008      	b.n	80071b2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ac:	461a      	mov	r2, r3
 80071ae:	2300      	movs	r3, #0
 80071b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071be:	461a      	mov	r2, r3
 80071c0:	2300      	movs	r3, #0
 80071c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d0:	461a      	mov	r2, r3
 80071d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	3301      	adds	r3, #1
 80071dc:	613b      	str	r3, [r7, #16]
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d3b7      	bcc.n	8007156 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071e6:	2300      	movs	r3, #0
 80071e8:	613b      	str	r3, [r7, #16]
 80071ea:	e043      	b.n	8007274 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007202:	d118      	bne.n	8007236 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10a      	bne.n	8007220 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	015a      	lsls	r2, r3, #5
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	4413      	add	r3, r2
 8007212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007216:	461a      	mov	r2, r3
 8007218:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	e013      	b.n	8007248 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722c:	461a      	mov	r2, r3
 800722e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	e008      	b.n	8007248 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	4413      	add	r3, r2
 800723e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007242:	461a      	mov	r2, r3
 8007244:	2300      	movs	r3, #0
 8007246:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007254:	461a      	mov	r2, r3
 8007256:	2300      	movs	r3, #0
 8007258:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007266:	461a      	mov	r2, r3
 8007268:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800726c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	3301      	adds	r3, #1
 8007272:	613b      	str	r3, [r7, #16]
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	429a      	cmp	r2, r3
 800727a:	d3b7      	bcc.n	80071ec <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800728a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800728e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800729c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	f043 0210 	orr.w	r2, r3, #16
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	699a      	ldr	r2, [r3, #24]
 80072ae:	4b10      	ldr	r3, [pc, #64]	; (80072f0 <USB_DevInit+0x294>)
 80072b0:	4313      	orrs	r3, r2
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80072b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d005      	beq.n	80072c8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	f043 0208 	orr.w	r2, r3, #8
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80072c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d107      	bne.n	80072de <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072d6:	f043 0304 	orr.w	r3, r3, #4
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80072de:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3718      	adds	r7, #24
 80072e4:	46bd      	mov	sp, r7
 80072e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072ea:	b004      	add	sp, #16
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	803c3800 	.word	0x803c3800

080072f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3301      	adds	r3, #1
 8007306:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4a13      	ldr	r2, [pc, #76]	; (8007358 <USB_FlushTxFifo+0x64>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d901      	bls.n	8007314 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e01b      	b.n	800734c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	daf2      	bge.n	8007302 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	019b      	lsls	r3, r3, #6
 8007324:	f043 0220 	orr.w	r2, r3, #32
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3301      	adds	r3, #1
 8007330:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	4a08      	ldr	r2, [pc, #32]	; (8007358 <USB_FlushTxFifo+0x64>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d901      	bls.n	800733e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e006      	b.n	800734c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	f003 0320 	and.w	r3, r3, #32
 8007346:	2b20      	cmp	r3, #32
 8007348:	d0f0      	beq.n	800732c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	00030d40 	.word	0x00030d40

0800735c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3301      	adds	r3, #1
 800736c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4a11      	ldr	r2, [pc, #68]	; (80073b8 <USB_FlushRxFifo+0x5c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d901      	bls.n	800737a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e018      	b.n	80073ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	2b00      	cmp	r3, #0
 8007380:	daf2      	bge.n	8007368 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007382:	2300      	movs	r3, #0
 8007384:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2210      	movs	r2, #16
 800738a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	3301      	adds	r3, #1
 8007390:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4a08      	ldr	r2, [pc, #32]	; (80073b8 <USB_FlushRxFifo+0x5c>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d901      	bls.n	800739e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e006      	b.n	80073ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	f003 0310 	and.w	r3, r3, #16
 80073a6:	2b10      	cmp	r3, #16
 80073a8:	d0f0      	beq.n	800738c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	00030d40 	.word	0x00030d40

080073bc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	78fb      	ldrb	r3, [r7, #3]
 80073d6:	68f9      	ldr	r1, [r7, #12]
 80073d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073dc:	4313      	orrs	r3, r2
 80073de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b085      	sub	sp, #20
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007408:	f023 0303 	bic.w	r3, r3, #3
 800740c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800741c:	f043 0302 	orr.w	r3, r3, #2
 8007420:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	f003 0301 	and.w	r3, r3, #1
}
 8007440:	4618      	mov	r0, r3
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	3301      	adds	r3, #1
 800745c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4a13      	ldr	r2, [pc, #76]	; (80074b0 <USB_CoreReset+0x64>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d901      	bls.n	800746a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e01b      	b.n	80074a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	daf2      	bge.n	8007458 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	f043 0201 	orr.w	r2, r3, #1
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	3301      	adds	r3, #1
 8007486:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4a09      	ldr	r2, [pc, #36]	; (80074b0 <USB_CoreReset+0x64>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d901      	bls.n	8007494 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007490:	2303      	movs	r3, #3
 8007492:	e006      	b.n	80074a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	2b01      	cmp	r3, #1
 800749e:	d0f0      	beq.n	8007482 <USB_CoreReset+0x36>

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	00030d40 	.word	0x00030d40

080074b4 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt) 
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 80074be:	2300      	movs	r3, #0
 80074c0:	73fb      	strb	r3, [r7, #15]
 80074c2:	2300      	movs	r3, #0
 80074c4:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 80074c6:	2300      	movs	r3, #0
 80074c8:	60bb      	str	r3, [r7, #8]
    
    if (*ptr == '-') {                                      /* Check for minus character */
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2b2d      	cmp	r3, #45	; 0x2d
 80074d0:	d119      	bne.n	8007506 <ParseNumber+0x52>
        minus = 1;
 80074d2:	2301      	movs	r3, #1
 80074d4:	73fb      	strb	r3, [r7, #15]
        ptr++;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3301      	adds	r3, #1
 80074da:	607b      	str	r3, [r7, #4]
        i++;
 80074dc:	7bbb      	ldrb	r3, [r7, #14]
 80074de:	3301      	adds	r3, #1
 80074e0:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 80074e2:	e010      	b.n	8007506 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	4613      	mov	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	461a      	mov	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	3b30      	subs	r3, #48	; 0x30
 80074f6:	4413      	add	r3, r2
 80074f8:	60bb      	str	r3, [r7, #8]
        ptr++;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	3301      	adds	r3, #1
 80074fe:	607b      	str	r3, [r7, #4]
        i++;
 8007500:	7bbb      	ldrb	r3, [r7, #14]
 8007502:	3301      	adds	r3, #1
 8007504:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	2b2f      	cmp	r3, #47	; 0x2f
 800750c:	d903      	bls.n	8007516 <ParseNumber+0x62>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	2b39      	cmp	r3, #57	; 0x39
 8007514:	d9e6      	bls.n	80074e4 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d002      	beq.n	8007522 <ParseNumber+0x6e>
        *cnt = i;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	7bba      	ldrb	r2, [r7, #14]
 8007520:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 8007522:	7bfb      	ldrb	r3, [r7, #15]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <ParseNumber+0x7a>
        return 0 - sum;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	425b      	negs	r3, r3
 800752c:	e000      	b.n	8007530 <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 800752e:	68bb      	ldr	r3, [r7, #8]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr) 
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8007546:	2300      	movs	r3, #0
 8007548:	73fb      	strb	r3, [r7, #15]
  
  while(* ptr) { 
 800754a:	e019      	b.n	8007580 <ParseIP+0x44>
    hexcnt = 1;
 800754c:	2301      	movs	r3, #1
 800754e:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	2b2e      	cmp	r3, #46	; 0x2e
 8007556:	d00e      	beq.n	8007576 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8007558:	f107 030e 	add.w	r3, r7, #14
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff ffa8 	bl	80074b4 <ParseNumber>
 8007564:	4601      	mov	r1, r0
 8007566:	7bfb      	ldrb	r3, [r7, #15]
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	73fa      	strb	r2, [r7, #15]
 800756c:	461a      	mov	r2, r3
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	4413      	add	r3, r2
 8007572:	b2ca      	uxtb	r2, r1
 8007574:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8007576:	7bbb      	ldrb	r3, [r7, #14]
 8007578:	461a      	mov	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4413      	add	r3, r2
 800757e:	607b      	str	r3, [r7, #4]
  while(* ptr) { 
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1e1      	bne.n	800754c <ParseIP+0x10>
  }
}
 8007588:	bf00      	nop
 800758a:	bf00      	nop
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
	...

08007594 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	72fb      	strb	r3, [r7, #11]
  
  ptr = strtok((char *)pdata + 2, ",");  
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	3302      	adds	r3, #2
 80075a6:	4934      	ldr	r1, [pc, #208]	; (8007678 <AT_ParseInfo+0xe4>)
 80075a8:	4618      	mov	r0, r3
 80075aa:	f001 f9db 	bl	8008964 <strtok>
 80075ae:	60f8      	str	r0, [r7, #12]
  
  while (ptr != NULL){
 80075b0:	e05a      	b.n	8007668 <AT_ParseInfo+0xd4>
    switch (num++) { 
 80075b2:	7afb      	ldrb	r3, [r7, #11]
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	72fa      	strb	r2, [r7, #11]
 80075b8:	2b06      	cmp	r3, #6
 80075ba:	d84f      	bhi.n	800765c <AT_ParseInfo+0xc8>
 80075bc:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <AT_ParseInfo+0x30>)
 80075be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c2:	bf00      	nop
 80075c4:	080075e1 	.word	0x080075e1
 80075c8:	080075ef 	.word	0x080075ef
 80075cc:	080075ff 	.word	0x080075ff
 80075d0:	0800760f 	.word	0x0800760f
 80075d4:	0800761f 	.word	0x0800761f
 80075d8:	0800762f 	.word	0x0800762f
 80075dc:	08007643 	.word	0x08007643
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2220      	movs	r2, #32
 80075e4:	68f9      	ldr	r1, [r7, #12]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f001 f992 	bl	8008910 <strncpy>
      break;
 80075ec:	e037      	b.n	800765e <AT_ParseInfo+0xca>
      
    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	3320      	adds	r3, #32
 80075f2:	2210      	movs	r2, #16
 80075f4:	68f9      	ldr	r1, [r7, #12]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f001 f98a 	bl	8008910 <strncpy>
      break;
 80075fc:	e02f      	b.n	800765e <AT_ParseInfo+0xca>
      
    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);      
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	3330      	adds	r3, #48	; 0x30
 8007602:	2210      	movs	r2, #16
 8007604:	68f9      	ldr	r1, [r7, #12]
 8007606:	4618      	mov	r0, r3
 8007608:	f001 f982 	bl	8008910 <strncpy>
      break;
 800760c:	e027      	b.n	800765e <AT_ParseInfo+0xca>
      
    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);   
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	3340      	adds	r3, #64	; 0x40
 8007612:	2210      	movs	r2, #16
 8007614:	68f9      	ldr	r1, [r7, #12]
 8007616:	4618      	mov	r0, r3
 8007618:	f001 f97a 	bl	8008910 <strncpy>
      break;
 800761c:	e01f      	b.n	800765e <AT_ParseInfo+0xca>
      
    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);        
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3350      	adds	r3, #80	; 0x50
 8007622:	2210      	movs	r2, #16
 8007624:	68f9      	ldr	r1, [r7, #12]
 8007626:	4618      	mov	r0, r3
 8007628:	f001 f972 	bl	8008910 <strncpy>
      break;
 800762c:	e017      	b.n	800765e <AT_ParseInfo+0xca>
      
    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 800762e:	2100      	movs	r1, #0
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f7ff ff3f 	bl	80074b4 <ParseNumber>
 8007636:	4603      	mov	r3, r0
 8007638:	461a      	mov	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      break;      
 8007640:	e00d      	b.n	800765e <AT_ParseInfo+0xca>
      
    case 6:
      ptr = strtok(ptr, "\r"); 
 8007642:	490e      	ldr	r1, [pc, #56]	; (800767c <AT_ParseInfo+0xe8>)
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f001 f98d 	bl	8008964 <strtok>
 800764a:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3360      	adds	r3, #96	; 0x60
 8007650:	2220      	movs	r2, #32
 8007652:	68f9      	ldr	r1, [r7, #12]
 8007654:	4618      	mov	r0, r3
 8007656:	f001 f95b 	bl	8008910 <strncpy>
      break;
 800765a:	e000      	b.n	800765e <AT_ParseInfo+0xca>
      
    default: break;
 800765c:	bf00      	nop
    }
    ptr = strtok(NULL, ","); 
 800765e:	4906      	ldr	r1, [pc, #24]	; (8007678 <AT_ParseInfo+0xe4>)
 8007660:	2000      	movs	r0, #0
 8007662:	f001 f97f 	bl	8008964 <strtok>
 8007666:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1a1      	bne.n	80075b2 <AT_ParseInfo+0x1e>
  }
}
 800766e:	bf00      	nop
 8007670:	bf00      	nop
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	0800a040 	.word	0x0800a040
 800767c:	0800a044 	.word	0x0800a044

08007680 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800768a:	2300      	movs	r3, #0
 800768c:	73fb      	strb	r3, [r7, #15]
  char *ptr;
 
  ptr = strtok(pdata + 2, ",");   
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3302      	adds	r3, #2
 8007692:	4952      	ldr	r1, [pc, #328]	; (80077dc <AT_ParseConnSettings+0x15c>)
 8007694:	4618      	mov	r0, r3
 8007696:	f001 f965 	bl	8008964 <strtok>
 800769a:	60b8      	str	r0, [r7, #8]
  
  while (ptr != NULL) {
 800769c:	e095      	b.n	80077ca <AT_ParseConnSettings+0x14a>
    switch (num++) {      
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	73fa      	strb	r2, [r7, #15]
 80076a4:	2b0b      	cmp	r3, #11
 80076a6:	d87f      	bhi.n	80077a8 <AT_ParseConnSettings+0x128>
 80076a8:	a201      	add	r2, pc, #4	; (adr r2, 80076b0 <AT_ParseConnSettings+0x30>)
 80076aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ae:	bf00      	nop
 80076b0:	080076e1 	.word	0x080076e1
 80076b4:	080076ef 	.word	0x080076ef
 80076b8:	080076ff 	.word	0x080076ff
 80076bc:	08007713 	.word	0x08007713
 80076c0:	08007727 	.word	0x08007727
 80076c4:	0800773b 	.word	0x0800773b
 80076c8:	08007749 	.word	0x08007749
 80076cc:	08007757 	.word	0x08007757
 80076d0:	08007765 	.word	0x08007765
 80076d4:	08007773 	.word	0x08007773
 80076d8:	08007781 	.word	0x08007781
 80076dc:	08007795 	.word	0x08007795
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1); 
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2221      	movs	r2, #33	; 0x21
 80076e4:	68b9      	ldr	r1, [r7, #8]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f001 f912 	bl	8008910 <strncpy>
      break;
 80076ec:	e05d      	b.n	80077aa <AT_ParseConnSettings+0x12a>
      
    case 1: 
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1); 
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	3321      	adds	r3, #33	; 0x21
 80076f2:	2221      	movs	r2, #33	; 0x21
 80076f4:	68b9      	ldr	r1, [r7, #8]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f001 f90a 	bl	8008910 <strncpy>
      break;
 80076fc:	e055      	b.n	80077aa <AT_ParseConnSettings+0x12a>
      
    case 2: 
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80076fe:	2100      	movs	r1, #0
 8007700:	68b8      	ldr	r0, [r7, #8]
 8007702:	f7ff fed7 	bl	80074b4 <ParseNumber>
 8007706:	4603      	mov	r3, r0
 8007708:	b2da      	uxtb	r2, r3
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;   
 8007710:	e04b      	b.n	80077aa <AT_ParseConnSettings+0x12a>

    case 3: 
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8007712:	2100      	movs	r1, #0
 8007714:	68b8      	ldr	r0, [r7, #8]
 8007716:	f7ff fecd 	bl	80074b4 <ParseNumber>
 800771a:	4603      	mov	r3, r0
 800771c:	b2da      	uxtb	r2, r3
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8007724:	e041      	b.n	80077aa <AT_ParseConnSettings+0x12a>
      
    case 4: 
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8007726:	2100      	movs	r1, #0
 8007728:	68b8      	ldr	r0, [r7, #8]
 800772a:	f7ff fec3 	bl	80074b4 <ParseNumber>
 800772e:	4603      	mov	r3, r0
 8007730:	b2da      	uxtb	r2, r3
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;      
 8007738:	e037      	b.n	80077aa <AT_ParseConnSettings+0x12a>
      
    case 5: 
      ParseIP(ptr, NetSettings->IP_Addr);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	3348      	adds	r3, #72	; 0x48
 800773e:	4619      	mov	r1, r3
 8007740:	68b8      	ldr	r0, [r7, #8]
 8007742:	f7ff fefb 	bl	800753c <ParseIP>
      break; 
 8007746:	e030      	b.n	80077aa <AT_ParseConnSettings+0x12a>
      
    case 6: 
      ParseIP(ptr, NetSettings->IP_Mask);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	334c      	adds	r3, #76	; 0x4c
 800774c:	4619      	mov	r1, r3
 800774e:	68b8      	ldr	r0, [r7, #8]
 8007750:	f7ff fef4 	bl	800753c <ParseIP>
      break;      
 8007754:	e029      	b.n	80077aa <AT_ParseConnSettings+0x12a>
      
    case 7: 
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	3350      	adds	r3, #80	; 0x50
 800775a:	4619      	mov	r1, r3
 800775c:	68b8      	ldr	r0, [r7, #8]
 800775e:	f7ff feed 	bl	800753c <ParseIP>
      break; 
 8007762:	e022      	b.n	80077aa <AT_ParseConnSettings+0x12a>
      
    case 8: 
      ParseIP(ptr, NetSettings->DNS1);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	3354      	adds	r3, #84	; 0x54
 8007768:	4619      	mov	r1, r3
 800776a:	68b8      	ldr	r0, [r7, #8]
 800776c:	f7ff fee6 	bl	800753c <ParseIP>
      break;      
 8007770:	e01b      	b.n	80077aa <AT_ParseConnSettings+0x12a>
      
    case 9: 
      ParseIP(ptr, NetSettings->DNS2);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	3358      	adds	r3, #88	; 0x58
 8007776:	4619      	mov	r1, r3
 8007778:	68b8      	ldr	r0, [r7, #8]
 800777a:	f7ff fedf 	bl	800753c <ParseIP>
      break; 
 800777e:	e014      	b.n	80077aa <AT_ParseConnSettings+0x12a>
      
    case 10: 
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8007780:	2100      	movs	r1, #0
 8007782:	68b8      	ldr	r0, [r7, #8]
 8007784:	f7ff fe96 	bl	80074b4 <ParseNumber>
 8007788:	4603      	mov	r3, r0
 800778a:	b2da      	uxtb	r2, r3
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;  
 8007792:	e00a      	b.n	80077aa <AT_ParseConnSettings+0x12a>
      
    case 11: 
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8007794:	2100      	movs	r1, #0
 8007796:	68b8      	ldr	r0, [r7, #8]
 8007798:	f7ff fe8c 	bl	80074b4 <ParseNumber>
 800779c:	4603      	mov	r3, r0
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;  
 80077a6:	e000      	b.n	80077aa <AT_ParseConnSettings+0x12a>

    default: 
      break;
 80077a8:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80077aa:	490c      	ldr	r1, [pc, #48]	; (80077dc <AT_ParseConnSettings+0x15c>)
 80077ac:	2000      	movs	r0, #0
 80077ae:	f001 f8d9 	bl	8008964 <strtok>
 80077b2:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d007      	beq.n	80077ca <AT_ParseConnSettings+0x14a>
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	3b01      	subs	r3, #1
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b2c      	cmp	r3, #44	; 0x2c
 80077c2:	d102      	bne.n	80077ca <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	3301      	adds	r3, #1
 80077c8:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f47f af66 	bne.w	800769e <AT_ParseConnSettings+0x1e>
    }
  }
}
 80077d2:	bf00      	nop
 80077d4:	bf00      	nop
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	0800a040 	.word	0x0800a040

080077e0 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 80077e0:	b590      	push	{r4, r7, lr}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 80077f2:	68b8      	ldr	r0, [r7, #8]
 80077f4:	f7f8 fcec 	bl	80001d0 <strlen>
 80077f8:	4603      	mov	r3, r0
 80077fa:	b299      	uxth	r1, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 8007802:	461a      	mov	r2, r3
 8007804:	68b8      	ldr	r0, [r7, #8]
 8007806:	47a0      	blx	r4
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	dd26      	ble.n	800785c <AT_ExecuteCommand+0x7c>
  {
    int16_t n=Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 800781a:	2100      	movs	r1, #0
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	4798      	blx	r3
 8007820:	4603      	mov	r3, r0
 8007822:	82fb      	strh	r3, [r7, #22]
    if(n > 0)
 8007824:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007828:	2b00      	cmp	r3, #0
 800782a:	dd17      	ble.n	800785c <AT_ExecuteCommand+0x7c>
    {
      *(pdata+n)=0;
 800782c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	4413      	add	r3, r2
 8007834:	2200      	movs	r2, #0
 8007836:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8007838:	490b      	ldr	r1, [pc, #44]	; (8007868 <AT_ExecuteCommand+0x88>)
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f001 f87b 	bl	8008936 <strstr>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <AT_ExecuteCommand+0x6a>
      {
        return ES_WIFI_STATUS_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	e009      	b.n	800785e <AT_ExecuteCommand+0x7e>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 800784a:	4908      	ldr	r1, [pc, #32]	; (800786c <AT_ExecuteCommand+0x8c>)
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 f872 	bl	8008936 <strstr>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <AT_ExecuteCommand+0x7c>
      {
        return ES_WIFI_STATUS_ERROR;
 8007858:	2302      	movs	r3, #2
 800785a:	e000      	b.n	800785e <AT_ExecuteCommand+0x7e>
      }      
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 800785c:	2304      	movs	r3, #4
}
 800785e:	4618      	mov	r0, r3
 8007860:	371c      	adds	r7, #28
 8007862:	46bd      	mov	sp, r7
 8007864:	bd90      	pop	{r4, r7, pc}
 8007866:	bf00      	nop
 8007868:	0800a048 	.word	0x0800a048
 800786c:	0800a054 	.word	0x0800a054

08007870 <AT_RequestSendData>:
  * @param  len: binary data length
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{      
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
 800787c:	807b      	strh	r3, [r7, #2]
  /* can send only even number of byte on first send */
  uint16_t n=strlen((char*)cmd);
 800787e:	68b8      	ldr	r0, [r7, #8]
 8007880:	f7f8 fca6 	bl	80001d0 <strlen>
 8007884:	4603      	mov	r3, r0
 8007886:	82fb      	strh	r3, [r7, #22]
  if (n &1 ) return ES_WIFI_STATUS_ERROR;
 8007888:	8afb      	ldrh	r3, [r7, #22]
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <AT_RequestSendData+0x26>
 8007892:	2302      	movs	r3, #2
 8007894:	e047      	b.n	8007926 <AT_RequestSendData+0xb6>
  if(Obj->fops.IO_Send(cmd, n, Obj->Timeout) == n)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 80078a2:	8af9      	ldrh	r1, [r7, #22]
 80078a4:	68b8      	ldr	r0, [r7, #8]
 80078a6:	4798      	blx	r3
 80078a8:	4603      	mov	r3, r0
 80078aa:	461a      	mov	r2, r3
 80078ac:	8afb      	ldrh	r3, [r7, #22]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d138      	bne.n	8007924 <AT_RequestSendData+0xb4>
  {
    int16_t n=Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 80078be:	8879      	ldrh	r1, [r7, #2]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	4798      	blx	r3
 80078c4:	4603      	mov	r3, r0
 80078c6:	82bb      	strh	r3, [r7, #20]
    if(n == len)
 80078c8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80078cc:	887b      	ldrh	r3, [r7, #2]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d126      	bne.n	8007920 <AT_RequestSendData+0xb0>
    {
      n = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 80078de:	2100      	movs	r1, #0
 80078e0:	6a38      	ldr	r0, [r7, #32]
 80078e2:	4798      	blx	r3
 80078e4:	4603      	mov	r3, r0
 80078e6:	82bb      	strh	r3, [r7, #20]
      if(n > 0)
 80078e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	dd19      	ble.n	8007924 <AT_RequestSendData+0xb4>
      {
        *(pdata+n)=0;
 80078f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80078f4:	6a3a      	ldr	r2, [r7, #32]
 80078f6:	4413      	add	r3, r2
 80078f8:	2200      	movs	r2, #0
 80078fa:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 80078fc:	490c      	ldr	r1, [pc, #48]	; (8007930 <AT_RequestSendData+0xc0>)
 80078fe:	6a38      	ldr	r0, [r7, #32]
 8007900:	f001 f819 	bl	8008936 <strstr>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <AT_RequestSendData+0x9e>
        {
          return ES_WIFI_STATUS_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	e00b      	b.n	8007926 <AT_RequestSendData+0xb6>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800790e:	4909      	ldr	r1, [pc, #36]	; (8007934 <AT_RequestSendData+0xc4>)
 8007910:	6a38      	ldr	r0, [r7, #32]
 8007912:	f001 f810 	bl	8008936 <strstr>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d003      	beq.n	8007924 <AT_RequestSendData+0xb4>
        {
          return ES_WIFI_STATUS_ERROR;
 800791c:	2302      	movs	r3, #2
 800791e:	e002      	b.n	8007926 <AT_RequestSendData+0xb6>
        }      
      }
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8007920:	2302      	movs	r3, #2
 8007922:	e000      	b.n	8007926 <AT_RequestSendData+0xb6>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8007924:	2304      	movs	r3, #4
}
 8007926:	4618      	mov	r0, r3
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	0800a048 	.word	0x0800a048
 8007934:	0800a054 	.word	0x0800a054

08007938 <ReceiveShortDataLen>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t ReceiveShortDataLen(ES_WIFIObject_t *Obj,  char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	603b      	str	r3, [r7, #0]
 8007944:	4613      	mov	r3, r2
 8007946:	80fb      	strh	r3, [r7, #6]
   uint16_t len;
   
   len = Obj->fops.IO_Receive(Obj->CmdData, Reqlen + AT_OK_STRING_LEN , Obj->Timeout);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	f502 7090 	add.w	r0, r2, #288	; 0x120
 8007954:	88fa      	ldrh	r2, [r7, #6]
 8007956:	3208      	adds	r2, #8
 8007958:	b291      	uxth	r1, r2
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 8007960:	4798      	blx	r3
 8007962:	4603      	mov	r3, r0
 8007964:	82fb      	strh	r3, [r7, #22]
   
   if (len >= AT_OK_STRING_LEN) 
 8007966:	8afb      	ldrh	r3, [r7, #22]
 8007968:	2b07      	cmp	r3, #7
 800796a:	d91c      	bls.n	80079a6 <ReceiveShortDataLen+0x6e>
   {
     if(strstr((char *)Obj->CmdData + len - AT_OK_STRING_LEN, AT_OK_STRING))
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8007972:	8afb      	ldrh	r3, [r7, #22]
 8007974:	3b08      	subs	r3, #8
 8007976:	4413      	add	r3, r2
 8007978:	490d      	ldr	r1, [pc, #52]	; (80079b0 <ReceiveShortDataLen+0x78>)
 800797a:	4618      	mov	r0, r3
 800797c:	f000 ffdb 	bl	8008936 <strstr>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00f      	beq.n	80079a6 <ReceiveShortDataLen+0x6e>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8007986:	8afb      	ldrh	r3, [r7, #22]
 8007988:	3b08      	subs	r3, #8
 800798a:	b29a      	uxth	r2, r3
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	801a      	strh	r2, [r3, #0]
       memcpy(pdata, Obj->CmdData, *ReadData);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	68b8      	ldr	r0, [r7, #8]
 800799e:	f000 ff4d 	bl	800883c <memcpy>
       return ES_WIFI_STATUS_OK; 
 80079a2:	2300      	movs	r3, #0
 80079a4:	e000      	b.n	80079a8 <ReceiveShortDataLen+0x70>
     }
   }
   return ES_WIFI_STATUS_IO_ERROR;
 80079a6:	2304      	movs	r3, #4
   
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	0800a048 	.word	0x0800a048

080079b4 <ReceiveLongDataLen>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t ReceiveLongDataLen(ES_WIFIObject_t *Obj,  char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	603b      	str	r3, [r7, #0]
 80079c0:	4613      	mov	r3, r2
 80079c2:	80fb      	strh	r3, [r7, #6]
  uint16_t len, rlen;
  
  len = Obj->fops.IO_Receive((uint8_t *)pdata, Reqlen, Obj->Timeout);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 80079d0:	88f9      	ldrh	r1, [r7, #6]
 80079d2:	68b8      	ldr	r0, [r7, #8]
 80079d4:	4798      	blx	r3
 80079d6:	4603      	mov	r3, r0
 80079d8:	82fb      	strh	r3, [r7, #22]
  
  if (len >= AT_OK_STRING_LEN)  
 80079da:	8afb      	ldrh	r3, [r7, #22]
 80079dc:	2b07      	cmp	r3, #7
 80079de:	d941      	bls.n	8007a64 <ReceiveLongDataLen+0xb0>
  {
    if(strstr((char *)pdata + len - AT_OK_STRING_LEN, AT_OK_STRING))
 80079e0:	8afb      	ldrh	r3, [r7, #22]
 80079e2:	3b08      	subs	r3, #8
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	4413      	add	r3, r2
 80079e8:	4921      	ldr	r1, [pc, #132]	; (8007a70 <ReceiveLongDataLen+0xbc>)
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 ffa3 	bl	8008936 <strstr>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d006      	beq.n	8007a04 <ReceiveLongDataLen+0x50>
    {
      *ReadData = len - AT_OK_STRING_LEN;
 80079f6:	8afb      	ldrh	r3, [r7, #22]
 80079f8:	3b08      	subs	r3, #8
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	801a      	strh	r2, [r3, #0]
      return ES_WIFI_STATUS_OK; 
 8007a00:	2300      	movs	r3, #0
 8007a02:	e030      	b.n	8007a66 <ReceiveLongDataLen+0xb2>
    }
    else
    {     
      memcpy(Obj->CmdData, pdata + len - AT_OK_STRING_LEN, AT_OK_STRING_LEN);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8007a0a:	8afb      	ldrh	r3, [r7, #22]
 8007a0c:	3b08      	subs	r3, #8
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	4413      	add	r3, r2
 8007a12:	2208      	movs	r2, #8
 8007a14:	4619      	mov	r1, r3
 8007a16:	f000 ff11 	bl	800883c <memcpy>
      rlen = Obj->fops.IO_Receive(Obj->CmdData + AT_OK_STRING_LEN, AT_OK_STRING_LEN, Obj->Timeout);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	f502 7290 	add.w	r2, r2, #288	; 0x120
 8007a26:	f102 0008 	add.w	r0, r2, #8
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 8007a30:	2108      	movs	r1, #8
 8007a32:	4798      	blx	r3
 8007a34:	4603      	mov	r3, r0
 8007a36:	82bb      	strh	r3, [r7, #20]
      
      if(strstr((char *) Obj->CmdData + rlen, AT_OK_STRING))
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8007a3e:	8abb      	ldrh	r3, [r7, #20]
 8007a40:	4413      	add	r3, r2
 8007a42:	490b      	ldr	r1, [pc, #44]	; (8007a70 <ReceiveLongDataLen+0xbc>)
 8007a44:	4618      	mov	r0, r3
 8007a46:	f000 ff76 	bl	8008936 <strstr>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d009      	beq.n	8007a64 <ReceiveLongDataLen+0xb0>
      {
        *ReadData = len + rlen - AT_OK_STRING_LEN;
 8007a50:	8afa      	ldrh	r2, [r7, #22]
 8007a52:	8abb      	ldrh	r3, [r7, #20]
 8007a54:	4413      	add	r3, r2
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	3b08      	subs	r3, #8
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	801a      	strh	r2, [r3, #0]
        return ES_WIFI_STATUS_OK; 
 8007a60:	2300      	movs	r3, #0
 8007a62:	e000      	b.n	8007a66 <ReceiveLongDataLen+0xb2>
      }
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8007a64:	2304      	movs	r3, #4
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	0800a048 	.word	0x0800a048

08007a74 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8007a74:	b590      	push	{r4, r7, lr}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	807b      	strh	r3, [r7, #2]
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 8007a88:	68b8      	ldr	r0, [r7, #8]
 8007a8a:	f7f8 fba1 	bl	80001d0 <strlen>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	b299      	uxth	r1, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 8007a98:	461a      	mov	r2, r3
 8007a9a:	68b8      	ldr	r0, [r7, #8]
 8007a9c:	47a0      	blx	r4
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	dd23      	ble.n	8007aec <AT_RequestReceiveData+0x78>
  {
    if(Obj->fops.IO_Receive(Obj->CmdData, 2, Obj->Timeout) == 2) /* Read Prompt */
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	f502 7090 	add.w	r0, r2, #288	; 0x120
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 8007ab6:	2102      	movs	r1, #2
 8007ab8:	4798      	blx	r3
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d115      	bne.n	8007aec <AT_RequestReceiveData+0x78>
    {
      if (Reqlen <= AT_OK_STRING_LEN) return ReceiveShortDataLen(Obj,pdata, Reqlen ,ReadData);
 8007ac0:	887b      	ldrh	r3, [r7, #2]
 8007ac2:	2b08      	cmp	r3, #8
 8007ac4:	d807      	bhi.n	8007ad6 <AT_RequestReceiveData+0x62>
 8007ac6:	887a      	ldrh	r2, [r7, #2]
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f7ff ff33 	bl	8007938 <ReceiveShortDataLen>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	e00b      	b.n	8007aee <AT_RequestReceiveData+0x7a>
      if (Reqlen >  AT_OK_STRING_LEN) return ReceiveLongDataLen(Obj,pdata, Reqlen ,ReadData);
 8007ad6:	887b      	ldrh	r3, [r7, #2]
 8007ad8:	2b08      	cmp	r3, #8
 8007ada:	d907      	bls.n	8007aec <AT_RequestReceiveData+0x78>
 8007adc:	887a      	ldrh	r2, [r7, #2]
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	6879      	ldr	r1, [r7, #4]
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f7ff ff66 	bl	80079b4 <ReceiveLongDataLen>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	e000      	b.n	8007aee <AT_RequestReceiveData+0x7a>
    }
  }  
  return ES_WIFI_STATUS_IO_ERROR;
 8007aec:	2304      	movs	r3, #4
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd90      	pop	{r4, r7, pc}
	...

08007af8 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8007b00:	2302      	movs	r3, #2
 8007b02:	73fb      	strb	r3, [r7, #15]
  
  Obj->Timeout = ES_WIFI_TIMEOUT;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b0a:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
  
  if (Obj->fops.IO_Init() == 0)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007b14:	4798      	blx	r3
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d113      	bne.n	8007b44 <ES_WIFI_Init+0x4c>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007b22:	461a      	mov	r2, r3
 8007b24:	490a      	ldr	r1, [pc, #40]	; (8007b50 <ES_WIFI_Init+0x58>)
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7ff fe5a 	bl	80077e0 <AT_ExecuteCommand>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	73fb      	strb	r3, [r7, #15]
    
    if(ret == ES_WIFI_STATUS_OK)
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d106      	bne.n	8007b44 <ES_WIFI_Init+0x4c>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff fd28 	bl	8007594 <AT_ParseInfo>
    }
  }
  return ret;
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	0800a05c 	.word	0x0800a05c

08007b54 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,  
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
 8007b60:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00b      	beq.n	8007b80 <ES_WIFI_RegisterBusIO+0x2c>
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d008      	beq.n	8007b80 <ES_WIFI_RegisterBusIO+0x2c>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d005      	beq.n	8007b80 <ES_WIFI_RegisterBusIO+0x2c>
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <ES_WIFI_RegisterBusIO+0x2c>
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8007b80:	2302      	movs	r3, #2
 8007b82:	e010      	b.n	8007ba6 <ES_WIFI_RegisterBusIO+0x52>
  }

  Obj->fops.IO_Init = IO_Init;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  Obj->fops.IO_Send = IO_Send;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Receive = IO_Receive;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  Obj->fops.IO_Delay = IO_Delay;  
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  
  return ES_WIFI_STATUS_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
	...

08007bb4 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID, 
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
 8007bc0:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	4932      	ldr	r1, [pc, #200]	; (8007c94 <ES_WIFI_Connect+0xe0>)
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 fe7f 	bl	80088d0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007bde:	461a      	mov	r2, r3
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f7ff fdfd 	bl	80077e0 <AT_ExecuteCommand>
 8007be6:	4603      	mov	r3, r0
 8007be8:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8007bea:	7dfb      	ldrb	r3, [r7, #23]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d14b      	bne.n	8007c88 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	4927      	ldr	r1, [pc, #156]	; (8007c98 <ES_WIFI_Connect+0xe4>)
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 fe68 	bl	80088d0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f7ff fde6 	bl	80077e0 <AT_ExecuteCommand>
 8007c14:	4603      	mov	r3, r0
 8007c16:	75fb      	strb	r3, [r7, #23]
    
    if(ret == ES_WIFI_STATUS_OK)
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d134      	bne.n	8007c88 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	78fa      	ldrb	r2, [r7, #3]
 8007c22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007c2c:	78fa      	ldrb	r2, [r7, #3]
 8007c2e:	491b      	ldr	r1, [pc, #108]	; (8007c9c <ES_WIFI_Connect+0xe8>)
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 fe4d 	bl	80088d0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007c42:	461a      	mov	r2, r3
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f7ff fdcb 	bl	80077e0 <AT_ExecuteCommand>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	75fb      	strb	r3, [r7, #23]
      
      if(ret == ES_WIFI_STATUS_OK)
 8007c4e:	7dfb      	ldrb	r3, [r7, #23]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d119      	bne.n	8007c88 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007c5a:	4911      	ldr	r1, [pc, #68]	; (8007ca0 <ES_WIFI_Connect+0xec>)
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 fe37 	bl	80088d0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);  
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007c6e:	461a      	mov	r2, r3
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f7ff fdb5 	bl	80077e0 <AT_ExecuteCommand>
 8007c76:	4603      	mov	r3, r0
 8007c78:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8007c7a:	7dfb      	ldrb	r3, [r7, #23]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d103      	bne.n	8007c88 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
        }
      }    
    }
  }
  return ret;
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	0800a068 	.word	0x0800a068
 8007c98:	0800a070 	.word	0x0800a070
 8007c9c:	0800a078 	.word	0x0800a078
 8007ca0:	0800a080 	.word	0x0800a080

08007ca4 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"C?\r");
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007cb2:	4910      	ldr	r1, [pc, #64]	; (8007cf4 <ES_WIFI_GetNetworkSettings+0x50>)
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 fe0b 	bl	80088d0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff fd89 	bl	80077e0 <AT_ExecuteCommand>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	73fb      	strb	r3, [r7, #15]
  
  if(ret == ES_WIFI_STATUS_OK)
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d108      	bne.n	8007cea <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	3385      	adds	r3, #133	; 0x85
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	f7ff fccb 	bl	8007680 <AT_ParseConnSettings>
  }  
  return ret;
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	0800a088 	.word	0x0800a088

08007cf8 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8007cf8:	b590      	push	{r4, r7, lr}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af02      	add	r7, sp, #8
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	785b      	ldrb	r3, [r3, #1]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	494f      	ldr	r1, [pc, #316]	; (8007e4c <ES_WIFI_StartClientConnection+0x154>)
 8007d10:	f000 fdde 	bl	80088d0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007d20:	461a      	mov	r2, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7ff fd5c 	bl	80077e0 <AT_ExecuteCommand>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]
  
  if(ret == ES_WIFI_STATUS_OK)
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f040 8087 	bne.w	8007e42 <ES_WIFI_StartClientConnection+0x14a>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	4943      	ldr	r1, [pc, #268]	; (8007e50 <ES_WIFI_StartClientConnection+0x158>)
 8007d42:	f000 fdc5 	bl	80088d0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007d52:	461a      	mov	r2, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff fd43 	bl	80077e0 <AT_ExecuteCommand>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	73fb      	strb	r3, [r7, #15]
    if(ret == ES_WIFI_STATUS_OK)
 8007d5e:	7bfb      	ldrb	r3, [r7, #15]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d16e      	bne.n	8007e42 <ES_WIFI_StartClientConnection+0x14a>
    {
      if ((conn->Type == ES_WIFI_UDP_CONNECTION) && (conn->LocalPort > 0)) 
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d11b      	bne.n	8007da4 <ES_WIFI_StartClientConnection+0xac>
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	889b      	ldrh	r3, [r3, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d017      	beq.n	8007da4 <ES_WIFI_StartClientConnection+0xac>
      {
        sprintf((char*)Obj->CmdData,"P2=%d\r", conn->RemotePort);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	885b      	ldrh	r3, [r3, #2]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	4934      	ldr	r1, [pc, #208]	; (8007e54 <ES_WIFI_StartClientConnection+0x15c>)
 8007d82:	f000 fda5 	bl	80088d0 <siprintf>
        if(AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData) == ES_WIFI_STATUS_ERROR)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007d92:	461a      	mov	r2, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7ff fd23 	bl	80077e0 <AT_ExecuteCommand>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d101      	bne.n	8007da4 <ES_WIFI_StartClientConnection+0xac>
        {
          return ES_WIFI_STATUS_ERROR;
 8007da0:	2302      	movs	r3, #2
 8007da2:	e04f      	b.n	8007e44 <ES_WIFI_StartClientConnection+0x14c>
        }
      }
      sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	885b      	ldrh	r3, [r3, #2]
 8007dae:	461a      	mov	r2, r3
 8007db0:	4929      	ldr	r1, [pc, #164]	; (8007e58 <ES_WIFI_StartClientConnection+0x160>)
 8007db2:	f000 fd8d 	bl	80088d0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f7ff fd0b 	bl	80077e0 <AT_ExecuteCommand>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	73fb      	strb	r3, [r7, #15]
      
      if(ret == ES_WIFI_STATUS_OK)
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d136      	bne.n	8007e42 <ES_WIFI_StartClientConnection+0x14a>
      {
        sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	799b      	ldrb	r3, [r3, #6]
 8007dde:	4619      	mov	r1, r3
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	79db      	ldrb	r3, [r3, #7]
 8007de4:	461c      	mov	r4, r3
                conn->RemoteIP[2],conn->RemoteIP[3]);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	7a1b      	ldrb	r3, [r3, #8]
        sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8007dea:	461a      	mov	r2, r3
                conn->RemoteIP[2],conn->RemoteIP[3]);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	7a5b      	ldrb	r3, [r3, #9]
        sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8007df0:	9301      	str	r3, [sp, #4]
 8007df2:	9200      	str	r2, [sp, #0]
 8007df4:	4623      	mov	r3, r4
 8007df6:	460a      	mov	r2, r1
 8007df8:	4918      	ldr	r1, [pc, #96]	; (8007e5c <ES_WIFI_StartClientConnection+0x164>)
 8007dfa:	f000 fd69 	bl	80088d0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData); 
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7ff fce7 	bl	80077e0 <AT_ExecuteCommand>
 8007e12:	4603      	mov	r3, r0
 8007e14:	73fb      	strb	r3, [r7, #15]
        if(ret == ES_WIFI_STATUS_OK)
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d112      	bne.n	8007e42 <ES_WIFI_StartClientConnection+0x14a>
        {
          sprintf((char*)Obj->CmdData,"P6=1\r");
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007e22:	490f      	ldr	r1, [pc, #60]	; (8007e60 <ES_WIFI_StartClientConnection+0x168>)
 8007e24:	4618      	mov	r0, r3
 8007e26:	f000 fd53 	bl	80088d0 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);         
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007e36:	461a      	mov	r2, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff fcd1 	bl	80077e0 <AT_ExecuteCommand>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	73fb      	strb	r3, [r7, #15]
        }          
      }           
    }
  }
  return ret;
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd90      	pop	{r4, r7, pc}
 8007e4c:	0800a150 	.word	0x0800a150
 8007e50:	0800a158 	.word	0x0800a158
 8007e54:	0800a160 	.word	0x0800a160
 8007e58:	0800a168 	.word	0x0800a168
 8007e5c:	0800a170 	.word	0x0800a170
 8007e60:	0800a180 	.word	0x0800a180

08007e64 <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	785b      	ldrb	r3, [r3, #1]
 8007e78:	461a      	mov	r2, r3
 8007e7a:	4915      	ldr	r1, [pc, #84]	; (8007ed0 <ES_WIFI_StopClientConnection+0x6c>)
 8007e7c:	f000 fd28 	bl	80088d0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7ff fca6 	bl	80077e0 <AT_ExecuteCommand>
 8007e94:	4603      	mov	r3, r0
 8007e96:	73fb      	strb	r3, [r7, #15]
  
  if(ret == ES_WIFI_STATUS_OK)
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d112      	bne.n	8007ec4 <ES_WIFI_StopClientConnection+0x60>
  {  
    sprintf((char*)Obj->CmdData,"P6=0\r");
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007ea4:	490b      	ldr	r1, [pc, #44]	; (8007ed4 <ES_WIFI_StopClientConnection+0x70>)
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 fd12 	bl	80088d0 <siprintf>
    ret =  AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);     
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007eb8:	461a      	mov	r2, r3
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7ff fc90 	bl	80077e0 <AT_ExecuteCommand>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	0800a150 	.word	0x0800a150
 8007ed4:	0800a188 	.word	0x0800a188

08007ed8 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b088      	sub	sp, #32
 8007edc:	af02      	add	r7, sp, #8
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	607a      	str	r2, [r7, #4]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	72fb      	strb	r3, [r7, #11]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	813b      	strh	r3, [r7, #8]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;  
 8007eec:	2302      	movs	r3, #2
 8007eee:	75fb      	strb	r3, [r7, #23]
  
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8007ef0:	893b      	ldrh	r3, [r7, #8]
 8007ef2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8007ef6:	d302      	bcc.n	8007efe <ES_WIFI_SendData+0x26>
 8007ef8:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007efc:	813b      	strh	r3, [r7, #8]
  
  *SentLen = Reqlen;
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	893a      	ldrh	r2, [r7, #8]
 8007f02:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007f0a:	7afa      	ldrb	r2, [r7, #11]
 8007f0c:	492d      	ldr	r1, [pc, #180]	; (8007fc4 <ES_WIFI_SendData+0xec>)
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 fcde 	bl	80088d0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007f20:	461a      	mov	r2, r3
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f7ff fc5c 	bl	80077e0 <AT_ExecuteCommand>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d13c      	bne.n	8007fac <ES_WIFI_SendData+0xd4>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f3a:	4923      	ldr	r1, [pc, #140]	; (8007fc8 <ES_WIFI_SendData+0xf0>)
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 fcc7 	bl	80088d0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007f4e:	461a      	mov	r2, r3
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f7ff fc45 	bl	80077e0 <AT_ExecuteCommand>
 8007f56:	4603      	mov	r3, r0
 8007f58:	75fb      	strb	r3, [r7, #23]
    
    if(ret == ES_WIFI_STATUS_OK)
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d125      	bne.n	8007fac <ES_WIFI_SendData+0xd4>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007f66:	893a      	ldrh	r2, [r7, #8]
 8007f68:	4918      	ldr	r1, [pc, #96]	; (8007fcc <ES_WIFI_SendData+0xf4>)
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 fcb0 	bl	80088d0 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007f7c:	893a      	ldrh	r2, [r7, #8]
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	4613      	mov	r3, r2
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f7ff fc73 	bl	8007870 <AT_RequestSendData>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	75fb      	strb	r3, [r7, #23]
      
      if(ret == ES_WIFI_STATUS_OK)
 8007f8e:	7dfb      	ldrb	r3, [r7, #23]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10b      	bne.n	8007fac <ES_WIFI_SendData+0xd4>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007f9a:	490d      	ldr	r1, [pc, #52]	; (8007fd0 <ES_WIFI_SendData+0xf8>)
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 fcca 	bl	8008936 <strstr>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <ES_WIFI_SendData+0xd4>
        {
          ret = ES_WIFI_STATUS_ERROR;
 8007fa8:	2302      	movs	r3, #2
 8007faa:	75fb      	strb	r3, [r7, #23]
        }
      }
    }
  }
  
  if (ret == ES_WIFI_STATUS_ERROR) *SentLen = 0;
 8007fac:	7dfb      	ldrb	r3, [r7, #23]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d102      	bne.n	8007fb8 <ES_WIFI_SendData+0xe0>
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	801a      	strh	r2, [r3, #0]
  return ret;  
 8007fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	0800a150 	.word	0x0800a150
 8007fc8:	0800a1ec 	.word	0x0800a1ec
 8007fcc:	0800a1f4 	.word	0x0800a1f4
 8007fd0:	0800a200 	.word	0x0800a200

08007fd4 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b088      	sub	sp, #32
 8007fd8:	af02      	add	r7, sp, #8
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	607a      	str	r2, [r7, #4]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	72fb      	strb	r3, [r7, #11]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	813b      	strh	r3, [r7, #8]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;  
 8007fe8:	2302      	movs	r3, #2
 8007fea:	75fb      	strb	r3, [r7, #23]
  
  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8007fec:	893b      	ldrh	r3, [r7, #8]
 8007fee:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8007ff2:	d85c      	bhi.n	80080ae <ES_WIFI_ReceiveData+0xda>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007ffa:	7afa      	ldrb	r2, [r7, #11]
 8007ffc:	492e      	ldr	r1, [pc, #184]	; (80080b8 <ES_WIFI_ReceiveData+0xe4>)
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 fc66 	bl	80088d0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f503 7190 	add.w	r1, r3, #288	; 0x120
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008010:	461a      	mov	r2, r3
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f7ff fbe4 	bl	80077e0 <AT_ExecuteCommand>
 8008018:	4603      	mov	r3, r0
 800801a:	75fb      	strb	r3, [r7, #23]
    
    if(ret == ES_WIFI_STATUS_OK)
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d145      	bne.n	80080ae <ES_WIFI_ReceiveData+0xda>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008028:	893a      	ldrh	r2, [r7, #8]
 800802a:	4924      	ldr	r1, [pc, #144]	; (80080bc <ES_WIFI_ReceiveData+0xe8>)
 800802c:	4618      	mov	r0, r3
 800802e:	f000 fc4f 	bl	80088d0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800803e:	461a      	mov	r2, r3
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f7ff fbcd 	bl	80077e0 <AT_ExecuteCommand>
 8008046:	4603      	mov	r3, r0
 8008048:	75fb      	strb	r3, [r7, #23]
      if(ret == ES_WIFI_STATUS_OK)
 800804a:	7dfb      	ldrb	r3, [r7, #23]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d12b      	bne.n	80080a8 <ES_WIFI_ReceiveData+0xd4>
      { 
        sprintf((char*)Obj->CmdData,"R2=%lu\r", Timeout);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008058:	4919      	ldr	r1, [pc, #100]	; (80080c0 <ES_WIFI_ReceiveData+0xec>)
 800805a:	4618      	mov	r0, r3
 800805c:	f000 fc38 	bl	80088d0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800806c:	461a      	mov	r2, r3
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f7ff fbb6 	bl	80077e0 <AT_ExecuteCommand>
 8008074:	4603      	mov	r3, r0
 8008076:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8008078:	7dfb      	ldrb	r3, [r7, #23]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d117      	bne.n	80080ae <ES_WIFI_ReceiveData+0xda>
        {  
         sprintf((char*)Obj->CmdData,"R0=\r");
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008084:	490f      	ldr	r1, [pc, #60]	; (80080c4 <ES_WIFI_ReceiveData+0xf0>)
 8008086:	4618      	mov	r0, r3
 8008088:	f000 fc22 	bl	80088d0 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8008092:	893a      	ldrh	r2, [r7, #8]
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	4613      	mov	r3, r2
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f7ff fce9 	bl	8007a74 <AT_RequestReceiveData>
 80080a2:	4603      	mov	r3, r0
 80080a4:	75fb      	strb	r3, [r7, #23]
 80080a6:	e002      	b.n	80080ae <ES_WIFI_ReceiveData+0xda>
        }
      }
      else
      {
        *Receivedlen = 0;
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	2200      	movs	r2, #0
 80080ac:	801a      	strh	r2, [r3, #0]
      }
    }
  }
  return ret;
 80080ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	0800a150 	.word	0x0800a150
 80080bc:	0800a208 	.word	0x0800a208
 80080c0:	0800a210 	.word	0x0800a210
 80080c4:	0800a218 	.word	0x0800a218

080080c8 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b08c      	sub	sp, #48	; 0x30
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 80080d0:	4b57      	ldr	r3, [pc, #348]	; (8008230 <SPI_WIFI_MspInit+0x168>)
 80080d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d4:	4a56      	ldr	r2, [pc, #344]	; (8008230 <SPI_WIFI_MspInit+0x168>)
 80080d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080da:	6593      	str	r3, [r2, #88]	; 0x58
 80080dc:	4b54      	ldr	r3, [pc, #336]	; (8008230 <SPI_WIFI_MspInit+0x168>)
 80080de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080e4:	61bb      	str	r3, [r7, #24]
 80080e6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80080e8:	4b51      	ldr	r3, [pc, #324]	; (8008230 <SPI_WIFI_MspInit+0x168>)
 80080ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ec:	4a50      	ldr	r2, [pc, #320]	; (8008230 <SPI_WIFI_MspInit+0x168>)
 80080ee:	f043 0302 	orr.w	r3, r3, #2
 80080f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080f4:	4b4e      	ldr	r3, [pc, #312]	; (8008230 <SPI_WIFI_MspInit+0x168>)
 80080f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080f8:	f003 0302 	and.w	r3, r3, #2
 80080fc:	617b      	str	r3, [r7, #20]
 80080fe:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008100:	4b4b      	ldr	r3, [pc, #300]	; (8008230 <SPI_WIFI_MspInit+0x168>)
 8008102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008104:	4a4a      	ldr	r2, [pc, #296]	; (8008230 <SPI_WIFI_MspInit+0x168>)
 8008106:	f043 0304 	orr.w	r3, r3, #4
 800810a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800810c:	4b48      	ldr	r3, [pc, #288]	; (8008230 <SPI_WIFI_MspInit+0x168>)
 800810e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008110:	f003 0304 	and.w	r3, r3, #4
 8008114:	613b      	str	r3, [r7, #16]
 8008116:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008118:	4b45      	ldr	r3, [pc, #276]	; (8008230 <SPI_WIFI_MspInit+0x168>)
 800811a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800811c:	4a44      	ldr	r2, [pc, #272]	; (8008230 <SPI_WIFI_MspInit+0x168>)
 800811e:	f043 0310 	orr.w	r3, r3, #16
 8008122:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008124:	4b42      	ldr	r3, [pc, #264]	; (8008230 <SPI_WIFI_MspInit+0x168>)
 8008126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008128:	f003 0310 	and.w	r3, r3, #16
 800812c:	60fb      	str	r3, [r7, #12]
 800812e:	68fb      	ldr	r3, [r7, #12]
  
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); 
 8008130:	2200      	movs	r2, #0
 8008132:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008136:	483f      	ldr	r0, [pc, #252]	; (8008234 <SPI_WIFI_MspInit+0x16c>)
 8008138:	f7fa fee2 	bl	8002f00 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 800813c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008140:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8008142:	2301      	movs	r3, #1
 8008144:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008146:	2300      	movs	r3, #0
 8008148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800814a:	2300      	movs	r3, #0
 800814c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800814e:	f107 031c 	add.w	r3, r7, #28
 8008152:	4619      	mov	r1, r3
 8008154:	4837      	ldr	r0, [pc, #220]	; (8008234 <SPI_WIFI_MspInit+0x16c>)
 8008156:	f7fa fc1d 	bl	8002994 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800815a:	2302      	movs	r3, #2
 800815c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800815e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008162:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008164:	2300      	movs	r3, #0
 8008166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8008168:	2300      	movs	r3, #0
 800816a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800816c:	f107 031c 	add.w	r3, r7, #28
 8008170:	4619      	mov	r1, r3
 8008172:	4831      	ldr	r0, [pc, #196]	; (8008238 <SPI_WIFI_MspInit+0x170>)
 8008174:	f7fa fc0e 	bl	8002994 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8008178:	f44f 7380 	mov.w	r3, #256	; 0x100
 800817c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800817e:	2301      	movs	r3, #1
 8008180:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008182:	2300      	movs	r3, #0
 8008184:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8008186:	2300      	movs	r3, #0
 8008188:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800818a:	2300      	movs	r3, #0
 800818c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800818e:	f107 031c 	add.w	r3, r7, #28
 8008192:	4619      	mov	r1, r3
 8008194:	4828      	ldr	r0, [pc, #160]	; (8008238 <SPI_WIFI_MspInit+0x170>)
 8008196:	f7fa fbfd 	bl	8002994 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE, GPIO_PIN_0, GPIO_PIN_SET ); 
 800819a:	2201      	movs	r2, #1
 800819c:	2101      	movs	r1, #1
 800819e:	4826      	ldr	r0, [pc, #152]	; (8008238 <SPI_WIFI_MspInit+0x170>)
 80081a0:	f7fa feae 	bl	8002f00 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_0;
 80081a4:	2301      	movs	r3, #1
 80081a6:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80081a8:	2301      	movs	r3, #1
 80081aa:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80081ac:	2300      	movs	r3, #0
 80081ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80081b0:	2301      	movs	r3, #1
 80081b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80081b4:	f107 031c 	add.w	r3, r7, #28
 80081b8:	4619      	mov	r1, r3
 80081ba:	481f      	ldr	r0, [pc, #124]	; (8008238 <SPI_WIFI_MspInit+0x170>)
 80081bc:	f7fa fbea 	bl	8002994 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       = GPIO_PIN_10;
 80081c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081c4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80081c6:	2302      	movs	r3, #2
 80081c8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80081ce:	2301      	movs	r3, #1
 80081d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80081d2:	2306      	movs	r3, #6
 80081d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80081d6:	f107 031c 	add.w	r3, r7, #28
 80081da:	4619      	mov	r1, r3
 80081dc:	4817      	ldr	r0, [pc, #92]	; (800823c <SPI_WIFI_MspInit+0x174>)
 80081de:	f7fa fbd9 	bl	8002994 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 80081e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081e6:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80081e8:	2302      	movs	r3, #2
 80081ea:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80081ec:	2300      	movs	r3, #0
 80081ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80081f0:	2301      	movs	r3, #1
 80081f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80081f4:	2306      	movs	r3, #6
 80081f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80081f8:	f107 031c 	add.w	r3, r7, #28
 80081fc:	4619      	mov	r1, r3
 80081fe:	480f      	ldr	r0, [pc, #60]	; (800823c <SPI_WIFI_MspInit+0x174>)
 8008200:	f7fa fbc8 	bl	8002994 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8008204:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008208:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800820a:	2302      	movs	r3, #2
 800820c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800820e:	2301      	movs	r3, #1
 8008210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008212:	2301      	movs	r3, #1
 8008214:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8008216:	2306      	movs	r3, #6
 8008218:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800821a:	f107 031c 	add.w	r3, r7, #28
 800821e:	4619      	mov	r1, r3
 8008220:	4806      	ldr	r0, [pc, #24]	; (800823c <SPI_WIFI_MspInit+0x174>)
 8008222:	f7fa fbb7 	bl	8002994 <HAL_GPIO_Init>
}
 8008226:	bf00      	nop
 8008228:	3730      	adds	r7, #48	; 0x30
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	40021000 	.word	0x40021000
 8008234:	48000400 	.word	0x48000400
 8008238:	48001000 	.word	0x48001000
 800823c:	48000800 	.word	0x48000800

08008240 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(void)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8008246:	f7fa f957 	bl	80024f8 <HAL_GetTick>
 800824a:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800824c:	2300      	movs	r3, #0
 800824e:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
  
  hspi.Instance               = SPI3;
 8008250:	4b51      	ldr	r3, [pc, #324]	; (8008398 <SPI_WIFI_Init+0x158>)
 8008252:	4a52      	ldr	r2, [pc, #328]	; (800839c <SPI_WIFI_Init+0x15c>)
 8008254:	601a      	str	r2, [r3, #0]
  SPI_WIFI_MspInit(&hspi);
 8008256:	4850      	ldr	r0, [pc, #320]	; (8008398 <SPI_WIFI_Init+0x158>)
 8008258:	f7ff ff36 	bl	80080c8 <SPI_WIFI_MspInit>
  
  hspi.Init.Mode              = SPI_MODE_MASTER;
 800825c:	4b4e      	ldr	r3, [pc, #312]	; (8008398 <SPI_WIFI_Init+0x158>)
 800825e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008262:	605a      	str	r2, [r3, #4]
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8008264:	4b4c      	ldr	r3, [pc, #304]	; (8008398 <SPI_WIFI_Init+0x158>)
 8008266:	2200      	movs	r2, #0
 8008268:	609a      	str	r2, [r3, #8]
  hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800826a:	4b4b      	ldr	r3, [pc, #300]	; (8008398 <SPI_WIFI_Init+0x158>)
 800826c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008270:	60da      	str	r2, [r3, #12]
  hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8008272:	4b49      	ldr	r3, [pc, #292]	; (8008398 <SPI_WIFI_Init+0x158>)
 8008274:	2200      	movs	r2, #0
 8008276:	611a      	str	r2, [r3, #16]
  hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8008278:	4b47      	ldr	r3, [pc, #284]	; (8008398 <SPI_WIFI_Init+0x158>)
 800827a:	2200      	movs	r2, #0
 800827c:	615a      	str	r2, [r3, #20]
  hspi.Init.NSS               = SPI_NSS_SOFT;
 800827e:	4b46      	ldr	r3, [pc, #280]	; (8008398 <SPI_WIFI_Init+0x158>)
 8008280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008284:	619a      	str	r2, [r3, #24]
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;  /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8008286:	4b44      	ldr	r3, [pc, #272]	; (8008398 <SPI_WIFI_Init+0x158>)
 8008288:	2210      	movs	r2, #16
 800828a:	61da      	str	r2, [r3, #28]
  hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800828c:	4b42      	ldr	r3, [pc, #264]	; (8008398 <SPI_WIFI_Init+0x158>)
 800828e:	2200      	movs	r2, #0
 8008290:	621a      	str	r2, [r3, #32]
  hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8008292:	4b41      	ldr	r3, [pc, #260]	; (8008398 <SPI_WIFI_Init+0x158>)
 8008294:	2200      	movs	r2, #0
 8008296:	625a      	str	r2, [r3, #36]	; 0x24
  hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8008298:	4b3f      	ldr	r3, [pc, #252]	; (8008398 <SPI_WIFI_Init+0x158>)
 800829a:	2200      	movs	r2, #0
 800829c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.CRCPolynomial     = 0;
 800829e:	4b3e      	ldr	r3, [pc, #248]	; (8008398 <SPI_WIFI_Init+0x158>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  if(HAL_SPI_Init( &hspi ) != HAL_OK)
 80082a4:	483c      	ldr	r0, [pc, #240]	; (8008398 <SPI_WIFI_Init+0x158>)
 80082a6:	f7fd f9ad 	bl	8005604 <HAL_SPI_Init>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <SPI_WIFI_Init+0x76>
  {
    return -1;
 80082b0:	f04f 33ff 	mov.w	r3, #4294967295
 80082b4:	e06c      	b.n	8008390 <SPI_WIFI_Init+0x150>
  }
  
  WIFI_RESET_MODULE();
 80082b6:	2200      	movs	r2, #0
 80082b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80082bc:	4838      	ldr	r0, [pc, #224]	; (80083a0 <SPI_WIFI_Init+0x160>)
 80082be:	f7fa fe1f 	bl	8002f00 <HAL_GPIO_WritePin>
 80082c2:	200a      	movs	r0, #10
 80082c4:	f7fa f924 	bl	8002510 <HAL_Delay>
 80082c8:	2201      	movs	r2, #1
 80082ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80082ce:	4834      	ldr	r0, [pc, #208]	; (80083a0 <SPI_WIFI_Init+0x160>)
 80082d0:	f7fa fe16 	bl	8002f00 <HAL_GPIO_WritePin>
 80082d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80082d8:	f7fa f91a 	bl	8002510 <HAL_Delay>
  
  WIFI_ENABLE_NSS(); 
 80082dc:	2200      	movs	r2, #0
 80082de:	2101      	movs	r1, #1
 80082e0:	482f      	ldr	r0, [pc, #188]	; (80083a0 <SPI_WIFI_Init+0x160>)
 80082e2:	f7fa fe0d 	bl	8002f00 <HAL_GPIO_WritePin>
 80082e6:	200a      	movs	r0, #10
 80082e8:	f7fa f912 	bl	8002510 <HAL_Delay>
  
  while (WIFI_IS_CMDDATA_READY())
 80082ec:	e023      	b.n	8008336 <SPI_WIFI_Init+0xf6>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
 80082f0:	463a      	mov	r2, r7
 80082f2:	18d1      	adds	r1, r2, r3
 80082f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80082f8:	2201      	movs	r2, #1
 80082fa:	4827      	ldr	r0, [pc, #156]	; (8008398 <SPI_WIFI_Init+0x158>)
 80082fc:	f7fd fbbb 	bl	8005a76 <HAL_SPI_Receive>
 8008300:	4603      	mov	r3, r0
 8008302:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8008304:	7bfb      	ldrb	r3, [r7, #15]
 8008306:	3302      	adds	r3, #2
 8008308:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800830a:	f7fa f8f5 	bl	80024f8 <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008318:	d202      	bcs.n	8008320 <SPI_WIFI_Init+0xe0>
 800831a:	79fb      	ldrb	r3, [r7, #7]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00a      	beq.n	8008336 <SPI_WIFI_Init+0xf6>
    {
      WIFI_DISABLE_NSS(); 
 8008320:	2201      	movs	r2, #1
 8008322:	2101      	movs	r1, #1
 8008324:	481e      	ldr	r0, [pc, #120]	; (80083a0 <SPI_WIFI_Init+0x160>)
 8008326:	f7fa fdeb 	bl	8002f00 <HAL_GPIO_WritePin>
 800832a:	200a      	movs	r0, #10
 800832c:	f7fa f8f0 	bl	8002510 <HAL_Delay>
      return -1;
 8008330:	f04f 33ff 	mov.w	r3, #4294967295
 8008334:	e02c      	b.n	8008390 <SPI_WIFI_Init+0x150>
  while (WIFI_IS_CMDDATA_READY())
 8008336:	2102      	movs	r1, #2
 8008338:	4819      	ldr	r0, [pc, #100]	; (80083a0 <SPI_WIFI_Init+0x160>)
 800833a:	f7fa fdc9 	bl	8002ed0 <HAL_GPIO_ReadPin>
 800833e:	4603      	mov	r3, r0
 8008340:	2b01      	cmp	r3, #1
 8008342:	d0d4      	beq.n	80082ee <SPI_WIFI_Init+0xae>
    }    
  }
  
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8008344:	783b      	ldrb	r3, [r7, #0]
 8008346:	2b15      	cmp	r3, #21
 8008348:	d10e      	bne.n	8008368 <SPI_WIFI_Init+0x128>
 800834a:	787b      	ldrb	r3, [r7, #1]
 800834c:	2b15      	cmp	r3, #21
 800834e:	d10b      	bne.n	8008368 <SPI_WIFI_Init+0x128>
 8008350:	78bb      	ldrb	r3, [r7, #2]
 8008352:	2b0d      	cmp	r3, #13
 8008354:	d108      	bne.n	8008368 <SPI_WIFI_Init+0x128>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8008356:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8008358:	2b0a      	cmp	r3, #10
 800835a:	d105      	bne.n	8008368 <SPI_WIFI_Init+0x128>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800835c:	793b      	ldrb	r3, [r7, #4]
 800835e:	2b3e      	cmp	r3, #62	; 0x3e
 8008360:	d102      	bne.n	8008368 <SPI_WIFI_Init+0x128>
 8008362:	797b      	ldrb	r3, [r7, #5]
 8008364:	2b20      	cmp	r3, #32
 8008366:	d00a      	beq.n	800837e <SPI_WIFI_Init+0x13e>
  {
    WIFI_DISABLE_NSS(); 
 8008368:	2201      	movs	r2, #1
 800836a:	2101      	movs	r1, #1
 800836c:	480c      	ldr	r0, [pc, #48]	; (80083a0 <SPI_WIFI_Init+0x160>)
 800836e:	f7fa fdc7 	bl	8002f00 <HAL_GPIO_WritePin>
 8008372:	200a      	movs	r0, #10
 8008374:	f7fa f8cc 	bl	8002510 <HAL_Delay>
    return -1;
 8008378:	f04f 33ff 	mov.w	r3, #4294967295
 800837c:	e008      	b.n	8008390 <SPI_WIFI_Init+0x150>
  }    
   
  WIFI_DISABLE_NSS(); 
 800837e:	2201      	movs	r2, #1
 8008380:	2101      	movs	r1, #1
 8008382:	4807      	ldr	r0, [pc, #28]	; (80083a0 <SPI_WIFI_Init+0x160>)
 8008384:	f7fa fdbc 	bl	8002f00 <HAL_GPIO_WritePin>
 8008388:	200a      	movs	r0, #10
 800838a:	f7fa f8c1 	bl	8002510 <HAL_Delay>
  return 0;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	20000998 	.word	0x20000998
 800839c:	40003c00 	.word	0x40003c00
 80083a0:	48001000 	.word	0x48001000

080083a4 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 80083a8:	4802      	ldr	r0, [pc, #8]	; (80083b4 <SPI_WIFI_DeInit+0x10>)
 80083aa:	f7fd f9ce 	bl	800574a <HAL_SPI_DeInit>
  return 0;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	20000998 	.word	0x20000998

080083b8 <SPI_WIFI_ReceiveData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	460b      	mov	r3, r1
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80083c6:	f7fa f897 	bl	80024f8 <HAL_GetTick>
 80083ca:	61b8      	str	r0, [r7, #24]
  int16_t length = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	83fb      	strh	r3, [r7, #30]
  uint8_t tmp[2];
  
  HAL_SPIEx_FlushRxFifo(&hspi);
 80083d0:	4842      	ldr	r0, [pc, #264]	; (80084dc <SPI_WIFI_ReceiveData+0x124>)
 80083d2:	f7fe f84f 	bl	8006474 <HAL_SPIEx_FlushRxFifo>
  
  WIFI_DISABLE_NSS(); 
 80083d6:	2201      	movs	r2, #1
 80083d8:	2101      	movs	r1, #1
 80083da:	4841      	ldr	r0, [pc, #260]	; (80084e0 <SPI_WIFI_ReceiveData+0x128>)
 80083dc:	f7fa fd90 	bl	8002f00 <HAL_GPIO_WritePin>
 80083e0:	200a      	movs	r0, #10
 80083e2:	f7fa f895 	bl	8002510 <HAL_Delay>
  
  while (!WIFI_IS_CMDDATA_READY())
 80083e6:	e00a      	b.n	80083fe <SPI_WIFI_ReceiveData+0x46>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80083e8:	f7fa f886 	bl	80024f8 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d202      	bcs.n	80083fe <SPI_WIFI_ReceiveData+0x46>
    {
      return -1;
 80083f8:	f04f 33ff 	mov.w	r3, #4294967295
 80083fc:	e06a      	b.n	80084d4 <SPI_WIFI_ReceiveData+0x11c>
  while (!WIFI_IS_CMDDATA_READY())
 80083fe:	2102      	movs	r1, #2
 8008400:	4837      	ldr	r0, [pc, #220]	; (80084e0 <SPI_WIFI_ReceiveData+0x128>)
 8008402:	f7fa fd65 	bl	8002ed0 <HAL_GPIO_ReadPin>
 8008406:	4603      	mov	r3, r0
 8008408:	2b01      	cmp	r3, #1
 800840a:	d1ed      	bne.n	80083e8 <SPI_WIFI_ReceiveData+0x30>
    }
  }
  
  WIFI_ENABLE_NSS(); 
 800840c:	2200      	movs	r2, #0
 800840e:	2101      	movs	r1, #1
 8008410:	4833      	ldr	r0, [pc, #204]	; (80084e0 <SPI_WIFI_ReceiveData+0x128>)
 8008412:	f7fa fd75 	bl	8002f00 <HAL_GPIO_WritePin>
 8008416:	200a      	movs	r0, #10
 8008418:	f7fa f87a 	bl	8002510 <HAL_Delay>
  
  while (WIFI_IS_CMDDATA_READY())
 800841c:	e049      	b.n	80084b2 <SPI_WIFI_ReceiveData+0xfa>
  {
    if((length < len) || (!len))
 800841e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8008422:	897b      	ldrh	r3, [r7, #10]
 8008424:	429a      	cmp	r2, r3
 8008426:	db02      	blt.n	800842e <SPI_WIFI_ReceiveData+0x76>
 8008428:	897b      	ldrh	r3, [r7, #10]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d148      	bne.n	80084c0 <SPI_WIFI_ReceiveData+0x108>
    {
      HAL_SPI_Receive(&hspi, tmp, 1, timeout) ;    
 800842e:	f107 0114 	add.w	r1, r7, #20
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	4829      	ldr	r0, [pc, #164]	; (80084dc <SPI_WIFI_ReceiveData+0x124>)
 8008438:	f7fd fb1d 	bl	8005a76 <HAL_SPI_Receive>
      /* let some time to hardware to change CMDDATA signal */
      if(tmp[1] == 0x15)
 800843c:	7d7b      	ldrb	r3, [r7, #21]
 800843e:	2b15      	cmp	r3, #21
 8008440:	d102      	bne.n	8008448 <SPI_WIFI_ReceiveData+0x90>
      {
       SPI_WIFI_Delay(1);
 8008442:	2001      	movs	r0, #1
 8008444:	f000 f8c0 	bl	80085c8 <SPI_WIFI_Delay>
      }
      /*This the last data */
      if(!WIFI_IS_CMDDATA_READY())
 8008448:	2102      	movs	r1, #2
 800844a:	4825      	ldr	r0, [pc, #148]	; (80084e0 <SPI_WIFI_ReceiveData+0x128>)
 800844c:	f7fa fd40 	bl	8002ed0 <HAL_GPIO_ReadPin>
 8008450:	4603      	mov	r3, r0
 8008452:	2b01      	cmp	r3, #1
 8008454:	d00c      	beq.n	8008470 <SPI_WIFI_ReceiveData+0xb8>
      {
        if(tmp[1] == 0x15)
 8008456:	7d7b      	ldrb	r3, [r7, #21]
 8008458:	2b15      	cmp	r3, #21
 800845a:	d109      	bne.n	8008470 <SPI_WIFI_ReceiveData+0xb8>
        {
          pData[0] = tmp[0];
 800845c:	7d3a      	ldrb	r2, [r7, #20]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	701a      	strb	r2, [r3, #0]
          length++;
 8008462:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008466:	b29b      	uxth	r3, r3
 8008468:	3301      	adds	r3, #1
 800846a:	b29b      	uxth	r3, r3
 800846c:	83fb      	strh	r3, [r7, #30]
          break;
 800846e:	e027      	b.n	80084c0 <SPI_WIFI_ReceiveData+0x108>
        }     
      }
      
      pData[0] = tmp[0];
 8008470:	7d3a      	ldrb	r2, [r7, #20]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3301      	adds	r3, #1
 800847a:	7d7a      	ldrb	r2, [r7, #21]
 800847c:	701a      	strb	r2, [r3, #0]
      length += 2;
 800847e:	8bfb      	ldrh	r3, [r7, #30]
 8008480:	3302      	adds	r3, #2
 8008482:	b29b      	uxth	r3, r3
 8008484:	83fb      	strh	r3, [r7, #30]
      pData  += 2;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	3302      	adds	r3, #2
 800848a:	60fb      	str	r3, [r7, #12]
      
      if((HAL_GetTick() - tickstart ) > timeout)
 800848c:	f7fa f834 	bl	80024f8 <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	429a      	cmp	r2, r3
 800849a:	d20a      	bcs.n	80084b2 <SPI_WIFI_ReceiveData+0xfa>
      {
        WIFI_DISABLE_NSS(); 
 800849c:	2201      	movs	r2, #1
 800849e:	2101      	movs	r1, #1
 80084a0:	480f      	ldr	r0, [pc, #60]	; (80084e0 <SPI_WIFI_ReceiveData+0x128>)
 80084a2:	f7fa fd2d 	bl	8002f00 <HAL_GPIO_WritePin>
 80084a6:	200a      	movs	r0, #10
 80084a8:	f7fa f832 	bl	8002510 <HAL_Delay>
        return -1;
 80084ac:	f04f 33ff 	mov.w	r3, #4294967295
 80084b0:	e010      	b.n	80084d4 <SPI_WIFI_ReceiveData+0x11c>
  while (WIFI_IS_CMDDATA_READY())
 80084b2:	2102      	movs	r1, #2
 80084b4:	480a      	ldr	r0, [pc, #40]	; (80084e0 <SPI_WIFI_ReceiveData+0x128>)
 80084b6:	f7fa fd0b 	bl	8002ed0 <HAL_GPIO_ReadPin>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d0ae      	beq.n	800841e <SPI_WIFI_ReceiveData+0x66>
    {
      break;
    }
  }
  
  WIFI_DISABLE_NSS(); 
 80084c0:	2201      	movs	r2, #1
 80084c2:	2101      	movs	r1, #1
 80084c4:	4806      	ldr	r0, [pc, #24]	; (80084e0 <SPI_WIFI_ReceiveData+0x128>)
 80084c6:	f7fa fd1b 	bl	8002f00 <HAL_GPIO_WritePin>
 80084ca:	200a      	movs	r0, #10
 80084cc:	f7fa f820 	bl	8002510 <HAL_Delay>
  return length;
 80084d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3720      	adds	r7, #32
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	20000998 	.word	0x20000998
 80084e0:	48001000 	.word	0x48001000

080084e4 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	460b      	mov	r3, r1
 80084ee:	607a      	str	r2, [r7, #4]
 80084f0:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80084f2:	f7fa f801 	bl	80024f8 <HAL_GetTick>
 80084f6:	6178      	str	r0, [r7, #20]
  uint8_t Padding[2];
  
  while (!WIFI_IS_CMDDATA_READY())
 80084f8:	e012      	b.n	8008520 <SPI_WIFI_SendData+0x3c>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80084fa:	f7f9 fffd 	bl	80024f8 <HAL_GetTick>
 80084fe:	4602      	mov	r2, r0
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	429a      	cmp	r2, r3
 8008508:	d20a      	bcs.n	8008520 <SPI_WIFI_SendData+0x3c>
    {
      WIFI_DISABLE_NSS();       
 800850a:	2201      	movs	r2, #1
 800850c:	2101      	movs	r1, #1
 800850e:	482c      	ldr	r0, [pc, #176]	; (80085c0 <SPI_WIFI_SendData+0xdc>)
 8008510:	f7fa fcf6 	bl	8002f00 <HAL_GPIO_WritePin>
 8008514:	200a      	movs	r0, #10
 8008516:	f7f9 fffb 	bl	8002510 <HAL_Delay>
      return -1;
 800851a:	f04f 33ff 	mov.w	r3, #4294967295
 800851e:	e04b      	b.n	80085b8 <SPI_WIFI_SendData+0xd4>
  while (!WIFI_IS_CMDDATA_READY())
 8008520:	2102      	movs	r1, #2
 8008522:	4827      	ldr	r0, [pc, #156]	; (80085c0 <SPI_WIFI_SendData+0xdc>)
 8008524:	f7fa fcd4 	bl	8002ed0 <HAL_GPIO_ReadPin>
 8008528:	4603      	mov	r3, r0
 800852a:	2b01      	cmp	r3, #1
 800852c:	d1e5      	bne.n	80084fa <SPI_WIFI_SendData+0x16>
    }
  }
  
  WIFI_ENABLE_NSS(); 
 800852e:	2200      	movs	r2, #0
 8008530:	2101      	movs	r1, #1
 8008532:	4823      	ldr	r0, [pc, #140]	; (80085c0 <SPI_WIFI_SendData+0xdc>)
 8008534:	f7fa fce4 	bl	8002f00 <HAL_GPIO_WritePin>
 8008538:	200a      	movs	r0, #10
 800853a:	f7f9 ffe9 	bl	8002510 <HAL_Delay>
  if (len > 1)
 800853e:	897b      	ldrh	r3, [r7, #10]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d915      	bls.n	8008570 <SPI_WIFI_SendData+0x8c>
  {
   if( HAL_SPI_Transmit(&hspi, (uint8_t *)pdata , len/2, timeout) != HAL_OK)
 8008544:	897b      	ldrh	r3, [r7, #10]
 8008546:	085b      	lsrs	r3, r3, #1
 8008548:	b29a      	uxth	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68f9      	ldr	r1, [r7, #12]
 800854e:	481d      	ldr	r0, [pc, #116]	; (80085c4 <SPI_WIFI_SendData+0xe0>)
 8008550:	f7fd f923 	bl	800579a <HAL_SPI_Transmit>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00a      	beq.n	8008570 <SPI_WIFI_SendData+0x8c>
   {
     WIFI_DISABLE_NSS(); 
 800855a:	2201      	movs	r2, #1
 800855c:	2101      	movs	r1, #1
 800855e:	4818      	ldr	r0, [pc, #96]	; (80085c0 <SPI_WIFI_SendData+0xdc>)
 8008560:	f7fa fcce 	bl	8002f00 <HAL_GPIO_WritePin>
 8008564:	200a      	movs	r0, #10
 8008566:	f7f9 ffd3 	bl	8002510 <HAL_Delay>
     return -1;
 800856a:	f04f 33ff 	mov.w	r3, #4294967295
 800856e:	e023      	b.n	80085b8 <SPI_WIFI_SendData+0xd4>
   }
  }
  
  if ( len & 1)
 8008570:	897b      	ldrh	r3, [r7, #10]
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	2b00      	cmp	r3, #0
 8008578:	d01c      	beq.n	80085b4 <SPI_WIFI_SendData+0xd0>
  {
    Padding[0] = pdata[len-1];
 800857a:	897b      	ldrh	r3, [r7, #10]
 800857c:	3b01      	subs	r3, #1
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	4413      	add	r3, r2
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	743b      	strb	r3, [r7, #16]
    Padding[1] = '\n';
 8008586:	230a      	movs	r3, #10
 8008588:	747b      	strb	r3, [r7, #17]
    
    if( HAL_SPI_Transmit(&hspi, Padding, 1, timeout) != HAL_OK)
 800858a:	f107 0110 	add.w	r1, r7, #16
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	480c      	ldr	r0, [pc, #48]	; (80085c4 <SPI_WIFI_SendData+0xe0>)
 8008594:	f7fd f901 	bl	800579a <HAL_SPI_Transmit>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00a      	beq.n	80085b4 <SPI_WIFI_SendData+0xd0>
    {
      WIFI_DISABLE_NSS();       
 800859e:	2201      	movs	r2, #1
 80085a0:	2101      	movs	r1, #1
 80085a2:	4807      	ldr	r0, [pc, #28]	; (80085c0 <SPI_WIFI_SendData+0xdc>)
 80085a4:	f7fa fcac 	bl	8002f00 <HAL_GPIO_WritePin>
 80085a8:	200a      	movs	r0, #10
 80085aa:	f7f9 ffb1 	bl	8002510 <HAL_Delay>
      return -1;
 80085ae:	f04f 33ff 	mov.w	r3, #4294967295
 80085b2:	e001      	b.n	80085b8 <SPI_WIFI_SendData+0xd4>
    }
  }
  
  return len;
 80085b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3718      	adds	r7, #24
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	48001000 	.word	0x48001000
 80085c4:	20000998 	.word	0x20000998

080085c8 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7f9 ff9d 	bl	8002510 <HAL_Delay>
}
 80085d6:	bf00      	nop
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
	...

080085e0 <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 80085ea:	4b0d      	ldr	r3, [pc, #52]	; (8008620 <WIFI_Init+0x40>)
 80085ec:	9301      	str	r3, [sp, #4]
 80085ee:	4b0d      	ldr	r3, [pc, #52]	; (8008624 <WIFI_Init+0x44>)
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	4b0d      	ldr	r3, [pc, #52]	; (8008628 <WIFI_Init+0x48>)
 80085f4:	4a0d      	ldr	r2, [pc, #52]	; (800862c <WIFI_Init+0x4c>)
 80085f6:	490e      	ldr	r1, [pc, #56]	; (8008630 <WIFI_Init+0x50>)
 80085f8:	480e      	ldr	r0, [pc, #56]	; (8008634 <WIFI_Init+0x54>)
 80085fa:	f7ff faab 	bl	8007b54 <ES_WIFI_RegisterBusIO>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d107      	bne.n	8008614 <WIFI_Init+0x34>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8008604:	480b      	ldr	r0, [pc, #44]	; (8008634 <WIFI_Init+0x54>)
 8008606:	f7ff fa77 	bl	8007af8 <ES_WIFI_Init>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d101      	bne.n	8008614 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8008614:	79fb      	ldrb	r3, [r7, #7]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	080083b9 	.word	0x080083b9
 8008624:	080084e5 	.word	0x080084e5
 8008628:	080085c9 	.word	0x080085c9
 800862c:	080083a5 	.word	0x080083a5
 8008630:	08008241 	.word	0x08008241
 8008634:	200009fc 	.word	0x200009fc

08008638 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	4613      	mov	r3, r2
 8008644:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8008646:	2301      	movs	r3, #1
 8008648:	75fb      	strb	r3, [r7, #23]
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	68f9      	ldr	r1, [r7, #12]
 8008650:	4809      	ldr	r0, [pc, #36]	; (8008678 <WIFI_Connect+0x40>)
 8008652:	f7ff faaf 	bl	8007bb4 <ES_WIFI_Connect>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d107      	bne.n	800866c <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800865c:	4806      	ldr	r0, [pc, #24]	; (8008678 <WIFI_Connect+0x40>)
 800865e:	f7ff fb21 	bl	8007ca4 <ES_WIFI_GetNetworkSettings>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d101      	bne.n	800866c <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	75fb      	strb	r3, [r7, #23]
    }
    
  }
  return ret;
 800866c:	7dfb      	ldrb	r3, [r7, #23]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	200009fc 	.word	0x200009fc

0800867c <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 8008684:	2301      	movs	r3, #1
 8008686:	73fb      	strb	r3, [r7, #15]
  
  if(EsWifiObj.NetSettings.IsConnected)
 8008688:	4b09      	ldr	r3, [pc, #36]	; (80086b0 <WIFI_GetIP_Address+0x34>)
 800868a:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 800868e:	2b00      	cmp	r3, #0
 8008690:	d007      	beq.n	80086a2 <WIFI_GetIP_Address+0x26>
 8008692:	4b07      	ldr	r3, [pc, #28]	; (80086b0 <WIFI_GetIP_Address+0x34>)
 8008694:	f8d3 30cd 	ldr.w	r3, [r3, #205]	; 0xcd
 8008698:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	200009fc 	.word	0x200009fc

080086b4 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char* name, uint8_t* ipaddr, uint16_t port, uint16_t local_port)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b08a      	sub	sp, #40	; 0x28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	607a      	str	r2, [r7, #4]
 80086be:	603b      	str	r3, [r7, #0]
 80086c0:	460b      	mov	r3, r1
 80086c2:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	757b      	strb	r3, [r7, #21]
  conn.RemotePort = port;
 80086d0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80086d2:	82fb      	strh	r3, [r7, #22]
  conn.LocalPort = local_port;
 80086d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80086d6:	833b      	strh	r3, [r7, #24]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 80086d8:	7afb      	ldrb	r3, [r7, #11]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	bf14      	ite	ne
 80086de:	2301      	movne	r3, #1
 80086e0:	2300      	moveq	r3, #0
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	753b      	strb	r3, [r7, #20]
  conn.RemoteIP[0] = ipaddr[0];
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	76bb      	strb	r3, [r7, #26]
  conn.RemoteIP[1] = ipaddr[1];
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	785b      	ldrb	r3, [r3, #1]
 80086f0:	76fb      	strb	r3, [r7, #27]
  conn.RemoteIP[2] = ipaddr[2];
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	789b      	ldrb	r3, [r3, #2]
 80086f6:	773b      	strb	r3, [r7, #28]
  conn.RemoteIP[3] = ipaddr[3];
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	78db      	ldrb	r3, [r3, #3]
 80086fc:	777b      	strb	r3, [r7, #29]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 80086fe:	f107 0314 	add.w	r3, r7, #20
 8008702:	4619      	mov	r1, r3
 8008704:	4807      	ldr	r0, [pc, #28]	; (8008724 <WIFI_OpenClientConnection+0x70>)
 8008706:	f7ff faf7 	bl	8007cf8 <ES_WIFI_StartClientConnection>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d102      	bne.n	8008716 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8008716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800871a:	4618      	mov	r0, r3
 800871c:	3728      	adds	r7, #40	; 0x28
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	200009fc 	.word	0x200009fc

08008728 <WIFI_CloseClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseClientConnection(uint32_t socket)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b088      	sub	sp, #32
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8008730:	2301      	movs	r3, #1
 8008732:	77fb      	strb	r3, [r7, #31]
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	b2db      	uxtb	r3, r3
 8008738:	737b      	strb	r3, [r7, #13]
  
  if(ES_WIFI_StopClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800873a:	f107 030c 	add.w	r3, r7, #12
 800873e:	4619      	mov	r1, r3
 8008740:	4806      	ldr	r0, [pc, #24]	; (800875c <WIFI_CloseClientConnection+0x34>)
 8008742:	f7ff fb8f 	bl	8007e64 <ES_WIFI_StopClientConnection>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d101      	bne.n	8008750 <WIFI_CloseClientConnection+0x28>
  {
    ret = WIFI_STATUS_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	77fb      	strb	r3, [r7, #31]
  }
  return ret; 
 8008750:	7ffb      	ldrb	r3, [r7, #31]
}
 8008752:	4618      	mov	r0, r3
 8008754:	3720      	adds	r7, #32
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	200009fc 	.word	0x200009fc

08008760 <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b088      	sub	sp, #32
 8008764:	af02      	add	r7, sp, #8
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	607b      	str	r3, [r7, #4]
 800876a:	4603      	mov	r3, r0
 800876c:	73fb      	strb	r3, [r7, #15]
 800876e:	4613      	mov	r3, r2
 8008770:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8008776:	89ba      	ldrh	r2, [r7, #12]
 8008778:	7bf9      	ldrb	r1, [r7, #15]
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	9301      	str	r3, [sp, #4]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	4613      	mov	r3, r2
 8008784:	68ba      	ldr	r2, [r7, #8]
 8008786:	4806      	ldr	r0, [pc, #24]	; (80087a0 <WIFI_SendData+0x40>)
 8008788:	f7ff fba6 	bl	8007ed8 <ES_WIFI_SendData>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8008796:	7dfb      	ldrb	r3, [r7, #23]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	200009fc 	.word	0x200009fc

080087a4 <WIFI_ReceiveData>:
  * @param  pdata : pointer to Rx buffer
  * @param  *len :  pointer to length of data
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b088      	sub	sp, #32
 80087a8:	af02      	add	r7, sp, #8
 80087aa:	60b9      	str	r1, [r7, #8]
 80087ac:	607b      	str	r3, [r7, #4]
 80087ae:	4603      	mov	r3, r0
 80087b0:	73fb      	strb	r3, [r7, #15]
 80087b2:	4613      	mov	r3, r2
 80087b4:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 80087b6:	2301      	movs	r3, #1
 80087b8:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80087ba:	89ba      	ldrh	r2, [r7, #12]
 80087bc:	7bf9      	ldrb	r1, [r7, #15]
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	9301      	str	r3, [sp, #4]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	4613      	mov	r3, r2
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	4806      	ldr	r0, [pc, #24]	; (80087e4 <WIFI_ReceiveData+0x40>)
 80087cc:	f7ff fc02 	bl	8007fd4 <ES_WIFI_ReceiveData>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d101      	bne.n	80087da <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK; 
 80087d6:	2300      	movs	r3, #0
 80087d8:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80087da:	7dfb      	ldrb	r3, [r7, #23]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3718      	adds	r7, #24
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	200009fc 	.word	0x200009fc

080087e8 <__errno>:
 80087e8:	4b01      	ldr	r3, [pc, #4]	; (80087f0 <__errno+0x8>)
 80087ea:	6818      	ldr	r0, [r3, #0]
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	2000009c 	.word	0x2000009c

080087f4 <__libc_init_array>:
 80087f4:	b570      	push	{r4, r5, r6, lr}
 80087f6:	4d0d      	ldr	r5, [pc, #52]	; (800882c <__libc_init_array+0x38>)
 80087f8:	4c0d      	ldr	r4, [pc, #52]	; (8008830 <__libc_init_array+0x3c>)
 80087fa:	1b64      	subs	r4, r4, r5
 80087fc:	10a4      	asrs	r4, r4, #2
 80087fe:	2600      	movs	r6, #0
 8008800:	42a6      	cmp	r6, r4
 8008802:	d109      	bne.n	8008818 <__libc_init_array+0x24>
 8008804:	4d0b      	ldr	r5, [pc, #44]	; (8008834 <__libc_init_array+0x40>)
 8008806:	4c0c      	ldr	r4, [pc, #48]	; (8008838 <__libc_init_array+0x44>)
 8008808:	f001 fae2 	bl	8009dd0 <_init>
 800880c:	1b64      	subs	r4, r4, r5
 800880e:	10a4      	asrs	r4, r4, #2
 8008810:	2600      	movs	r6, #0
 8008812:	42a6      	cmp	r6, r4
 8008814:	d105      	bne.n	8008822 <__libc_init_array+0x2e>
 8008816:	bd70      	pop	{r4, r5, r6, pc}
 8008818:	f855 3b04 	ldr.w	r3, [r5], #4
 800881c:	4798      	blx	r3
 800881e:	3601      	adds	r6, #1
 8008820:	e7ee      	b.n	8008800 <__libc_init_array+0xc>
 8008822:	f855 3b04 	ldr.w	r3, [r5], #4
 8008826:	4798      	blx	r3
 8008828:	3601      	adds	r6, #1
 800882a:	e7f2      	b.n	8008812 <__libc_init_array+0x1e>
 800882c:	0800a3b8 	.word	0x0800a3b8
 8008830:	0800a3b8 	.word	0x0800a3b8
 8008834:	0800a3b8 	.word	0x0800a3b8
 8008838:	0800a3bc 	.word	0x0800a3bc

0800883c <memcpy>:
 800883c:	440a      	add	r2, r1
 800883e:	4291      	cmp	r1, r2
 8008840:	f100 33ff 	add.w	r3, r0, #4294967295
 8008844:	d100      	bne.n	8008848 <memcpy+0xc>
 8008846:	4770      	bx	lr
 8008848:	b510      	push	{r4, lr}
 800884a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800884e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008852:	4291      	cmp	r1, r2
 8008854:	d1f9      	bne.n	800884a <memcpy+0xe>
 8008856:	bd10      	pop	{r4, pc}

08008858 <memset>:
 8008858:	4402      	add	r2, r0
 800885a:	4603      	mov	r3, r0
 800885c:	4293      	cmp	r3, r2
 800885e:	d100      	bne.n	8008862 <memset+0xa>
 8008860:	4770      	bx	lr
 8008862:	f803 1b01 	strb.w	r1, [r3], #1
 8008866:	e7f9      	b.n	800885c <memset+0x4>

08008868 <sniprintf>:
 8008868:	b40c      	push	{r2, r3}
 800886a:	b530      	push	{r4, r5, lr}
 800886c:	4b17      	ldr	r3, [pc, #92]	; (80088cc <sniprintf+0x64>)
 800886e:	1e0c      	subs	r4, r1, #0
 8008870:	681d      	ldr	r5, [r3, #0]
 8008872:	b09d      	sub	sp, #116	; 0x74
 8008874:	da08      	bge.n	8008888 <sniprintf+0x20>
 8008876:	238b      	movs	r3, #139	; 0x8b
 8008878:	602b      	str	r3, [r5, #0]
 800887a:	f04f 30ff 	mov.w	r0, #4294967295
 800887e:	b01d      	add	sp, #116	; 0x74
 8008880:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008884:	b002      	add	sp, #8
 8008886:	4770      	bx	lr
 8008888:	f44f 7302 	mov.w	r3, #520	; 0x208
 800888c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008890:	bf14      	ite	ne
 8008892:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008896:	4623      	moveq	r3, r4
 8008898:	9304      	str	r3, [sp, #16]
 800889a:	9307      	str	r3, [sp, #28]
 800889c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088a0:	9002      	str	r0, [sp, #8]
 80088a2:	9006      	str	r0, [sp, #24]
 80088a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80088a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80088aa:	ab21      	add	r3, sp, #132	; 0x84
 80088ac:	a902      	add	r1, sp, #8
 80088ae:	4628      	mov	r0, r5
 80088b0:	9301      	str	r3, [sp, #4]
 80088b2:	f000 fa27 	bl	8008d04 <_svfiprintf_r>
 80088b6:	1c43      	adds	r3, r0, #1
 80088b8:	bfbc      	itt	lt
 80088ba:	238b      	movlt	r3, #139	; 0x8b
 80088bc:	602b      	strlt	r3, [r5, #0]
 80088be:	2c00      	cmp	r4, #0
 80088c0:	d0dd      	beq.n	800887e <sniprintf+0x16>
 80088c2:	9b02      	ldr	r3, [sp, #8]
 80088c4:	2200      	movs	r2, #0
 80088c6:	701a      	strb	r2, [r3, #0]
 80088c8:	e7d9      	b.n	800887e <sniprintf+0x16>
 80088ca:	bf00      	nop
 80088cc:	2000009c 	.word	0x2000009c

080088d0 <siprintf>:
 80088d0:	b40e      	push	{r1, r2, r3}
 80088d2:	b500      	push	{lr}
 80088d4:	b09c      	sub	sp, #112	; 0x70
 80088d6:	ab1d      	add	r3, sp, #116	; 0x74
 80088d8:	9002      	str	r0, [sp, #8]
 80088da:	9006      	str	r0, [sp, #24]
 80088dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088e0:	4809      	ldr	r0, [pc, #36]	; (8008908 <siprintf+0x38>)
 80088e2:	9107      	str	r1, [sp, #28]
 80088e4:	9104      	str	r1, [sp, #16]
 80088e6:	4909      	ldr	r1, [pc, #36]	; (800890c <siprintf+0x3c>)
 80088e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ec:	9105      	str	r1, [sp, #20]
 80088ee:	6800      	ldr	r0, [r0, #0]
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	a902      	add	r1, sp, #8
 80088f4:	f000 fa06 	bl	8008d04 <_svfiprintf_r>
 80088f8:	9b02      	ldr	r3, [sp, #8]
 80088fa:	2200      	movs	r2, #0
 80088fc:	701a      	strb	r2, [r3, #0]
 80088fe:	b01c      	add	sp, #112	; 0x70
 8008900:	f85d eb04 	ldr.w	lr, [sp], #4
 8008904:	b003      	add	sp, #12
 8008906:	4770      	bx	lr
 8008908:	2000009c 	.word	0x2000009c
 800890c:	ffff0208 	.word	0xffff0208

08008910 <strncpy>:
 8008910:	b510      	push	{r4, lr}
 8008912:	3901      	subs	r1, #1
 8008914:	4603      	mov	r3, r0
 8008916:	b132      	cbz	r2, 8008926 <strncpy+0x16>
 8008918:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800891c:	f803 4b01 	strb.w	r4, [r3], #1
 8008920:	3a01      	subs	r2, #1
 8008922:	2c00      	cmp	r4, #0
 8008924:	d1f7      	bne.n	8008916 <strncpy+0x6>
 8008926:	441a      	add	r2, r3
 8008928:	2100      	movs	r1, #0
 800892a:	4293      	cmp	r3, r2
 800892c:	d100      	bne.n	8008930 <strncpy+0x20>
 800892e:	bd10      	pop	{r4, pc}
 8008930:	f803 1b01 	strb.w	r1, [r3], #1
 8008934:	e7f9      	b.n	800892a <strncpy+0x1a>

08008936 <strstr>:
 8008936:	780a      	ldrb	r2, [r1, #0]
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	b96a      	cbnz	r2, 8008958 <strstr+0x22>
 800893c:	bd70      	pop	{r4, r5, r6, pc}
 800893e:	429a      	cmp	r2, r3
 8008940:	d109      	bne.n	8008956 <strstr+0x20>
 8008942:	460c      	mov	r4, r1
 8008944:	4605      	mov	r5, r0
 8008946:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800894a:	2b00      	cmp	r3, #0
 800894c:	d0f6      	beq.n	800893c <strstr+0x6>
 800894e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008952:	429e      	cmp	r6, r3
 8008954:	d0f7      	beq.n	8008946 <strstr+0x10>
 8008956:	3001      	adds	r0, #1
 8008958:	7803      	ldrb	r3, [r0, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1ef      	bne.n	800893e <strstr+0x8>
 800895e:	4618      	mov	r0, r3
 8008960:	e7ec      	b.n	800893c <strstr+0x6>
	...

08008964 <strtok>:
 8008964:	4b16      	ldr	r3, [pc, #88]	; (80089c0 <strtok+0x5c>)
 8008966:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008968:	681e      	ldr	r6, [r3, #0]
 800896a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800896c:	4605      	mov	r5, r0
 800896e:	b9fc      	cbnz	r4, 80089b0 <strtok+0x4c>
 8008970:	2050      	movs	r0, #80	; 0x50
 8008972:	9101      	str	r1, [sp, #4]
 8008974:	f000 f882 	bl	8008a7c <malloc>
 8008978:	9901      	ldr	r1, [sp, #4]
 800897a:	65b0      	str	r0, [r6, #88]	; 0x58
 800897c:	4602      	mov	r2, r0
 800897e:	b920      	cbnz	r0, 800898a <strtok+0x26>
 8008980:	4b10      	ldr	r3, [pc, #64]	; (80089c4 <strtok+0x60>)
 8008982:	4811      	ldr	r0, [pc, #68]	; (80089c8 <strtok+0x64>)
 8008984:	2157      	movs	r1, #87	; 0x57
 8008986:	f000 f849 	bl	8008a1c <__assert_func>
 800898a:	e9c0 4400 	strd	r4, r4, [r0]
 800898e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008992:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008996:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800899a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800899e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80089a2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80089a6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80089aa:	6184      	str	r4, [r0, #24]
 80089ac:	7704      	strb	r4, [r0, #28]
 80089ae:	6244      	str	r4, [r0, #36]	; 0x24
 80089b0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80089b2:	2301      	movs	r3, #1
 80089b4:	4628      	mov	r0, r5
 80089b6:	b002      	add	sp, #8
 80089b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80089bc:	f000 b806 	b.w	80089cc <__strtok_r>
 80089c0:	2000009c 	.word	0x2000009c
 80089c4:	0800a26c 	.word	0x0800a26c
 80089c8:	0800a283 	.word	0x0800a283

080089cc <__strtok_r>:
 80089cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ce:	b908      	cbnz	r0, 80089d4 <__strtok_r+0x8>
 80089d0:	6810      	ldr	r0, [r2, #0]
 80089d2:	b188      	cbz	r0, 80089f8 <__strtok_r+0x2c>
 80089d4:	4604      	mov	r4, r0
 80089d6:	4620      	mov	r0, r4
 80089d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80089dc:	460f      	mov	r7, r1
 80089de:	f817 6b01 	ldrb.w	r6, [r7], #1
 80089e2:	b91e      	cbnz	r6, 80089ec <__strtok_r+0x20>
 80089e4:	b965      	cbnz	r5, 8008a00 <__strtok_r+0x34>
 80089e6:	6015      	str	r5, [r2, #0]
 80089e8:	4628      	mov	r0, r5
 80089ea:	e005      	b.n	80089f8 <__strtok_r+0x2c>
 80089ec:	42b5      	cmp	r5, r6
 80089ee:	d1f6      	bne.n	80089de <__strtok_r+0x12>
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1f0      	bne.n	80089d6 <__strtok_r+0xa>
 80089f4:	6014      	str	r4, [r2, #0]
 80089f6:	7003      	strb	r3, [r0, #0]
 80089f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089fa:	461c      	mov	r4, r3
 80089fc:	e00c      	b.n	8008a18 <__strtok_r+0x4c>
 80089fe:	b915      	cbnz	r5, 8008a06 <__strtok_r+0x3a>
 8008a00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a04:	460e      	mov	r6, r1
 8008a06:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008a0a:	42ab      	cmp	r3, r5
 8008a0c:	d1f7      	bne.n	80089fe <__strtok_r+0x32>
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d0f3      	beq.n	80089fa <__strtok_r+0x2e>
 8008a12:	2300      	movs	r3, #0
 8008a14:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008a18:	6014      	str	r4, [r2, #0]
 8008a1a:	e7ed      	b.n	80089f8 <__strtok_r+0x2c>

08008a1c <__assert_func>:
 8008a1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a1e:	4614      	mov	r4, r2
 8008a20:	461a      	mov	r2, r3
 8008a22:	4b09      	ldr	r3, [pc, #36]	; (8008a48 <__assert_func+0x2c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4605      	mov	r5, r0
 8008a28:	68d8      	ldr	r0, [r3, #12]
 8008a2a:	b14c      	cbz	r4, 8008a40 <__assert_func+0x24>
 8008a2c:	4b07      	ldr	r3, [pc, #28]	; (8008a4c <__assert_func+0x30>)
 8008a2e:	9100      	str	r1, [sp, #0]
 8008a30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a34:	4906      	ldr	r1, [pc, #24]	; (8008a50 <__assert_func+0x34>)
 8008a36:	462b      	mov	r3, r5
 8008a38:	f000 f80e 	bl	8008a58 <fiprintf>
 8008a3c:	f000 fe20 	bl	8009680 <abort>
 8008a40:	4b04      	ldr	r3, [pc, #16]	; (8008a54 <__assert_func+0x38>)
 8008a42:	461c      	mov	r4, r3
 8008a44:	e7f3      	b.n	8008a2e <__assert_func+0x12>
 8008a46:	bf00      	nop
 8008a48:	2000009c 	.word	0x2000009c
 8008a4c:	0800a2e0 	.word	0x0800a2e0
 8008a50:	0800a2ed 	.word	0x0800a2ed
 8008a54:	0800a31b 	.word	0x0800a31b

08008a58 <fiprintf>:
 8008a58:	b40e      	push	{r1, r2, r3}
 8008a5a:	b503      	push	{r0, r1, lr}
 8008a5c:	4601      	mov	r1, r0
 8008a5e:	ab03      	add	r3, sp, #12
 8008a60:	4805      	ldr	r0, [pc, #20]	; (8008a78 <fiprintf+0x20>)
 8008a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a66:	6800      	ldr	r0, [r0, #0]
 8008a68:	9301      	str	r3, [sp, #4]
 8008a6a:	f000 fa75 	bl	8008f58 <_vfiprintf_r>
 8008a6e:	b002      	add	sp, #8
 8008a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a74:	b003      	add	sp, #12
 8008a76:	4770      	bx	lr
 8008a78:	2000009c 	.word	0x2000009c

08008a7c <malloc>:
 8008a7c:	4b02      	ldr	r3, [pc, #8]	; (8008a88 <malloc+0xc>)
 8008a7e:	4601      	mov	r1, r0
 8008a80:	6818      	ldr	r0, [r3, #0]
 8008a82:	f000 b86f 	b.w	8008b64 <_malloc_r>
 8008a86:	bf00      	nop
 8008a88:	2000009c 	.word	0x2000009c

08008a8c <_free_r>:
 8008a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a8e:	2900      	cmp	r1, #0
 8008a90:	d044      	beq.n	8008b1c <_free_r+0x90>
 8008a92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a96:	9001      	str	r0, [sp, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a9e:	bfb8      	it	lt
 8008aa0:	18e4      	addlt	r4, r4, r3
 8008aa2:	f001 f82f 	bl	8009b04 <__malloc_lock>
 8008aa6:	4a1e      	ldr	r2, [pc, #120]	; (8008b20 <_free_r+0x94>)
 8008aa8:	9801      	ldr	r0, [sp, #4]
 8008aaa:	6813      	ldr	r3, [r2, #0]
 8008aac:	b933      	cbnz	r3, 8008abc <_free_r+0x30>
 8008aae:	6063      	str	r3, [r4, #4]
 8008ab0:	6014      	str	r4, [r2, #0]
 8008ab2:	b003      	add	sp, #12
 8008ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ab8:	f001 b82a 	b.w	8009b10 <__malloc_unlock>
 8008abc:	42a3      	cmp	r3, r4
 8008abe:	d908      	bls.n	8008ad2 <_free_r+0x46>
 8008ac0:	6825      	ldr	r5, [r4, #0]
 8008ac2:	1961      	adds	r1, r4, r5
 8008ac4:	428b      	cmp	r3, r1
 8008ac6:	bf01      	itttt	eq
 8008ac8:	6819      	ldreq	r1, [r3, #0]
 8008aca:	685b      	ldreq	r3, [r3, #4]
 8008acc:	1949      	addeq	r1, r1, r5
 8008ace:	6021      	streq	r1, [r4, #0]
 8008ad0:	e7ed      	b.n	8008aae <_free_r+0x22>
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	b10b      	cbz	r3, 8008adc <_free_r+0x50>
 8008ad8:	42a3      	cmp	r3, r4
 8008ada:	d9fa      	bls.n	8008ad2 <_free_r+0x46>
 8008adc:	6811      	ldr	r1, [r2, #0]
 8008ade:	1855      	adds	r5, r2, r1
 8008ae0:	42a5      	cmp	r5, r4
 8008ae2:	d10b      	bne.n	8008afc <_free_r+0x70>
 8008ae4:	6824      	ldr	r4, [r4, #0]
 8008ae6:	4421      	add	r1, r4
 8008ae8:	1854      	adds	r4, r2, r1
 8008aea:	42a3      	cmp	r3, r4
 8008aec:	6011      	str	r1, [r2, #0]
 8008aee:	d1e0      	bne.n	8008ab2 <_free_r+0x26>
 8008af0:	681c      	ldr	r4, [r3, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	6053      	str	r3, [r2, #4]
 8008af6:	4421      	add	r1, r4
 8008af8:	6011      	str	r1, [r2, #0]
 8008afa:	e7da      	b.n	8008ab2 <_free_r+0x26>
 8008afc:	d902      	bls.n	8008b04 <_free_r+0x78>
 8008afe:	230c      	movs	r3, #12
 8008b00:	6003      	str	r3, [r0, #0]
 8008b02:	e7d6      	b.n	8008ab2 <_free_r+0x26>
 8008b04:	6825      	ldr	r5, [r4, #0]
 8008b06:	1961      	adds	r1, r4, r5
 8008b08:	428b      	cmp	r3, r1
 8008b0a:	bf04      	itt	eq
 8008b0c:	6819      	ldreq	r1, [r3, #0]
 8008b0e:	685b      	ldreq	r3, [r3, #4]
 8008b10:	6063      	str	r3, [r4, #4]
 8008b12:	bf04      	itt	eq
 8008b14:	1949      	addeq	r1, r1, r5
 8008b16:	6021      	streq	r1, [r4, #0]
 8008b18:	6054      	str	r4, [r2, #4]
 8008b1a:	e7ca      	b.n	8008ab2 <_free_r+0x26>
 8008b1c:	b003      	add	sp, #12
 8008b1e:	bd30      	pop	{r4, r5, pc}
 8008b20:	20001164 	.word	0x20001164

08008b24 <sbrk_aligned>:
 8008b24:	b570      	push	{r4, r5, r6, lr}
 8008b26:	4e0e      	ldr	r6, [pc, #56]	; (8008b60 <sbrk_aligned+0x3c>)
 8008b28:	460c      	mov	r4, r1
 8008b2a:	6831      	ldr	r1, [r6, #0]
 8008b2c:	4605      	mov	r5, r0
 8008b2e:	b911      	cbnz	r1, 8008b36 <sbrk_aligned+0x12>
 8008b30:	f000 fcd6 	bl	80094e0 <_sbrk_r>
 8008b34:	6030      	str	r0, [r6, #0]
 8008b36:	4621      	mov	r1, r4
 8008b38:	4628      	mov	r0, r5
 8008b3a:	f000 fcd1 	bl	80094e0 <_sbrk_r>
 8008b3e:	1c43      	adds	r3, r0, #1
 8008b40:	d00a      	beq.n	8008b58 <sbrk_aligned+0x34>
 8008b42:	1cc4      	adds	r4, r0, #3
 8008b44:	f024 0403 	bic.w	r4, r4, #3
 8008b48:	42a0      	cmp	r0, r4
 8008b4a:	d007      	beq.n	8008b5c <sbrk_aligned+0x38>
 8008b4c:	1a21      	subs	r1, r4, r0
 8008b4e:	4628      	mov	r0, r5
 8008b50:	f000 fcc6 	bl	80094e0 <_sbrk_r>
 8008b54:	3001      	adds	r0, #1
 8008b56:	d101      	bne.n	8008b5c <sbrk_aligned+0x38>
 8008b58:	f04f 34ff 	mov.w	r4, #4294967295
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	bd70      	pop	{r4, r5, r6, pc}
 8008b60:	20001168 	.word	0x20001168

08008b64 <_malloc_r>:
 8008b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b68:	1ccd      	adds	r5, r1, #3
 8008b6a:	f025 0503 	bic.w	r5, r5, #3
 8008b6e:	3508      	adds	r5, #8
 8008b70:	2d0c      	cmp	r5, #12
 8008b72:	bf38      	it	cc
 8008b74:	250c      	movcc	r5, #12
 8008b76:	2d00      	cmp	r5, #0
 8008b78:	4607      	mov	r7, r0
 8008b7a:	db01      	blt.n	8008b80 <_malloc_r+0x1c>
 8008b7c:	42a9      	cmp	r1, r5
 8008b7e:	d905      	bls.n	8008b8c <_malloc_r+0x28>
 8008b80:	230c      	movs	r3, #12
 8008b82:	603b      	str	r3, [r7, #0]
 8008b84:	2600      	movs	r6, #0
 8008b86:	4630      	mov	r0, r6
 8008b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b8c:	4e2e      	ldr	r6, [pc, #184]	; (8008c48 <_malloc_r+0xe4>)
 8008b8e:	f000 ffb9 	bl	8009b04 <__malloc_lock>
 8008b92:	6833      	ldr	r3, [r6, #0]
 8008b94:	461c      	mov	r4, r3
 8008b96:	bb34      	cbnz	r4, 8008be6 <_malloc_r+0x82>
 8008b98:	4629      	mov	r1, r5
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	f7ff ffc2 	bl	8008b24 <sbrk_aligned>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	d14d      	bne.n	8008c42 <_malloc_r+0xde>
 8008ba6:	6834      	ldr	r4, [r6, #0]
 8008ba8:	4626      	mov	r6, r4
 8008baa:	2e00      	cmp	r6, #0
 8008bac:	d140      	bne.n	8008c30 <_malloc_r+0xcc>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	4631      	mov	r1, r6
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	eb04 0803 	add.w	r8, r4, r3
 8008bb8:	f000 fc92 	bl	80094e0 <_sbrk_r>
 8008bbc:	4580      	cmp	r8, r0
 8008bbe:	d13a      	bne.n	8008c36 <_malloc_r+0xd2>
 8008bc0:	6821      	ldr	r1, [r4, #0]
 8008bc2:	3503      	adds	r5, #3
 8008bc4:	1a6d      	subs	r5, r5, r1
 8008bc6:	f025 0503 	bic.w	r5, r5, #3
 8008bca:	3508      	adds	r5, #8
 8008bcc:	2d0c      	cmp	r5, #12
 8008bce:	bf38      	it	cc
 8008bd0:	250c      	movcc	r5, #12
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	f7ff ffa5 	bl	8008b24 <sbrk_aligned>
 8008bda:	3001      	adds	r0, #1
 8008bdc:	d02b      	beq.n	8008c36 <_malloc_r+0xd2>
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	442b      	add	r3, r5
 8008be2:	6023      	str	r3, [r4, #0]
 8008be4:	e00e      	b.n	8008c04 <_malloc_r+0xa0>
 8008be6:	6822      	ldr	r2, [r4, #0]
 8008be8:	1b52      	subs	r2, r2, r5
 8008bea:	d41e      	bmi.n	8008c2a <_malloc_r+0xc6>
 8008bec:	2a0b      	cmp	r2, #11
 8008bee:	d916      	bls.n	8008c1e <_malloc_r+0xba>
 8008bf0:	1961      	adds	r1, r4, r5
 8008bf2:	42a3      	cmp	r3, r4
 8008bf4:	6025      	str	r5, [r4, #0]
 8008bf6:	bf18      	it	ne
 8008bf8:	6059      	strne	r1, [r3, #4]
 8008bfa:	6863      	ldr	r3, [r4, #4]
 8008bfc:	bf08      	it	eq
 8008bfe:	6031      	streq	r1, [r6, #0]
 8008c00:	5162      	str	r2, [r4, r5]
 8008c02:	604b      	str	r3, [r1, #4]
 8008c04:	4638      	mov	r0, r7
 8008c06:	f104 060b 	add.w	r6, r4, #11
 8008c0a:	f000 ff81 	bl	8009b10 <__malloc_unlock>
 8008c0e:	f026 0607 	bic.w	r6, r6, #7
 8008c12:	1d23      	adds	r3, r4, #4
 8008c14:	1af2      	subs	r2, r6, r3
 8008c16:	d0b6      	beq.n	8008b86 <_malloc_r+0x22>
 8008c18:	1b9b      	subs	r3, r3, r6
 8008c1a:	50a3      	str	r3, [r4, r2]
 8008c1c:	e7b3      	b.n	8008b86 <_malloc_r+0x22>
 8008c1e:	6862      	ldr	r2, [r4, #4]
 8008c20:	42a3      	cmp	r3, r4
 8008c22:	bf0c      	ite	eq
 8008c24:	6032      	streq	r2, [r6, #0]
 8008c26:	605a      	strne	r2, [r3, #4]
 8008c28:	e7ec      	b.n	8008c04 <_malloc_r+0xa0>
 8008c2a:	4623      	mov	r3, r4
 8008c2c:	6864      	ldr	r4, [r4, #4]
 8008c2e:	e7b2      	b.n	8008b96 <_malloc_r+0x32>
 8008c30:	4634      	mov	r4, r6
 8008c32:	6876      	ldr	r6, [r6, #4]
 8008c34:	e7b9      	b.n	8008baa <_malloc_r+0x46>
 8008c36:	230c      	movs	r3, #12
 8008c38:	603b      	str	r3, [r7, #0]
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	f000 ff68 	bl	8009b10 <__malloc_unlock>
 8008c40:	e7a1      	b.n	8008b86 <_malloc_r+0x22>
 8008c42:	6025      	str	r5, [r4, #0]
 8008c44:	e7de      	b.n	8008c04 <_malloc_r+0xa0>
 8008c46:	bf00      	nop
 8008c48:	20001164 	.word	0x20001164

08008c4c <__ssputs_r>:
 8008c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c50:	688e      	ldr	r6, [r1, #8]
 8008c52:	429e      	cmp	r6, r3
 8008c54:	4682      	mov	sl, r0
 8008c56:	460c      	mov	r4, r1
 8008c58:	4690      	mov	r8, r2
 8008c5a:	461f      	mov	r7, r3
 8008c5c:	d838      	bhi.n	8008cd0 <__ssputs_r+0x84>
 8008c5e:	898a      	ldrh	r2, [r1, #12]
 8008c60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c64:	d032      	beq.n	8008ccc <__ssputs_r+0x80>
 8008c66:	6825      	ldr	r5, [r4, #0]
 8008c68:	6909      	ldr	r1, [r1, #16]
 8008c6a:	eba5 0901 	sub.w	r9, r5, r1
 8008c6e:	6965      	ldr	r5, [r4, #20]
 8008c70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c78:	3301      	adds	r3, #1
 8008c7a:	444b      	add	r3, r9
 8008c7c:	106d      	asrs	r5, r5, #1
 8008c7e:	429d      	cmp	r5, r3
 8008c80:	bf38      	it	cc
 8008c82:	461d      	movcc	r5, r3
 8008c84:	0553      	lsls	r3, r2, #21
 8008c86:	d531      	bpl.n	8008cec <__ssputs_r+0xa0>
 8008c88:	4629      	mov	r1, r5
 8008c8a:	f7ff ff6b 	bl	8008b64 <_malloc_r>
 8008c8e:	4606      	mov	r6, r0
 8008c90:	b950      	cbnz	r0, 8008ca8 <__ssputs_r+0x5c>
 8008c92:	230c      	movs	r3, #12
 8008c94:	f8ca 3000 	str.w	r3, [sl]
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c9e:	81a3      	strh	r3, [r4, #12]
 8008ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca8:	6921      	ldr	r1, [r4, #16]
 8008caa:	464a      	mov	r2, r9
 8008cac:	f7ff fdc6 	bl	800883c <memcpy>
 8008cb0:	89a3      	ldrh	r3, [r4, #12]
 8008cb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cba:	81a3      	strh	r3, [r4, #12]
 8008cbc:	6126      	str	r6, [r4, #16]
 8008cbe:	6165      	str	r5, [r4, #20]
 8008cc0:	444e      	add	r6, r9
 8008cc2:	eba5 0509 	sub.w	r5, r5, r9
 8008cc6:	6026      	str	r6, [r4, #0]
 8008cc8:	60a5      	str	r5, [r4, #8]
 8008cca:	463e      	mov	r6, r7
 8008ccc:	42be      	cmp	r6, r7
 8008cce:	d900      	bls.n	8008cd2 <__ssputs_r+0x86>
 8008cd0:	463e      	mov	r6, r7
 8008cd2:	6820      	ldr	r0, [r4, #0]
 8008cd4:	4632      	mov	r2, r6
 8008cd6:	4641      	mov	r1, r8
 8008cd8:	f000 fefa 	bl	8009ad0 <memmove>
 8008cdc:	68a3      	ldr	r3, [r4, #8]
 8008cde:	1b9b      	subs	r3, r3, r6
 8008ce0:	60a3      	str	r3, [r4, #8]
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	4433      	add	r3, r6
 8008ce6:	6023      	str	r3, [r4, #0]
 8008ce8:	2000      	movs	r0, #0
 8008cea:	e7db      	b.n	8008ca4 <__ssputs_r+0x58>
 8008cec:	462a      	mov	r2, r5
 8008cee:	f000 ff15 	bl	8009b1c <_realloc_r>
 8008cf2:	4606      	mov	r6, r0
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d1e1      	bne.n	8008cbc <__ssputs_r+0x70>
 8008cf8:	6921      	ldr	r1, [r4, #16]
 8008cfa:	4650      	mov	r0, sl
 8008cfc:	f7ff fec6 	bl	8008a8c <_free_r>
 8008d00:	e7c7      	b.n	8008c92 <__ssputs_r+0x46>
	...

08008d04 <_svfiprintf_r>:
 8008d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d08:	4698      	mov	r8, r3
 8008d0a:	898b      	ldrh	r3, [r1, #12]
 8008d0c:	061b      	lsls	r3, r3, #24
 8008d0e:	b09d      	sub	sp, #116	; 0x74
 8008d10:	4607      	mov	r7, r0
 8008d12:	460d      	mov	r5, r1
 8008d14:	4614      	mov	r4, r2
 8008d16:	d50e      	bpl.n	8008d36 <_svfiprintf_r+0x32>
 8008d18:	690b      	ldr	r3, [r1, #16]
 8008d1a:	b963      	cbnz	r3, 8008d36 <_svfiprintf_r+0x32>
 8008d1c:	2140      	movs	r1, #64	; 0x40
 8008d1e:	f7ff ff21 	bl	8008b64 <_malloc_r>
 8008d22:	6028      	str	r0, [r5, #0]
 8008d24:	6128      	str	r0, [r5, #16]
 8008d26:	b920      	cbnz	r0, 8008d32 <_svfiprintf_r+0x2e>
 8008d28:	230c      	movs	r3, #12
 8008d2a:	603b      	str	r3, [r7, #0]
 8008d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d30:	e0d1      	b.n	8008ed6 <_svfiprintf_r+0x1d2>
 8008d32:	2340      	movs	r3, #64	; 0x40
 8008d34:	616b      	str	r3, [r5, #20]
 8008d36:	2300      	movs	r3, #0
 8008d38:	9309      	str	r3, [sp, #36]	; 0x24
 8008d3a:	2320      	movs	r3, #32
 8008d3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d40:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d44:	2330      	movs	r3, #48	; 0x30
 8008d46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ef0 <_svfiprintf_r+0x1ec>
 8008d4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d4e:	f04f 0901 	mov.w	r9, #1
 8008d52:	4623      	mov	r3, r4
 8008d54:	469a      	mov	sl, r3
 8008d56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d5a:	b10a      	cbz	r2, 8008d60 <_svfiprintf_r+0x5c>
 8008d5c:	2a25      	cmp	r2, #37	; 0x25
 8008d5e:	d1f9      	bne.n	8008d54 <_svfiprintf_r+0x50>
 8008d60:	ebba 0b04 	subs.w	fp, sl, r4
 8008d64:	d00b      	beq.n	8008d7e <_svfiprintf_r+0x7a>
 8008d66:	465b      	mov	r3, fp
 8008d68:	4622      	mov	r2, r4
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	f7ff ff6d 	bl	8008c4c <__ssputs_r>
 8008d72:	3001      	adds	r0, #1
 8008d74:	f000 80aa 	beq.w	8008ecc <_svfiprintf_r+0x1c8>
 8008d78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d7a:	445a      	add	r2, fp
 8008d7c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 80a2 	beq.w	8008ecc <_svfiprintf_r+0x1c8>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d92:	f10a 0a01 	add.w	sl, sl, #1
 8008d96:	9304      	str	r3, [sp, #16]
 8008d98:	9307      	str	r3, [sp, #28]
 8008d9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d9e:	931a      	str	r3, [sp, #104]	; 0x68
 8008da0:	4654      	mov	r4, sl
 8008da2:	2205      	movs	r2, #5
 8008da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da8:	4851      	ldr	r0, [pc, #324]	; (8008ef0 <_svfiprintf_r+0x1ec>)
 8008daa:	f7f7 fa19 	bl	80001e0 <memchr>
 8008dae:	9a04      	ldr	r2, [sp, #16]
 8008db0:	b9d8      	cbnz	r0, 8008dea <_svfiprintf_r+0xe6>
 8008db2:	06d0      	lsls	r0, r2, #27
 8008db4:	bf44      	itt	mi
 8008db6:	2320      	movmi	r3, #32
 8008db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dbc:	0711      	lsls	r1, r2, #28
 8008dbe:	bf44      	itt	mi
 8008dc0:	232b      	movmi	r3, #43	; 0x2b
 8008dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8008dca:	2b2a      	cmp	r3, #42	; 0x2a
 8008dcc:	d015      	beq.n	8008dfa <_svfiprintf_r+0xf6>
 8008dce:	9a07      	ldr	r2, [sp, #28]
 8008dd0:	4654      	mov	r4, sl
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	f04f 0c0a 	mov.w	ip, #10
 8008dd8:	4621      	mov	r1, r4
 8008dda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dde:	3b30      	subs	r3, #48	; 0x30
 8008de0:	2b09      	cmp	r3, #9
 8008de2:	d94e      	bls.n	8008e82 <_svfiprintf_r+0x17e>
 8008de4:	b1b0      	cbz	r0, 8008e14 <_svfiprintf_r+0x110>
 8008de6:	9207      	str	r2, [sp, #28]
 8008de8:	e014      	b.n	8008e14 <_svfiprintf_r+0x110>
 8008dea:	eba0 0308 	sub.w	r3, r0, r8
 8008dee:	fa09 f303 	lsl.w	r3, r9, r3
 8008df2:	4313      	orrs	r3, r2
 8008df4:	9304      	str	r3, [sp, #16]
 8008df6:	46a2      	mov	sl, r4
 8008df8:	e7d2      	b.n	8008da0 <_svfiprintf_r+0x9c>
 8008dfa:	9b03      	ldr	r3, [sp, #12]
 8008dfc:	1d19      	adds	r1, r3, #4
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	9103      	str	r1, [sp, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	bfbb      	ittet	lt
 8008e06:	425b      	neglt	r3, r3
 8008e08:	f042 0202 	orrlt.w	r2, r2, #2
 8008e0c:	9307      	strge	r3, [sp, #28]
 8008e0e:	9307      	strlt	r3, [sp, #28]
 8008e10:	bfb8      	it	lt
 8008e12:	9204      	strlt	r2, [sp, #16]
 8008e14:	7823      	ldrb	r3, [r4, #0]
 8008e16:	2b2e      	cmp	r3, #46	; 0x2e
 8008e18:	d10c      	bne.n	8008e34 <_svfiprintf_r+0x130>
 8008e1a:	7863      	ldrb	r3, [r4, #1]
 8008e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e1e:	d135      	bne.n	8008e8c <_svfiprintf_r+0x188>
 8008e20:	9b03      	ldr	r3, [sp, #12]
 8008e22:	1d1a      	adds	r2, r3, #4
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	9203      	str	r2, [sp, #12]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	bfb8      	it	lt
 8008e2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e30:	3402      	adds	r4, #2
 8008e32:	9305      	str	r3, [sp, #20]
 8008e34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f00 <_svfiprintf_r+0x1fc>
 8008e38:	7821      	ldrb	r1, [r4, #0]
 8008e3a:	2203      	movs	r2, #3
 8008e3c:	4650      	mov	r0, sl
 8008e3e:	f7f7 f9cf 	bl	80001e0 <memchr>
 8008e42:	b140      	cbz	r0, 8008e56 <_svfiprintf_r+0x152>
 8008e44:	2340      	movs	r3, #64	; 0x40
 8008e46:	eba0 000a 	sub.w	r0, r0, sl
 8008e4a:	fa03 f000 	lsl.w	r0, r3, r0
 8008e4e:	9b04      	ldr	r3, [sp, #16]
 8008e50:	4303      	orrs	r3, r0
 8008e52:	3401      	adds	r4, #1
 8008e54:	9304      	str	r3, [sp, #16]
 8008e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e5a:	4826      	ldr	r0, [pc, #152]	; (8008ef4 <_svfiprintf_r+0x1f0>)
 8008e5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e60:	2206      	movs	r2, #6
 8008e62:	f7f7 f9bd 	bl	80001e0 <memchr>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d038      	beq.n	8008edc <_svfiprintf_r+0x1d8>
 8008e6a:	4b23      	ldr	r3, [pc, #140]	; (8008ef8 <_svfiprintf_r+0x1f4>)
 8008e6c:	bb1b      	cbnz	r3, 8008eb6 <_svfiprintf_r+0x1b2>
 8008e6e:	9b03      	ldr	r3, [sp, #12]
 8008e70:	3307      	adds	r3, #7
 8008e72:	f023 0307 	bic.w	r3, r3, #7
 8008e76:	3308      	adds	r3, #8
 8008e78:	9303      	str	r3, [sp, #12]
 8008e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e7c:	4433      	add	r3, r6
 8008e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e80:	e767      	b.n	8008d52 <_svfiprintf_r+0x4e>
 8008e82:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e86:	460c      	mov	r4, r1
 8008e88:	2001      	movs	r0, #1
 8008e8a:	e7a5      	b.n	8008dd8 <_svfiprintf_r+0xd4>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	3401      	adds	r4, #1
 8008e90:	9305      	str	r3, [sp, #20]
 8008e92:	4619      	mov	r1, r3
 8008e94:	f04f 0c0a 	mov.w	ip, #10
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e9e:	3a30      	subs	r2, #48	; 0x30
 8008ea0:	2a09      	cmp	r2, #9
 8008ea2:	d903      	bls.n	8008eac <_svfiprintf_r+0x1a8>
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d0c5      	beq.n	8008e34 <_svfiprintf_r+0x130>
 8008ea8:	9105      	str	r1, [sp, #20]
 8008eaa:	e7c3      	b.n	8008e34 <_svfiprintf_r+0x130>
 8008eac:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e7f0      	b.n	8008e98 <_svfiprintf_r+0x194>
 8008eb6:	ab03      	add	r3, sp, #12
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	462a      	mov	r2, r5
 8008ebc:	4b0f      	ldr	r3, [pc, #60]	; (8008efc <_svfiprintf_r+0x1f8>)
 8008ebe:	a904      	add	r1, sp, #16
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	f3af 8000 	nop.w
 8008ec6:	1c42      	adds	r2, r0, #1
 8008ec8:	4606      	mov	r6, r0
 8008eca:	d1d6      	bne.n	8008e7a <_svfiprintf_r+0x176>
 8008ecc:	89ab      	ldrh	r3, [r5, #12]
 8008ece:	065b      	lsls	r3, r3, #25
 8008ed0:	f53f af2c 	bmi.w	8008d2c <_svfiprintf_r+0x28>
 8008ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ed6:	b01d      	add	sp, #116	; 0x74
 8008ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008edc:	ab03      	add	r3, sp, #12
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	462a      	mov	r2, r5
 8008ee2:	4b06      	ldr	r3, [pc, #24]	; (8008efc <_svfiprintf_r+0x1f8>)
 8008ee4:	a904      	add	r1, sp, #16
 8008ee6:	4638      	mov	r0, r7
 8008ee8:	f000 f9d4 	bl	8009294 <_printf_i>
 8008eec:	e7eb      	b.n	8008ec6 <_svfiprintf_r+0x1c2>
 8008eee:	bf00      	nop
 8008ef0:	0800a31c 	.word	0x0800a31c
 8008ef4:	0800a326 	.word	0x0800a326
 8008ef8:	00000000 	.word	0x00000000
 8008efc:	08008c4d 	.word	0x08008c4d
 8008f00:	0800a322 	.word	0x0800a322

08008f04 <__sfputc_r>:
 8008f04:	6893      	ldr	r3, [r2, #8]
 8008f06:	3b01      	subs	r3, #1
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	b410      	push	{r4}
 8008f0c:	6093      	str	r3, [r2, #8]
 8008f0e:	da08      	bge.n	8008f22 <__sfputc_r+0x1e>
 8008f10:	6994      	ldr	r4, [r2, #24]
 8008f12:	42a3      	cmp	r3, r4
 8008f14:	db01      	blt.n	8008f1a <__sfputc_r+0x16>
 8008f16:	290a      	cmp	r1, #10
 8008f18:	d103      	bne.n	8008f22 <__sfputc_r+0x1e>
 8008f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f1e:	f000 baef 	b.w	8009500 <__swbuf_r>
 8008f22:	6813      	ldr	r3, [r2, #0]
 8008f24:	1c58      	adds	r0, r3, #1
 8008f26:	6010      	str	r0, [r2, #0]
 8008f28:	7019      	strb	r1, [r3, #0]
 8008f2a:	4608      	mov	r0, r1
 8008f2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <__sfputs_r>:
 8008f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f34:	4606      	mov	r6, r0
 8008f36:	460f      	mov	r7, r1
 8008f38:	4614      	mov	r4, r2
 8008f3a:	18d5      	adds	r5, r2, r3
 8008f3c:	42ac      	cmp	r4, r5
 8008f3e:	d101      	bne.n	8008f44 <__sfputs_r+0x12>
 8008f40:	2000      	movs	r0, #0
 8008f42:	e007      	b.n	8008f54 <__sfputs_r+0x22>
 8008f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f48:	463a      	mov	r2, r7
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	f7ff ffda 	bl	8008f04 <__sfputc_r>
 8008f50:	1c43      	adds	r3, r0, #1
 8008f52:	d1f3      	bne.n	8008f3c <__sfputs_r+0xa>
 8008f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f58 <_vfiprintf_r>:
 8008f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5c:	460d      	mov	r5, r1
 8008f5e:	b09d      	sub	sp, #116	; 0x74
 8008f60:	4614      	mov	r4, r2
 8008f62:	4698      	mov	r8, r3
 8008f64:	4606      	mov	r6, r0
 8008f66:	b118      	cbz	r0, 8008f70 <_vfiprintf_r+0x18>
 8008f68:	6983      	ldr	r3, [r0, #24]
 8008f6a:	b90b      	cbnz	r3, 8008f70 <_vfiprintf_r+0x18>
 8008f6c:	f000 fcaa 	bl	80098c4 <__sinit>
 8008f70:	4b89      	ldr	r3, [pc, #548]	; (8009198 <_vfiprintf_r+0x240>)
 8008f72:	429d      	cmp	r5, r3
 8008f74:	d11b      	bne.n	8008fae <_vfiprintf_r+0x56>
 8008f76:	6875      	ldr	r5, [r6, #4]
 8008f78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f7a:	07d9      	lsls	r1, r3, #31
 8008f7c:	d405      	bmi.n	8008f8a <_vfiprintf_r+0x32>
 8008f7e:	89ab      	ldrh	r3, [r5, #12]
 8008f80:	059a      	lsls	r2, r3, #22
 8008f82:	d402      	bmi.n	8008f8a <_vfiprintf_r+0x32>
 8008f84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f86:	f000 fd3b 	bl	8009a00 <__retarget_lock_acquire_recursive>
 8008f8a:	89ab      	ldrh	r3, [r5, #12]
 8008f8c:	071b      	lsls	r3, r3, #28
 8008f8e:	d501      	bpl.n	8008f94 <_vfiprintf_r+0x3c>
 8008f90:	692b      	ldr	r3, [r5, #16]
 8008f92:	b9eb      	cbnz	r3, 8008fd0 <_vfiprintf_r+0x78>
 8008f94:	4629      	mov	r1, r5
 8008f96:	4630      	mov	r0, r6
 8008f98:	f000 fb04 	bl	80095a4 <__swsetup_r>
 8008f9c:	b1c0      	cbz	r0, 8008fd0 <_vfiprintf_r+0x78>
 8008f9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fa0:	07dc      	lsls	r4, r3, #31
 8008fa2:	d50e      	bpl.n	8008fc2 <_vfiprintf_r+0x6a>
 8008fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa8:	b01d      	add	sp, #116	; 0x74
 8008faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fae:	4b7b      	ldr	r3, [pc, #492]	; (800919c <_vfiprintf_r+0x244>)
 8008fb0:	429d      	cmp	r5, r3
 8008fb2:	d101      	bne.n	8008fb8 <_vfiprintf_r+0x60>
 8008fb4:	68b5      	ldr	r5, [r6, #8]
 8008fb6:	e7df      	b.n	8008f78 <_vfiprintf_r+0x20>
 8008fb8:	4b79      	ldr	r3, [pc, #484]	; (80091a0 <_vfiprintf_r+0x248>)
 8008fba:	429d      	cmp	r5, r3
 8008fbc:	bf08      	it	eq
 8008fbe:	68f5      	ldreq	r5, [r6, #12]
 8008fc0:	e7da      	b.n	8008f78 <_vfiprintf_r+0x20>
 8008fc2:	89ab      	ldrh	r3, [r5, #12]
 8008fc4:	0598      	lsls	r0, r3, #22
 8008fc6:	d4ed      	bmi.n	8008fa4 <_vfiprintf_r+0x4c>
 8008fc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fca:	f000 fd1a 	bl	8009a02 <__retarget_lock_release_recursive>
 8008fce:	e7e9      	b.n	8008fa4 <_vfiprintf_r+0x4c>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd4:	2320      	movs	r3, #32
 8008fd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fda:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fde:	2330      	movs	r3, #48	; 0x30
 8008fe0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80091a4 <_vfiprintf_r+0x24c>
 8008fe4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fe8:	f04f 0901 	mov.w	r9, #1
 8008fec:	4623      	mov	r3, r4
 8008fee:	469a      	mov	sl, r3
 8008ff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ff4:	b10a      	cbz	r2, 8008ffa <_vfiprintf_r+0xa2>
 8008ff6:	2a25      	cmp	r2, #37	; 0x25
 8008ff8:	d1f9      	bne.n	8008fee <_vfiprintf_r+0x96>
 8008ffa:	ebba 0b04 	subs.w	fp, sl, r4
 8008ffe:	d00b      	beq.n	8009018 <_vfiprintf_r+0xc0>
 8009000:	465b      	mov	r3, fp
 8009002:	4622      	mov	r2, r4
 8009004:	4629      	mov	r1, r5
 8009006:	4630      	mov	r0, r6
 8009008:	f7ff ff93 	bl	8008f32 <__sfputs_r>
 800900c:	3001      	adds	r0, #1
 800900e:	f000 80aa 	beq.w	8009166 <_vfiprintf_r+0x20e>
 8009012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009014:	445a      	add	r2, fp
 8009016:	9209      	str	r2, [sp, #36]	; 0x24
 8009018:	f89a 3000 	ldrb.w	r3, [sl]
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 80a2 	beq.w	8009166 <_vfiprintf_r+0x20e>
 8009022:	2300      	movs	r3, #0
 8009024:	f04f 32ff 	mov.w	r2, #4294967295
 8009028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800902c:	f10a 0a01 	add.w	sl, sl, #1
 8009030:	9304      	str	r3, [sp, #16]
 8009032:	9307      	str	r3, [sp, #28]
 8009034:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009038:	931a      	str	r3, [sp, #104]	; 0x68
 800903a:	4654      	mov	r4, sl
 800903c:	2205      	movs	r2, #5
 800903e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009042:	4858      	ldr	r0, [pc, #352]	; (80091a4 <_vfiprintf_r+0x24c>)
 8009044:	f7f7 f8cc 	bl	80001e0 <memchr>
 8009048:	9a04      	ldr	r2, [sp, #16]
 800904a:	b9d8      	cbnz	r0, 8009084 <_vfiprintf_r+0x12c>
 800904c:	06d1      	lsls	r1, r2, #27
 800904e:	bf44      	itt	mi
 8009050:	2320      	movmi	r3, #32
 8009052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009056:	0713      	lsls	r3, r2, #28
 8009058:	bf44      	itt	mi
 800905a:	232b      	movmi	r3, #43	; 0x2b
 800905c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009060:	f89a 3000 	ldrb.w	r3, [sl]
 8009064:	2b2a      	cmp	r3, #42	; 0x2a
 8009066:	d015      	beq.n	8009094 <_vfiprintf_r+0x13c>
 8009068:	9a07      	ldr	r2, [sp, #28]
 800906a:	4654      	mov	r4, sl
 800906c:	2000      	movs	r0, #0
 800906e:	f04f 0c0a 	mov.w	ip, #10
 8009072:	4621      	mov	r1, r4
 8009074:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009078:	3b30      	subs	r3, #48	; 0x30
 800907a:	2b09      	cmp	r3, #9
 800907c:	d94e      	bls.n	800911c <_vfiprintf_r+0x1c4>
 800907e:	b1b0      	cbz	r0, 80090ae <_vfiprintf_r+0x156>
 8009080:	9207      	str	r2, [sp, #28]
 8009082:	e014      	b.n	80090ae <_vfiprintf_r+0x156>
 8009084:	eba0 0308 	sub.w	r3, r0, r8
 8009088:	fa09 f303 	lsl.w	r3, r9, r3
 800908c:	4313      	orrs	r3, r2
 800908e:	9304      	str	r3, [sp, #16]
 8009090:	46a2      	mov	sl, r4
 8009092:	e7d2      	b.n	800903a <_vfiprintf_r+0xe2>
 8009094:	9b03      	ldr	r3, [sp, #12]
 8009096:	1d19      	adds	r1, r3, #4
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	9103      	str	r1, [sp, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	bfbb      	ittet	lt
 80090a0:	425b      	neglt	r3, r3
 80090a2:	f042 0202 	orrlt.w	r2, r2, #2
 80090a6:	9307      	strge	r3, [sp, #28]
 80090a8:	9307      	strlt	r3, [sp, #28]
 80090aa:	bfb8      	it	lt
 80090ac:	9204      	strlt	r2, [sp, #16]
 80090ae:	7823      	ldrb	r3, [r4, #0]
 80090b0:	2b2e      	cmp	r3, #46	; 0x2e
 80090b2:	d10c      	bne.n	80090ce <_vfiprintf_r+0x176>
 80090b4:	7863      	ldrb	r3, [r4, #1]
 80090b6:	2b2a      	cmp	r3, #42	; 0x2a
 80090b8:	d135      	bne.n	8009126 <_vfiprintf_r+0x1ce>
 80090ba:	9b03      	ldr	r3, [sp, #12]
 80090bc:	1d1a      	adds	r2, r3, #4
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	9203      	str	r2, [sp, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	bfb8      	it	lt
 80090c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80090ca:	3402      	adds	r4, #2
 80090cc:	9305      	str	r3, [sp, #20]
 80090ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80091b4 <_vfiprintf_r+0x25c>
 80090d2:	7821      	ldrb	r1, [r4, #0]
 80090d4:	2203      	movs	r2, #3
 80090d6:	4650      	mov	r0, sl
 80090d8:	f7f7 f882 	bl	80001e0 <memchr>
 80090dc:	b140      	cbz	r0, 80090f0 <_vfiprintf_r+0x198>
 80090de:	2340      	movs	r3, #64	; 0x40
 80090e0:	eba0 000a 	sub.w	r0, r0, sl
 80090e4:	fa03 f000 	lsl.w	r0, r3, r0
 80090e8:	9b04      	ldr	r3, [sp, #16]
 80090ea:	4303      	orrs	r3, r0
 80090ec:	3401      	adds	r4, #1
 80090ee:	9304      	str	r3, [sp, #16]
 80090f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f4:	482c      	ldr	r0, [pc, #176]	; (80091a8 <_vfiprintf_r+0x250>)
 80090f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090fa:	2206      	movs	r2, #6
 80090fc:	f7f7 f870 	bl	80001e0 <memchr>
 8009100:	2800      	cmp	r0, #0
 8009102:	d03f      	beq.n	8009184 <_vfiprintf_r+0x22c>
 8009104:	4b29      	ldr	r3, [pc, #164]	; (80091ac <_vfiprintf_r+0x254>)
 8009106:	bb1b      	cbnz	r3, 8009150 <_vfiprintf_r+0x1f8>
 8009108:	9b03      	ldr	r3, [sp, #12]
 800910a:	3307      	adds	r3, #7
 800910c:	f023 0307 	bic.w	r3, r3, #7
 8009110:	3308      	adds	r3, #8
 8009112:	9303      	str	r3, [sp, #12]
 8009114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009116:	443b      	add	r3, r7
 8009118:	9309      	str	r3, [sp, #36]	; 0x24
 800911a:	e767      	b.n	8008fec <_vfiprintf_r+0x94>
 800911c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009120:	460c      	mov	r4, r1
 8009122:	2001      	movs	r0, #1
 8009124:	e7a5      	b.n	8009072 <_vfiprintf_r+0x11a>
 8009126:	2300      	movs	r3, #0
 8009128:	3401      	adds	r4, #1
 800912a:	9305      	str	r3, [sp, #20]
 800912c:	4619      	mov	r1, r3
 800912e:	f04f 0c0a 	mov.w	ip, #10
 8009132:	4620      	mov	r0, r4
 8009134:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009138:	3a30      	subs	r2, #48	; 0x30
 800913a:	2a09      	cmp	r2, #9
 800913c:	d903      	bls.n	8009146 <_vfiprintf_r+0x1ee>
 800913e:	2b00      	cmp	r3, #0
 8009140:	d0c5      	beq.n	80090ce <_vfiprintf_r+0x176>
 8009142:	9105      	str	r1, [sp, #20]
 8009144:	e7c3      	b.n	80090ce <_vfiprintf_r+0x176>
 8009146:	fb0c 2101 	mla	r1, ip, r1, r2
 800914a:	4604      	mov	r4, r0
 800914c:	2301      	movs	r3, #1
 800914e:	e7f0      	b.n	8009132 <_vfiprintf_r+0x1da>
 8009150:	ab03      	add	r3, sp, #12
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	462a      	mov	r2, r5
 8009156:	4b16      	ldr	r3, [pc, #88]	; (80091b0 <_vfiprintf_r+0x258>)
 8009158:	a904      	add	r1, sp, #16
 800915a:	4630      	mov	r0, r6
 800915c:	f3af 8000 	nop.w
 8009160:	4607      	mov	r7, r0
 8009162:	1c78      	adds	r0, r7, #1
 8009164:	d1d6      	bne.n	8009114 <_vfiprintf_r+0x1bc>
 8009166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009168:	07d9      	lsls	r1, r3, #31
 800916a:	d405      	bmi.n	8009178 <_vfiprintf_r+0x220>
 800916c:	89ab      	ldrh	r3, [r5, #12]
 800916e:	059a      	lsls	r2, r3, #22
 8009170:	d402      	bmi.n	8009178 <_vfiprintf_r+0x220>
 8009172:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009174:	f000 fc45 	bl	8009a02 <__retarget_lock_release_recursive>
 8009178:	89ab      	ldrh	r3, [r5, #12]
 800917a:	065b      	lsls	r3, r3, #25
 800917c:	f53f af12 	bmi.w	8008fa4 <_vfiprintf_r+0x4c>
 8009180:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009182:	e711      	b.n	8008fa8 <_vfiprintf_r+0x50>
 8009184:	ab03      	add	r3, sp, #12
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	462a      	mov	r2, r5
 800918a:	4b09      	ldr	r3, [pc, #36]	; (80091b0 <_vfiprintf_r+0x258>)
 800918c:	a904      	add	r1, sp, #16
 800918e:	4630      	mov	r0, r6
 8009190:	f000 f880 	bl	8009294 <_printf_i>
 8009194:	e7e4      	b.n	8009160 <_vfiprintf_r+0x208>
 8009196:	bf00      	nop
 8009198:	0800a370 	.word	0x0800a370
 800919c:	0800a390 	.word	0x0800a390
 80091a0:	0800a350 	.word	0x0800a350
 80091a4:	0800a31c 	.word	0x0800a31c
 80091a8:	0800a326 	.word	0x0800a326
 80091ac:	00000000 	.word	0x00000000
 80091b0:	08008f33 	.word	0x08008f33
 80091b4:	0800a322 	.word	0x0800a322

080091b8 <_printf_common>:
 80091b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091bc:	4616      	mov	r6, r2
 80091be:	4699      	mov	r9, r3
 80091c0:	688a      	ldr	r2, [r1, #8]
 80091c2:	690b      	ldr	r3, [r1, #16]
 80091c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091c8:	4293      	cmp	r3, r2
 80091ca:	bfb8      	it	lt
 80091cc:	4613      	movlt	r3, r2
 80091ce:	6033      	str	r3, [r6, #0]
 80091d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091d4:	4607      	mov	r7, r0
 80091d6:	460c      	mov	r4, r1
 80091d8:	b10a      	cbz	r2, 80091de <_printf_common+0x26>
 80091da:	3301      	adds	r3, #1
 80091dc:	6033      	str	r3, [r6, #0]
 80091de:	6823      	ldr	r3, [r4, #0]
 80091e0:	0699      	lsls	r1, r3, #26
 80091e2:	bf42      	ittt	mi
 80091e4:	6833      	ldrmi	r3, [r6, #0]
 80091e6:	3302      	addmi	r3, #2
 80091e8:	6033      	strmi	r3, [r6, #0]
 80091ea:	6825      	ldr	r5, [r4, #0]
 80091ec:	f015 0506 	ands.w	r5, r5, #6
 80091f0:	d106      	bne.n	8009200 <_printf_common+0x48>
 80091f2:	f104 0a19 	add.w	sl, r4, #25
 80091f6:	68e3      	ldr	r3, [r4, #12]
 80091f8:	6832      	ldr	r2, [r6, #0]
 80091fa:	1a9b      	subs	r3, r3, r2
 80091fc:	42ab      	cmp	r3, r5
 80091fe:	dc26      	bgt.n	800924e <_printf_common+0x96>
 8009200:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009204:	1e13      	subs	r3, r2, #0
 8009206:	6822      	ldr	r2, [r4, #0]
 8009208:	bf18      	it	ne
 800920a:	2301      	movne	r3, #1
 800920c:	0692      	lsls	r2, r2, #26
 800920e:	d42b      	bmi.n	8009268 <_printf_common+0xb0>
 8009210:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009214:	4649      	mov	r1, r9
 8009216:	4638      	mov	r0, r7
 8009218:	47c0      	blx	r8
 800921a:	3001      	adds	r0, #1
 800921c:	d01e      	beq.n	800925c <_printf_common+0xa4>
 800921e:	6823      	ldr	r3, [r4, #0]
 8009220:	68e5      	ldr	r5, [r4, #12]
 8009222:	6832      	ldr	r2, [r6, #0]
 8009224:	f003 0306 	and.w	r3, r3, #6
 8009228:	2b04      	cmp	r3, #4
 800922a:	bf08      	it	eq
 800922c:	1aad      	subeq	r5, r5, r2
 800922e:	68a3      	ldr	r3, [r4, #8]
 8009230:	6922      	ldr	r2, [r4, #16]
 8009232:	bf0c      	ite	eq
 8009234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009238:	2500      	movne	r5, #0
 800923a:	4293      	cmp	r3, r2
 800923c:	bfc4      	itt	gt
 800923e:	1a9b      	subgt	r3, r3, r2
 8009240:	18ed      	addgt	r5, r5, r3
 8009242:	2600      	movs	r6, #0
 8009244:	341a      	adds	r4, #26
 8009246:	42b5      	cmp	r5, r6
 8009248:	d11a      	bne.n	8009280 <_printf_common+0xc8>
 800924a:	2000      	movs	r0, #0
 800924c:	e008      	b.n	8009260 <_printf_common+0xa8>
 800924e:	2301      	movs	r3, #1
 8009250:	4652      	mov	r2, sl
 8009252:	4649      	mov	r1, r9
 8009254:	4638      	mov	r0, r7
 8009256:	47c0      	blx	r8
 8009258:	3001      	adds	r0, #1
 800925a:	d103      	bne.n	8009264 <_printf_common+0xac>
 800925c:	f04f 30ff 	mov.w	r0, #4294967295
 8009260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009264:	3501      	adds	r5, #1
 8009266:	e7c6      	b.n	80091f6 <_printf_common+0x3e>
 8009268:	18e1      	adds	r1, r4, r3
 800926a:	1c5a      	adds	r2, r3, #1
 800926c:	2030      	movs	r0, #48	; 0x30
 800926e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009272:	4422      	add	r2, r4
 8009274:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009278:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800927c:	3302      	adds	r3, #2
 800927e:	e7c7      	b.n	8009210 <_printf_common+0x58>
 8009280:	2301      	movs	r3, #1
 8009282:	4622      	mov	r2, r4
 8009284:	4649      	mov	r1, r9
 8009286:	4638      	mov	r0, r7
 8009288:	47c0      	blx	r8
 800928a:	3001      	adds	r0, #1
 800928c:	d0e6      	beq.n	800925c <_printf_common+0xa4>
 800928e:	3601      	adds	r6, #1
 8009290:	e7d9      	b.n	8009246 <_printf_common+0x8e>
	...

08009294 <_printf_i>:
 8009294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009298:	7e0f      	ldrb	r7, [r1, #24]
 800929a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800929c:	2f78      	cmp	r7, #120	; 0x78
 800929e:	4691      	mov	r9, r2
 80092a0:	4680      	mov	r8, r0
 80092a2:	460c      	mov	r4, r1
 80092a4:	469a      	mov	sl, r3
 80092a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092aa:	d807      	bhi.n	80092bc <_printf_i+0x28>
 80092ac:	2f62      	cmp	r7, #98	; 0x62
 80092ae:	d80a      	bhi.n	80092c6 <_printf_i+0x32>
 80092b0:	2f00      	cmp	r7, #0
 80092b2:	f000 80d8 	beq.w	8009466 <_printf_i+0x1d2>
 80092b6:	2f58      	cmp	r7, #88	; 0x58
 80092b8:	f000 80a3 	beq.w	8009402 <_printf_i+0x16e>
 80092bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092c4:	e03a      	b.n	800933c <_printf_i+0xa8>
 80092c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092ca:	2b15      	cmp	r3, #21
 80092cc:	d8f6      	bhi.n	80092bc <_printf_i+0x28>
 80092ce:	a101      	add	r1, pc, #4	; (adr r1, 80092d4 <_printf_i+0x40>)
 80092d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092d4:	0800932d 	.word	0x0800932d
 80092d8:	08009341 	.word	0x08009341
 80092dc:	080092bd 	.word	0x080092bd
 80092e0:	080092bd 	.word	0x080092bd
 80092e4:	080092bd 	.word	0x080092bd
 80092e8:	080092bd 	.word	0x080092bd
 80092ec:	08009341 	.word	0x08009341
 80092f0:	080092bd 	.word	0x080092bd
 80092f4:	080092bd 	.word	0x080092bd
 80092f8:	080092bd 	.word	0x080092bd
 80092fc:	080092bd 	.word	0x080092bd
 8009300:	0800944d 	.word	0x0800944d
 8009304:	08009371 	.word	0x08009371
 8009308:	0800942f 	.word	0x0800942f
 800930c:	080092bd 	.word	0x080092bd
 8009310:	080092bd 	.word	0x080092bd
 8009314:	0800946f 	.word	0x0800946f
 8009318:	080092bd 	.word	0x080092bd
 800931c:	08009371 	.word	0x08009371
 8009320:	080092bd 	.word	0x080092bd
 8009324:	080092bd 	.word	0x080092bd
 8009328:	08009437 	.word	0x08009437
 800932c:	682b      	ldr	r3, [r5, #0]
 800932e:	1d1a      	adds	r2, r3, #4
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	602a      	str	r2, [r5, #0]
 8009334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800933c:	2301      	movs	r3, #1
 800933e:	e0a3      	b.n	8009488 <_printf_i+0x1f4>
 8009340:	6820      	ldr	r0, [r4, #0]
 8009342:	6829      	ldr	r1, [r5, #0]
 8009344:	0606      	lsls	r6, r0, #24
 8009346:	f101 0304 	add.w	r3, r1, #4
 800934a:	d50a      	bpl.n	8009362 <_printf_i+0xce>
 800934c:	680e      	ldr	r6, [r1, #0]
 800934e:	602b      	str	r3, [r5, #0]
 8009350:	2e00      	cmp	r6, #0
 8009352:	da03      	bge.n	800935c <_printf_i+0xc8>
 8009354:	232d      	movs	r3, #45	; 0x2d
 8009356:	4276      	negs	r6, r6
 8009358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800935c:	485e      	ldr	r0, [pc, #376]	; (80094d8 <_printf_i+0x244>)
 800935e:	230a      	movs	r3, #10
 8009360:	e019      	b.n	8009396 <_printf_i+0x102>
 8009362:	680e      	ldr	r6, [r1, #0]
 8009364:	602b      	str	r3, [r5, #0]
 8009366:	f010 0f40 	tst.w	r0, #64	; 0x40
 800936a:	bf18      	it	ne
 800936c:	b236      	sxthne	r6, r6
 800936e:	e7ef      	b.n	8009350 <_printf_i+0xbc>
 8009370:	682b      	ldr	r3, [r5, #0]
 8009372:	6820      	ldr	r0, [r4, #0]
 8009374:	1d19      	adds	r1, r3, #4
 8009376:	6029      	str	r1, [r5, #0]
 8009378:	0601      	lsls	r1, r0, #24
 800937a:	d501      	bpl.n	8009380 <_printf_i+0xec>
 800937c:	681e      	ldr	r6, [r3, #0]
 800937e:	e002      	b.n	8009386 <_printf_i+0xf2>
 8009380:	0646      	lsls	r6, r0, #25
 8009382:	d5fb      	bpl.n	800937c <_printf_i+0xe8>
 8009384:	881e      	ldrh	r6, [r3, #0]
 8009386:	4854      	ldr	r0, [pc, #336]	; (80094d8 <_printf_i+0x244>)
 8009388:	2f6f      	cmp	r7, #111	; 0x6f
 800938a:	bf0c      	ite	eq
 800938c:	2308      	moveq	r3, #8
 800938e:	230a      	movne	r3, #10
 8009390:	2100      	movs	r1, #0
 8009392:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009396:	6865      	ldr	r5, [r4, #4]
 8009398:	60a5      	str	r5, [r4, #8]
 800939a:	2d00      	cmp	r5, #0
 800939c:	bfa2      	ittt	ge
 800939e:	6821      	ldrge	r1, [r4, #0]
 80093a0:	f021 0104 	bicge.w	r1, r1, #4
 80093a4:	6021      	strge	r1, [r4, #0]
 80093a6:	b90e      	cbnz	r6, 80093ac <_printf_i+0x118>
 80093a8:	2d00      	cmp	r5, #0
 80093aa:	d04d      	beq.n	8009448 <_printf_i+0x1b4>
 80093ac:	4615      	mov	r5, r2
 80093ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80093b2:	fb03 6711 	mls	r7, r3, r1, r6
 80093b6:	5dc7      	ldrb	r7, [r0, r7]
 80093b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093bc:	4637      	mov	r7, r6
 80093be:	42bb      	cmp	r3, r7
 80093c0:	460e      	mov	r6, r1
 80093c2:	d9f4      	bls.n	80093ae <_printf_i+0x11a>
 80093c4:	2b08      	cmp	r3, #8
 80093c6:	d10b      	bne.n	80093e0 <_printf_i+0x14c>
 80093c8:	6823      	ldr	r3, [r4, #0]
 80093ca:	07de      	lsls	r6, r3, #31
 80093cc:	d508      	bpl.n	80093e0 <_printf_i+0x14c>
 80093ce:	6923      	ldr	r3, [r4, #16]
 80093d0:	6861      	ldr	r1, [r4, #4]
 80093d2:	4299      	cmp	r1, r3
 80093d4:	bfde      	ittt	le
 80093d6:	2330      	movle	r3, #48	; 0x30
 80093d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80093e0:	1b52      	subs	r2, r2, r5
 80093e2:	6122      	str	r2, [r4, #16]
 80093e4:	f8cd a000 	str.w	sl, [sp]
 80093e8:	464b      	mov	r3, r9
 80093ea:	aa03      	add	r2, sp, #12
 80093ec:	4621      	mov	r1, r4
 80093ee:	4640      	mov	r0, r8
 80093f0:	f7ff fee2 	bl	80091b8 <_printf_common>
 80093f4:	3001      	adds	r0, #1
 80093f6:	d14c      	bne.n	8009492 <_printf_i+0x1fe>
 80093f8:	f04f 30ff 	mov.w	r0, #4294967295
 80093fc:	b004      	add	sp, #16
 80093fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009402:	4835      	ldr	r0, [pc, #212]	; (80094d8 <_printf_i+0x244>)
 8009404:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009408:	6829      	ldr	r1, [r5, #0]
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009410:	6029      	str	r1, [r5, #0]
 8009412:	061d      	lsls	r5, r3, #24
 8009414:	d514      	bpl.n	8009440 <_printf_i+0x1ac>
 8009416:	07df      	lsls	r7, r3, #31
 8009418:	bf44      	itt	mi
 800941a:	f043 0320 	orrmi.w	r3, r3, #32
 800941e:	6023      	strmi	r3, [r4, #0]
 8009420:	b91e      	cbnz	r6, 800942a <_printf_i+0x196>
 8009422:	6823      	ldr	r3, [r4, #0]
 8009424:	f023 0320 	bic.w	r3, r3, #32
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	2310      	movs	r3, #16
 800942c:	e7b0      	b.n	8009390 <_printf_i+0xfc>
 800942e:	6823      	ldr	r3, [r4, #0]
 8009430:	f043 0320 	orr.w	r3, r3, #32
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	2378      	movs	r3, #120	; 0x78
 8009438:	4828      	ldr	r0, [pc, #160]	; (80094dc <_printf_i+0x248>)
 800943a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800943e:	e7e3      	b.n	8009408 <_printf_i+0x174>
 8009440:	0659      	lsls	r1, r3, #25
 8009442:	bf48      	it	mi
 8009444:	b2b6      	uxthmi	r6, r6
 8009446:	e7e6      	b.n	8009416 <_printf_i+0x182>
 8009448:	4615      	mov	r5, r2
 800944a:	e7bb      	b.n	80093c4 <_printf_i+0x130>
 800944c:	682b      	ldr	r3, [r5, #0]
 800944e:	6826      	ldr	r6, [r4, #0]
 8009450:	6961      	ldr	r1, [r4, #20]
 8009452:	1d18      	adds	r0, r3, #4
 8009454:	6028      	str	r0, [r5, #0]
 8009456:	0635      	lsls	r5, r6, #24
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	d501      	bpl.n	8009460 <_printf_i+0x1cc>
 800945c:	6019      	str	r1, [r3, #0]
 800945e:	e002      	b.n	8009466 <_printf_i+0x1d2>
 8009460:	0670      	lsls	r0, r6, #25
 8009462:	d5fb      	bpl.n	800945c <_printf_i+0x1c8>
 8009464:	8019      	strh	r1, [r3, #0]
 8009466:	2300      	movs	r3, #0
 8009468:	6123      	str	r3, [r4, #16]
 800946a:	4615      	mov	r5, r2
 800946c:	e7ba      	b.n	80093e4 <_printf_i+0x150>
 800946e:	682b      	ldr	r3, [r5, #0]
 8009470:	1d1a      	adds	r2, r3, #4
 8009472:	602a      	str	r2, [r5, #0]
 8009474:	681d      	ldr	r5, [r3, #0]
 8009476:	6862      	ldr	r2, [r4, #4]
 8009478:	2100      	movs	r1, #0
 800947a:	4628      	mov	r0, r5
 800947c:	f7f6 feb0 	bl	80001e0 <memchr>
 8009480:	b108      	cbz	r0, 8009486 <_printf_i+0x1f2>
 8009482:	1b40      	subs	r0, r0, r5
 8009484:	6060      	str	r0, [r4, #4]
 8009486:	6863      	ldr	r3, [r4, #4]
 8009488:	6123      	str	r3, [r4, #16]
 800948a:	2300      	movs	r3, #0
 800948c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009490:	e7a8      	b.n	80093e4 <_printf_i+0x150>
 8009492:	6923      	ldr	r3, [r4, #16]
 8009494:	462a      	mov	r2, r5
 8009496:	4649      	mov	r1, r9
 8009498:	4640      	mov	r0, r8
 800949a:	47d0      	blx	sl
 800949c:	3001      	adds	r0, #1
 800949e:	d0ab      	beq.n	80093f8 <_printf_i+0x164>
 80094a0:	6823      	ldr	r3, [r4, #0]
 80094a2:	079b      	lsls	r3, r3, #30
 80094a4:	d413      	bmi.n	80094ce <_printf_i+0x23a>
 80094a6:	68e0      	ldr	r0, [r4, #12]
 80094a8:	9b03      	ldr	r3, [sp, #12]
 80094aa:	4298      	cmp	r0, r3
 80094ac:	bfb8      	it	lt
 80094ae:	4618      	movlt	r0, r3
 80094b0:	e7a4      	b.n	80093fc <_printf_i+0x168>
 80094b2:	2301      	movs	r3, #1
 80094b4:	4632      	mov	r2, r6
 80094b6:	4649      	mov	r1, r9
 80094b8:	4640      	mov	r0, r8
 80094ba:	47d0      	blx	sl
 80094bc:	3001      	adds	r0, #1
 80094be:	d09b      	beq.n	80093f8 <_printf_i+0x164>
 80094c0:	3501      	adds	r5, #1
 80094c2:	68e3      	ldr	r3, [r4, #12]
 80094c4:	9903      	ldr	r1, [sp, #12]
 80094c6:	1a5b      	subs	r3, r3, r1
 80094c8:	42ab      	cmp	r3, r5
 80094ca:	dcf2      	bgt.n	80094b2 <_printf_i+0x21e>
 80094cc:	e7eb      	b.n	80094a6 <_printf_i+0x212>
 80094ce:	2500      	movs	r5, #0
 80094d0:	f104 0619 	add.w	r6, r4, #25
 80094d4:	e7f5      	b.n	80094c2 <_printf_i+0x22e>
 80094d6:	bf00      	nop
 80094d8:	0800a32d 	.word	0x0800a32d
 80094dc:	0800a33e 	.word	0x0800a33e

080094e0 <_sbrk_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	4d06      	ldr	r5, [pc, #24]	; (80094fc <_sbrk_r+0x1c>)
 80094e4:	2300      	movs	r3, #0
 80094e6:	4604      	mov	r4, r0
 80094e8:	4608      	mov	r0, r1
 80094ea:	602b      	str	r3, [r5, #0]
 80094ec:	f7f8 fb00 	bl	8001af0 <_sbrk>
 80094f0:	1c43      	adds	r3, r0, #1
 80094f2:	d102      	bne.n	80094fa <_sbrk_r+0x1a>
 80094f4:	682b      	ldr	r3, [r5, #0]
 80094f6:	b103      	cbz	r3, 80094fa <_sbrk_r+0x1a>
 80094f8:	6023      	str	r3, [r4, #0]
 80094fa:	bd38      	pop	{r3, r4, r5, pc}
 80094fc:	20001170 	.word	0x20001170

08009500 <__swbuf_r>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	460e      	mov	r6, r1
 8009504:	4614      	mov	r4, r2
 8009506:	4605      	mov	r5, r0
 8009508:	b118      	cbz	r0, 8009512 <__swbuf_r+0x12>
 800950a:	6983      	ldr	r3, [r0, #24]
 800950c:	b90b      	cbnz	r3, 8009512 <__swbuf_r+0x12>
 800950e:	f000 f9d9 	bl	80098c4 <__sinit>
 8009512:	4b21      	ldr	r3, [pc, #132]	; (8009598 <__swbuf_r+0x98>)
 8009514:	429c      	cmp	r4, r3
 8009516:	d12b      	bne.n	8009570 <__swbuf_r+0x70>
 8009518:	686c      	ldr	r4, [r5, #4]
 800951a:	69a3      	ldr	r3, [r4, #24]
 800951c:	60a3      	str	r3, [r4, #8]
 800951e:	89a3      	ldrh	r3, [r4, #12]
 8009520:	071a      	lsls	r2, r3, #28
 8009522:	d52f      	bpl.n	8009584 <__swbuf_r+0x84>
 8009524:	6923      	ldr	r3, [r4, #16]
 8009526:	b36b      	cbz	r3, 8009584 <__swbuf_r+0x84>
 8009528:	6923      	ldr	r3, [r4, #16]
 800952a:	6820      	ldr	r0, [r4, #0]
 800952c:	1ac0      	subs	r0, r0, r3
 800952e:	6963      	ldr	r3, [r4, #20]
 8009530:	b2f6      	uxtb	r6, r6
 8009532:	4283      	cmp	r3, r0
 8009534:	4637      	mov	r7, r6
 8009536:	dc04      	bgt.n	8009542 <__swbuf_r+0x42>
 8009538:	4621      	mov	r1, r4
 800953a:	4628      	mov	r0, r5
 800953c:	f000 f92e 	bl	800979c <_fflush_r>
 8009540:	bb30      	cbnz	r0, 8009590 <__swbuf_r+0x90>
 8009542:	68a3      	ldr	r3, [r4, #8]
 8009544:	3b01      	subs	r3, #1
 8009546:	60a3      	str	r3, [r4, #8]
 8009548:	6823      	ldr	r3, [r4, #0]
 800954a:	1c5a      	adds	r2, r3, #1
 800954c:	6022      	str	r2, [r4, #0]
 800954e:	701e      	strb	r6, [r3, #0]
 8009550:	6963      	ldr	r3, [r4, #20]
 8009552:	3001      	adds	r0, #1
 8009554:	4283      	cmp	r3, r0
 8009556:	d004      	beq.n	8009562 <__swbuf_r+0x62>
 8009558:	89a3      	ldrh	r3, [r4, #12]
 800955a:	07db      	lsls	r3, r3, #31
 800955c:	d506      	bpl.n	800956c <__swbuf_r+0x6c>
 800955e:	2e0a      	cmp	r6, #10
 8009560:	d104      	bne.n	800956c <__swbuf_r+0x6c>
 8009562:	4621      	mov	r1, r4
 8009564:	4628      	mov	r0, r5
 8009566:	f000 f919 	bl	800979c <_fflush_r>
 800956a:	b988      	cbnz	r0, 8009590 <__swbuf_r+0x90>
 800956c:	4638      	mov	r0, r7
 800956e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009570:	4b0a      	ldr	r3, [pc, #40]	; (800959c <__swbuf_r+0x9c>)
 8009572:	429c      	cmp	r4, r3
 8009574:	d101      	bne.n	800957a <__swbuf_r+0x7a>
 8009576:	68ac      	ldr	r4, [r5, #8]
 8009578:	e7cf      	b.n	800951a <__swbuf_r+0x1a>
 800957a:	4b09      	ldr	r3, [pc, #36]	; (80095a0 <__swbuf_r+0xa0>)
 800957c:	429c      	cmp	r4, r3
 800957e:	bf08      	it	eq
 8009580:	68ec      	ldreq	r4, [r5, #12]
 8009582:	e7ca      	b.n	800951a <__swbuf_r+0x1a>
 8009584:	4621      	mov	r1, r4
 8009586:	4628      	mov	r0, r5
 8009588:	f000 f80c 	bl	80095a4 <__swsetup_r>
 800958c:	2800      	cmp	r0, #0
 800958e:	d0cb      	beq.n	8009528 <__swbuf_r+0x28>
 8009590:	f04f 37ff 	mov.w	r7, #4294967295
 8009594:	e7ea      	b.n	800956c <__swbuf_r+0x6c>
 8009596:	bf00      	nop
 8009598:	0800a370 	.word	0x0800a370
 800959c:	0800a390 	.word	0x0800a390
 80095a0:	0800a350 	.word	0x0800a350

080095a4 <__swsetup_r>:
 80095a4:	4b32      	ldr	r3, [pc, #200]	; (8009670 <__swsetup_r+0xcc>)
 80095a6:	b570      	push	{r4, r5, r6, lr}
 80095a8:	681d      	ldr	r5, [r3, #0]
 80095aa:	4606      	mov	r6, r0
 80095ac:	460c      	mov	r4, r1
 80095ae:	b125      	cbz	r5, 80095ba <__swsetup_r+0x16>
 80095b0:	69ab      	ldr	r3, [r5, #24]
 80095b2:	b913      	cbnz	r3, 80095ba <__swsetup_r+0x16>
 80095b4:	4628      	mov	r0, r5
 80095b6:	f000 f985 	bl	80098c4 <__sinit>
 80095ba:	4b2e      	ldr	r3, [pc, #184]	; (8009674 <__swsetup_r+0xd0>)
 80095bc:	429c      	cmp	r4, r3
 80095be:	d10f      	bne.n	80095e0 <__swsetup_r+0x3c>
 80095c0:	686c      	ldr	r4, [r5, #4]
 80095c2:	89a3      	ldrh	r3, [r4, #12]
 80095c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095c8:	0719      	lsls	r1, r3, #28
 80095ca:	d42c      	bmi.n	8009626 <__swsetup_r+0x82>
 80095cc:	06dd      	lsls	r5, r3, #27
 80095ce:	d411      	bmi.n	80095f4 <__swsetup_r+0x50>
 80095d0:	2309      	movs	r3, #9
 80095d2:	6033      	str	r3, [r6, #0]
 80095d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095d8:	81a3      	strh	r3, [r4, #12]
 80095da:	f04f 30ff 	mov.w	r0, #4294967295
 80095de:	e03e      	b.n	800965e <__swsetup_r+0xba>
 80095e0:	4b25      	ldr	r3, [pc, #148]	; (8009678 <__swsetup_r+0xd4>)
 80095e2:	429c      	cmp	r4, r3
 80095e4:	d101      	bne.n	80095ea <__swsetup_r+0x46>
 80095e6:	68ac      	ldr	r4, [r5, #8]
 80095e8:	e7eb      	b.n	80095c2 <__swsetup_r+0x1e>
 80095ea:	4b24      	ldr	r3, [pc, #144]	; (800967c <__swsetup_r+0xd8>)
 80095ec:	429c      	cmp	r4, r3
 80095ee:	bf08      	it	eq
 80095f0:	68ec      	ldreq	r4, [r5, #12]
 80095f2:	e7e6      	b.n	80095c2 <__swsetup_r+0x1e>
 80095f4:	0758      	lsls	r0, r3, #29
 80095f6:	d512      	bpl.n	800961e <__swsetup_r+0x7a>
 80095f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095fa:	b141      	cbz	r1, 800960e <__swsetup_r+0x6a>
 80095fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009600:	4299      	cmp	r1, r3
 8009602:	d002      	beq.n	800960a <__swsetup_r+0x66>
 8009604:	4630      	mov	r0, r6
 8009606:	f7ff fa41 	bl	8008a8c <_free_r>
 800960a:	2300      	movs	r3, #0
 800960c:	6363      	str	r3, [r4, #52]	; 0x34
 800960e:	89a3      	ldrh	r3, [r4, #12]
 8009610:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009614:	81a3      	strh	r3, [r4, #12]
 8009616:	2300      	movs	r3, #0
 8009618:	6063      	str	r3, [r4, #4]
 800961a:	6923      	ldr	r3, [r4, #16]
 800961c:	6023      	str	r3, [r4, #0]
 800961e:	89a3      	ldrh	r3, [r4, #12]
 8009620:	f043 0308 	orr.w	r3, r3, #8
 8009624:	81a3      	strh	r3, [r4, #12]
 8009626:	6923      	ldr	r3, [r4, #16]
 8009628:	b94b      	cbnz	r3, 800963e <__swsetup_r+0x9a>
 800962a:	89a3      	ldrh	r3, [r4, #12]
 800962c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009634:	d003      	beq.n	800963e <__swsetup_r+0x9a>
 8009636:	4621      	mov	r1, r4
 8009638:	4630      	mov	r0, r6
 800963a:	f000 fa09 	bl	8009a50 <__smakebuf_r>
 800963e:	89a0      	ldrh	r0, [r4, #12]
 8009640:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009644:	f010 0301 	ands.w	r3, r0, #1
 8009648:	d00a      	beq.n	8009660 <__swsetup_r+0xbc>
 800964a:	2300      	movs	r3, #0
 800964c:	60a3      	str	r3, [r4, #8]
 800964e:	6963      	ldr	r3, [r4, #20]
 8009650:	425b      	negs	r3, r3
 8009652:	61a3      	str	r3, [r4, #24]
 8009654:	6923      	ldr	r3, [r4, #16]
 8009656:	b943      	cbnz	r3, 800966a <__swsetup_r+0xc6>
 8009658:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800965c:	d1ba      	bne.n	80095d4 <__swsetup_r+0x30>
 800965e:	bd70      	pop	{r4, r5, r6, pc}
 8009660:	0781      	lsls	r1, r0, #30
 8009662:	bf58      	it	pl
 8009664:	6963      	ldrpl	r3, [r4, #20]
 8009666:	60a3      	str	r3, [r4, #8]
 8009668:	e7f4      	b.n	8009654 <__swsetup_r+0xb0>
 800966a:	2000      	movs	r0, #0
 800966c:	e7f7      	b.n	800965e <__swsetup_r+0xba>
 800966e:	bf00      	nop
 8009670:	2000009c 	.word	0x2000009c
 8009674:	0800a370 	.word	0x0800a370
 8009678:	0800a390 	.word	0x0800a390
 800967c:	0800a350 	.word	0x0800a350

08009680 <abort>:
 8009680:	b508      	push	{r3, lr}
 8009682:	2006      	movs	r0, #6
 8009684:	f000 faa2 	bl	8009bcc <raise>
 8009688:	2001      	movs	r0, #1
 800968a:	f7f8 f9ba 	bl	8001a02 <_exit>
	...

08009690 <__sflush_r>:
 8009690:	898a      	ldrh	r2, [r1, #12]
 8009692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009696:	4605      	mov	r5, r0
 8009698:	0710      	lsls	r0, r2, #28
 800969a:	460c      	mov	r4, r1
 800969c:	d458      	bmi.n	8009750 <__sflush_r+0xc0>
 800969e:	684b      	ldr	r3, [r1, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	dc05      	bgt.n	80096b0 <__sflush_r+0x20>
 80096a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	dc02      	bgt.n	80096b0 <__sflush_r+0x20>
 80096aa:	2000      	movs	r0, #0
 80096ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096b2:	2e00      	cmp	r6, #0
 80096b4:	d0f9      	beq.n	80096aa <__sflush_r+0x1a>
 80096b6:	2300      	movs	r3, #0
 80096b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096bc:	682f      	ldr	r7, [r5, #0]
 80096be:	602b      	str	r3, [r5, #0]
 80096c0:	d032      	beq.n	8009728 <__sflush_r+0x98>
 80096c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096c4:	89a3      	ldrh	r3, [r4, #12]
 80096c6:	075a      	lsls	r2, r3, #29
 80096c8:	d505      	bpl.n	80096d6 <__sflush_r+0x46>
 80096ca:	6863      	ldr	r3, [r4, #4]
 80096cc:	1ac0      	subs	r0, r0, r3
 80096ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096d0:	b10b      	cbz	r3, 80096d6 <__sflush_r+0x46>
 80096d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096d4:	1ac0      	subs	r0, r0, r3
 80096d6:	2300      	movs	r3, #0
 80096d8:	4602      	mov	r2, r0
 80096da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096dc:	6a21      	ldr	r1, [r4, #32]
 80096de:	4628      	mov	r0, r5
 80096e0:	47b0      	blx	r6
 80096e2:	1c43      	adds	r3, r0, #1
 80096e4:	89a3      	ldrh	r3, [r4, #12]
 80096e6:	d106      	bne.n	80096f6 <__sflush_r+0x66>
 80096e8:	6829      	ldr	r1, [r5, #0]
 80096ea:	291d      	cmp	r1, #29
 80096ec:	d82c      	bhi.n	8009748 <__sflush_r+0xb8>
 80096ee:	4a2a      	ldr	r2, [pc, #168]	; (8009798 <__sflush_r+0x108>)
 80096f0:	40ca      	lsrs	r2, r1
 80096f2:	07d6      	lsls	r6, r2, #31
 80096f4:	d528      	bpl.n	8009748 <__sflush_r+0xb8>
 80096f6:	2200      	movs	r2, #0
 80096f8:	6062      	str	r2, [r4, #4]
 80096fa:	04d9      	lsls	r1, r3, #19
 80096fc:	6922      	ldr	r2, [r4, #16]
 80096fe:	6022      	str	r2, [r4, #0]
 8009700:	d504      	bpl.n	800970c <__sflush_r+0x7c>
 8009702:	1c42      	adds	r2, r0, #1
 8009704:	d101      	bne.n	800970a <__sflush_r+0x7a>
 8009706:	682b      	ldr	r3, [r5, #0]
 8009708:	b903      	cbnz	r3, 800970c <__sflush_r+0x7c>
 800970a:	6560      	str	r0, [r4, #84]	; 0x54
 800970c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800970e:	602f      	str	r7, [r5, #0]
 8009710:	2900      	cmp	r1, #0
 8009712:	d0ca      	beq.n	80096aa <__sflush_r+0x1a>
 8009714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009718:	4299      	cmp	r1, r3
 800971a:	d002      	beq.n	8009722 <__sflush_r+0x92>
 800971c:	4628      	mov	r0, r5
 800971e:	f7ff f9b5 	bl	8008a8c <_free_r>
 8009722:	2000      	movs	r0, #0
 8009724:	6360      	str	r0, [r4, #52]	; 0x34
 8009726:	e7c1      	b.n	80096ac <__sflush_r+0x1c>
 8009728:	6a21      	ldr	r1, [r4, #32]
 800972a:	2301      	movs	r3, #1
 800972c:	4628      	mov	r0, r5
 800972e:	47b0      	blx	r6
 8009730:	1c41      	adds	r1, r0, #1
 8009732:	d1c7      	bne.n	80096c4 <__sflush_r+0x34>
 8009734:	682b      	ldr	r3, [r5, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d0c4      	beq.n	80096c4 <__sflush_r+0x34>
 800973a:	2b1d      	cmp	r3, #29
 800973c:	d001      	beq.n	8009742 <__sflush_r+0xb2>
 800973e:	2b16      	cmp	r3, #22
 8009740:	d101      	bne.n	8009746 <__sflush_r+0xb6>
 8009742:	602f      	str	r7, [r5, #0]
 8009744:	e7b1      	b.n	80096aa <__sflush_r+0x1a>
 8009746:	89a3      	ldrh	r3, [r4, #12]
 8009748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800974c:	81a3      	strh	r3, [r4, #12]
 800974e:	e7ad      	b.n	80096ac <__sflush_r+0x1c>
 8009750:	690f      	ldr	r7, [r1, #16]
 8009752:	2f00      	cmp	r7, #0
 8009754:	d0a9      	beq.n	80096aa <__sflush_r+0x1a>
 8009756:	0793      	lsls	r3, r2, #30
 8009758:	680e      	ldr	r6, [r1, #0]
 800975a:	bf08      	it	eq
 800975c:	694b      	ldreq	r3, [r1, #20]
 800975e:	600f      	str	r7, [r1, #0]
 8009760:	bf18      	it	ne
 8009762:	2300      	movne	r3, #0
 8009764:	eba6 0807 	sub.w	r8, r6, r7
 8009768:	608b      	str	r3, [r1, #8]
 800976a:	f1b8 0f00 	cmp.w	r8, #0
 800976e:	dd9c      	ble.n	80096aa <__sflush_r+0x1a>
 8009770:	6a21      	ldr	r1, [r4, #32]
 8009772:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009774:	4643      	mov	r3, r8
 8009776:	463a      	mov	r2, r7
 8009778:	4628      	mov	r0, r5
 800977a:	47b0      	blx	r6
 800977c:	2800      	cmp	r0, #0
 800977e:	dc06      	bgt.n	800978e <__sflush_r+0xfe>
 8009780:	89a3      	ldrh	r3, [r4, #12]
 8009782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009786:	81a3      	strh	r3, [r4, #12]
 8009788:	f04f 30ff 	mov.w	r0, #4294967295
 800978c:	e78e      	b.n	80096ac <__sflush_r+0x1c>
 800978e:	4407      	add	r7, r0
 8009790:	eba8 0800 	sub.w	r8, r8, r0
 8009794:	e7e9      	b.n	800976a <__sflush_r+0xda>
 8009796:	bf00      	nop
 8009798:	20400001 	.word	0x20400001

0800979c <_fflush_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	690b      	ldr	r3, [r1, #16]
 80097a0:	4605      	mov	r5, r0
 80097a2:	460c      	mov	r4, r1
 80097a4:	b913      	cbnz	r3, 80097ac <_fflush_r+0x10>
 80097a6:	2500      	movs	r5, #0
 80097a8:	4628      	mov	r0, r5
 80097aa:	bd38      	pop	{r3, r4, r5, pc}
 80097ac:	b118      	cbz	r0, 80097b6 <_fflush_r+0x1a>
 80097ae:	6983      	ldr	r3, [r0, #24]
 80097b0:	b90b      	cbnz	r3, 80097b6 <_fflush_r+0x1a>
 80097b2:	f000 f887 	bl	80098c4 <__sinit>
 80097b6:	4b14      	ldr	r3, [pc, #80]	; (8009808 <_fflush_r+0x6c>)
 80097b8:	429c      	cmp	r4, r3
 80097ba:	d11b      	bne.n	80097f4 <_fflush_r+0x58>
 80097bc:	686c      	ldr	r4, [r5, #4]
 80097be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d0ef      	beq.n	80097a6 <_fflush_r+0xa>
 80097c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097c8:	07d0      	lsls	r0, r2, #31
 80097ca:	d404      	bmi.n	80097d6 <_fflush_r+0x3a>
 80097cc:	0599      	lsls	r1, r3, #22
 80097ce:	d402      	bmi.n	80097d6 <_fflush_r+0x3a>
 80097d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097d2:	f000 f915 	bl	8009a00 <__retarget_lock_acquire_recursive>
 80097d6:	4628      	mov	r0, r5
 80097d8:	4621      	mov	r1, r4
 80097da:	f7ff ff59 	bl	8009690 <__sflush_r>
 80097de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097e0:	07da      	lsls	r2, r3, #31
 80097e2:	4605      	mov	r5, r0
 80097e4:	d4e0      	bmi.n	80097a8 <_fflush_r+0xc>
 80097e6:	89a3      	ldrh	r3, [r4, #12]
 80097e8:	059b      	lsls	r3, r3, #22
 80097ea:	d4dd      	bmi.n	80097a8 <_fflush_r+0xc>
 80097ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ee:	f000 f908 	bl	8009a02 <__retarget_lock_release_recursive>
 80097f2:	e7d9      	b.n	80097a8 <_fflush_r+0xc>
 80097f4:	4b05      	ldr	r3, [pc, #20]	; (800980c <_fflush_r+0x70>)
 80097f6:	429c      	cmp	r4, r3
 80097f8:	d101      	bne.n	80097fe <_fflush_r+0x62>
 80097fa:	68ac      	ldr	r4, [r5, #8]
 80097fc:	e7df      	b.n	80097be <_fflush_r+0x22>
 80097fe:	4b04      	ldr	r3, [pc, #16]	; (8009810 <_fflush_r+0x74>)
 8009800:	429c      	cmp	r4, r3
 8009802:	bf08      	it	eq
 8009804:	68ec      	ldreq	r4, [r5, #12]
 8009806:	e7da      	b.n	80097be <_fflush_r+0x22>
 8009808:	0800a370 	.word	0x0800a370
 800980c:	0800a390 	.word	0x0800a390
 8009810:	0800a350 	.word	0x0800a350

08009814 <std>:
 8009814:	2300      	movs	r3, #0
 8009816:	b510      	push	{r4, lr}
 8009818:	4604      	mov	r4, r0
 800981a:	e9c0 3300 	strd	r3, r3, [r0]
 800981e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009822:	6083      	str	r3, [r0, #8]
 8009824:	8181      	strh	r1, [r0, #12]
 8009826:	6643      	str	r3, [r0, #100]	; 0x64
 8009828:	81c2      	strh	r2, [r0, #14]
 800982a:	6183      	str	r3, [r0, #24]
 800982c:	4619      	mov	r1, r3
 800982e:	2208      	movs	r2, #8
 8009830:	305c      	adds	r0, #92	; 0x5c
 8009832:	f7ff f811 	bl	8008858 <memset>
 8009836:	4b05      	ldr	r3, [pc, #20]	; (800984c <std+0x38>)
 8009838:	6263      	str	r3, [r4, #36]	; 0x24
 800983a:	4b05      	ldr	r3, [pc, #20]	; (8009850 <std+0x3c>)
 800983c:	62a3      	str	r3, [r4, #40]	; 0x28
 800983e:	4b05      	ldr	r3, [pc, #20]	; (8009854 <std+0x40>)
 8009840:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009842:	4b05      	ldr	r3, [pc, #20]	; (8009858 <std+0x44>)
 8009844:	6224      	str	r4, [r4, #32]
 8009846:	6323      	str	r3, [r4, #48]	; 0x30
 8009848:	bd10      	pop	{r4, pc}
 800984a:	bf00      	nop
 800984c:	08009c05 	.word	0x08009c05
 8009850:	08009c27 	.word	0x08009c27
 8009854:	08009c5f 	.word	0x08009c5f
 8009858:	08009c83 	.word	0x08009c83

0800985c <_cleanup_r>:
 800985c:	4901      	ldr	r1, [pc, #4]	; (8009864 <_cleanup_r+0x8>)
 800985e:	f000 b8af 	b.w	80099c0 <_fwalk_reent>
 8009862:	bf00      	nop
 8009864:	0800979d 	.word	0x0800979d

08009868 <__sfmoreglue>:
 8009868:	b570      	push	{r4, r5, r6, lr}
 800986a:	2268      	movs	r2, #104	; 0x68
 800986c:	1e4d      	subs	r5, r1, #1
 800986e:	4355      	muls	r5, r2
 8009870:	460e      	mov	r6, r1
 8009872:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009876:	f7ff f975 	bl	8008b64 <_malloc_r>
 800987a:	4604      	mov	r4, r0
 800987c:	b140      	cbz	r0, 8009890 <__sfmoreglue+0x28>
 800987e:	2100      	movs	r1, #0
 8009880:	e9c0 1600 	strd	r1, r6, [r0]
 8009884:	300c      	adds	r0, #12
 8009886:	60a0      	str	r0, [r4, #8]
 8009888:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800988c:	f7fe ffe4 	bl	8008858 <memset>
 8009890:	4620      	mov	r0, r4
 8009892:	bd70      	pop	{r4, r5, r6, pc}

08009894 <__sfp_lock_acquire>:
 8009894:	4801      	ldr	r0, [pc, #4]	; (800989c <__sfp_lock_acquire+0x8>)
 8009896:	f000 b8b3 	b.w	8009a00 <__retarget_lock_acquire_recursive>
 800989a:	bf00      	nop
 800989c:	2000116d 	.word	0x2000116d

080098a0 <__sfp_lock_release>:
 80098a0:	4801      	ldr	r0, [pc, #4]	; (80098a8 <__sfp_lock_release+0x8>)
 80098a2:	f000 b8ae 	b.w	8009a02 <__retarget_lock_release_recursive>
 80098a6:	bf00      	nop
 80098a8:	2000116d 	.word	0x2000116d

080098ac <__sinit_lock_acquire>:
 80098ac:	4801      	ldr	r0, [pc, #4]	; (80098b4 <__sinit_lock_acquire+0x8>)
 80098ae:	f000 b8a7 	b.w	8009a00 <__retarget_lock_acquire_recursive>
 80098b2:	bf00      	nop
 80098b4:	2000116e 	.word	0x2000116e

080098b8 <__sinit_lock_release>:
 80098b8:	4801      	ldr	r0, [pc, #4]	; (80098c0 <__sinit_lock_release+0x8>)
 80098ba:	f000 b8a2 	b.w	8009a02 <__retarget_lock_release_recursive>
 80098be:	bf00      	nop
 80098c0:	2000116e 	.word	0x2000116e

080098c4 <__sinit>:
 80098c4:	b510      	push	{r4, lr}
 80098c6:	4604      	mov	r4, r0
 80098c8:	f7ff fff0 	bl	80098ac <__sinit_lock_acquire>
 80098cc:	69a3      	ldr	r3, [r4, #24]
 80098ce:	b11b      	cbz	r3, 80098d8 <__sinit+0x14>
 80098d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098d4:	f7ff bff0 	b.w	80098b8 <__sinit_lock_release>
 80098d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80098dc:	6523      	str	r3, [r4, #80]	; 0x50
 80098de:	4b13      	ldr	r3, [pc, #76]	; (800992c <__sinit+0x68>)
 80098e0:	4a13      	ldr	r2, [pc, #76]	; (8009930 <__sinit+0x6c>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80098e6:	42a3      	cmp	r3, r4
 80098e8:	bf04      	itt	eq
 80098ea:	2301      	moveq	r3, #1
 80098ec:	61a3      	streq	r3, [r4, #24]
 80098ee:	4620      	mov	r0, r4
 80098f0:	f000 f820 	bl	8009934 <__sfp>
 80098f4:	6060      	str	r0, [r4, #4]
 80098f6:	4620      	mov	r0, r4
 80098f8:	f000 f81c 	bl	8009934 <__sfp>
 80098fc:	60a0      	str	r0, [r4, #8]
 80098fe:	4620      	mov	r0, r4
 8009900:	f000 f818 	bl	8009934 <__sfp>
 8009904:	2200      	movs	r2, #0
 8009906:	60e0      	str	r0, [r4, #12]
 8009908:	2104      	movs	r1, #4
 800990a:	6860      	ldr	r0, [r4, #4]
 800990c:	f7ff ff82 	bl	8009814 <std>
 8009910:	68a0      	ldr	r0, [r4, #8]
 8009912:	2201      	movs	r2, #1
 8009914:	2109      	movs	r1, #9
 8009916:	f7ff ff7d 	bl	8009814 <std>
 800991a:	68e0      	ldr	r0, [r4, #12]
 800991c:	2202      	movs	r2, #2
 800991e:	2112      	movs	r1, #18
 8009920:	f7ff ff78 	bl	8009814 <std>
 8009924:	2301      	movs	r3, #1
 8009926:	61a3      	str	r3, [r4, #24]
 8009928:	e7d2      	b.n	80098d0 <__sinit+0xc>
 800992a:	bf00      	nop
 800992c:	0800a268 	.word	0x0800a268
 8009930:	0800985d 	.word	0x0800985d

08009934 <__sfp>:
 8009934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009936:	4607      	mov	r7, r0
 8009938:	f7ff ffac 	bl	8009894 <__sfp_lock_acquire>
 800993c:	4b1e      	ldr	r3, [pc, #120]	; (80099b8 <__sfp+0x84>)
 800993e:	681e      	ldr	r6, [r3, #0]
 8009940:	69b3      	ldr	r3, [r6, #24]
 8009942:	b913      	cbnz	r3, 800994a <__sfp+0x16>
 8009944:	4630      	mov	r0, r6
 8009946:	f7ff ffbd 	bl	80098c4 <__sinit>
 800994a:	3648      	adds	r6, #72	; 0x48
 800994c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009950:	3b01      	subs	r3, #1
 8009952:	d503      	bpl.n	800995c <__sfp+0x28>
 8009954:	6833      	ldr	r3, [r6, #0]
 8009956:	b30b      	cbz	r3, 800999c <__sfp+0x68>
 8009958:	6836      	ldr	r6, [r6, #0]
 800995a:	e7f7      	b.n	800994c <__sfp+0x18>
 800995c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009960:	b9d5      	cbnz	r5, 8009998 <__sfp+0x64>
 8009962:	4b16      	ldr	r3, [pc, #88]	; (80099bc <__sfp+0x88>)
 8009964:	60e3      	str	r3, [r4, #12]
 8009966:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800996a:	6665      	str	r5, [r4, #100]	; 0x64
 800996c:	f000 f847 	bl	80099fe <__retarget_lock_init_recursive>
 8009970:	f7ff ff96 	bl	80098a0 <__sfp_lock_release>
 8009974:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009978:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800997c:	6025      	str	r5, [r4, #0]
 800997e:	61a5      	str	r5, [r4, #24]
 8009980:	2208      	movs	r2, #8
 8009982:	4629      	mov	r1, r5
 8009984:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009988:	f7fe ff66 	bl	8008858 <memset>
 800998c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009990:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009994:	4620      	mov	r0, r4
 8009996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009998:	3468      	adds	r4, #104	; 0x68
 800999a:	e7d9      	b.n	8009950 <__sfp+0x1c>
 800999c:	2104      	movs	r1, #4
 800999e:	4638      	mov	r0, r7
 80099a0:	f7ff ff62 	bl	8009868 <__sfmoreglue>
 80099a4:	4604      	mov	r4, r0
 80099a6:	6030      	str	r0, [r6, #0]
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d1d5      	bne.n	8009958 <__sfp+0x24>
 80099ac:	f7ff ff78 	bl	80098a0 <__sfp_lock_release>
 80099b0:	230c      	movs	r3, #12
 80099b2:	603b      	str	r3, [r7, #0]
 80099b4:	e7ee      	b.n	8009994 <__sfp+0x60>
 80099b6:	bf00      	nop
 80099b8:	0800a268 	.word	0x0800a268
 80099bc:	ffff0001 	.word	0xffff0001

080099c0 <_fwalk_reent>:
 80099c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099c4:	4606      	mov	r6, r0
 80099c6:	4688      	mov	r8, r1
 80099c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099cc:	2700      	movs	r7, #0
 80099ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099d2:	f1b9 0901 	subs.w	r9, r9, #1
 80099d6:	d505      	bpl.n	80099e4 <_fwalk_reent+0x24>
 80099d8:	6824      	ldr	r4, [r4, #0]
 80099da:	2c00      	cmp	r4, #0
 80099dc:	d1f7      	bne.n	80099ce <_fwalk_reent+0xe>
 80099de:	4638      	mov	r0, r7
 80099e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099e4:	89ab      	ldrh	r3, [r5, #12]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d907      	bls.n	80099fa <_fwalk_reent+0x3a>
 80099ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099ee:	3301      	adds	r3, #1
 80099f0:	d003      	beq.n	80099fa <_fwalk_reent+0x3a>
 80099f2:	4629      	mov	r1, r5
 80099f4:	4630      	mov	r0, r6
 80099f6:	47c0      	blx	r8
 80099f8:	4307      	orrs	r7, r0
 80099fa:	3568      	adds	r5, #104	; 0x68
 80099fc:	e7e9      	b.n	80099d2 <_fwalk_reent+0x12>

080099fe <__retarget_lock_init_recursive>:
 80099fe:	4770      	bx	lr

08009a00 <__retarget_lock_acquire_recursive>:
 8009a00:	4770      	bx	lr

08009a02 <__retarget_lock_release_recursive>:
 8009a02:	4770      	bx	lr

08009a04 <__swhatbuf_r>:
 8009a04:	b570      	push	{r4, r5, r6, lr}
 8009a06:	460e      	mov	r6, r1
 8009a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a0c:	2900      	cmp	r1, #0
 8009a0e:	b096      	sub	sp, #88	; 0x58
 8009a10:	4614      	mov	r4, r2
 8009a12:	461d      	mov	r5, r3
 8009a14:	da08      	bge.n	8009a28 <__swhatbuf_r+0x24>
 8009a16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	602a      	str	r2, [r5, #0]
 8009a1e:	061a      	lsls	r2, r3, #24
 8009a20:	d410      	bmi.n	8009a44 <__swhatbuf_r+0x40>
 8009a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a26:	e00e      	b.n	8009a46 <__swhatbuf_r+0x42>
 8009a28:	466a      	mov	r2, sp
 8009a2a:	f000 f951 	bl	8009cd0 <_fstat_r>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	dbf1      	blt.n	8009a16 <__swhatbuf_r+0x12>
 8009a32:	9a01      	ldr	r2, [sp, #4]
 8009a34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a3c:	425a      	negs	r2, r3
 8009a3e:	415a      	adcs	r2, r3
 8009a40:	602a      	str	r2, [r5, #0]
 8009a42:	e7ee      	b.n	8009a22 <__swhatbuf_r+0x1e>
 8009a44:	2340      	movs	r3, #64	; 0x40
 8009a46:	2000      	movs	r0, #0
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	b016      	add	sp, #88	; 0x58
 8009a4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a50 <__smakebuf_r>:
 8009a50:	898b      	ldrh	r3, [r1, #12]
 8009a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a54:	079d      	lsls	r5, r3, #30
 8009a56:	4606      	mov	r6, r0
 8009a58:	460c      	mov	r4, r1
 8009a5a:	d507      	bpl.n	8009a6c <__smakebuf_r+0x1c>
 8009a5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	6123      	str	r3, [r4, #16]
 8009a64:	2301      	movs	r3, #1
 8009a66:	6163      	str	r3, [r4, #20]
 8009a68:	b002      	add	sp, #8
 8009a6a:	bd70      	pop	{r4, r5, r6, pc}
 8009a6c:	ab01      	add	r3, sp, #4
 8009a6e:	466a      	mov	r2, sp
 8009a70:	f7ff ffc8 	bl	8009a04 <__swhatbuf_r>
 8009a74:	9900      	ldr	r1, [sp, #0]
 8009a76:	4605      	mov	r5, r0
 8009a78:	4630      	mov	r0, r6
 8009a7a:	f7ff f873 	bl	8008b64 <_malloc_r>
 8009a7e:	b948      	cbnz	r0, 8009a94 <__smakebuf_r+0x44>
 8009a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a84:	059a      	lsls	r2, r3, #22
 8009a86:	d4ef      	bmi.n	8009a68 <__smakebuf_r+0x18>
 8009a88:	f023 0303 	bic.w	r3, r3, #3
 8009a8c:	f043 0302 	orr.w	r3, r3, #2
 8009a90:	81a3      	strh	r3, [r4, #12]
 8009a92:	e7e3      	b.n	8009a5c <__smakebuf_r+0xc>
 8009a94:	4b0d      	ldr	r3, [pc, #52]	; (8009acc <__smakebuf_r+0x7c>)
 8009a96:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a98:	89a3      	ldrh	r3, [r4, #12]
 8009a9a:	6020      	str	r0, [r4, #0]
 8009a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa0:	81a3      	strh	r3, [r4, #12]
 8009aa2:	9b00      	ldr	r3, [sp, #0]
 8009aa4:	6163      	str	r3, [r4, #20]
 8009aa6:	9b01      	ldr	r3, [sp, #4]
 8009aa8:	6120      	str	r0, [r4, #16]
 8009aaa:	b15b      	cbz	r3, 8009ac4 <__smakebuf_r+0x74>
 8009aac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	f000 f91f 	bl	8009cf4 <_isatty_r>
 8009ab6:	b128      	cbz	r0, 8009ac4 <__smakebuf_r+0x74>
 8009ab8:	89a3      	ldrh	r3, [r4, #12]
 8009aba:	f023 0303 	bic.w	r3, r3, #3
 8009abe:	f043 0301 	orr.w	r3, r3, #1
 8009ac2:	81a3      	strh	r3, [r4, #12]
 8009ac4:	89a0      	ldrh	r0, [r4, #12]
 8009ac6:	4305      	orrs	r5, r0
 8009ac8:	81a5      	strh	r5, [r4, #12]
 8009aca:	e7cd      	b.n	8009a68 <__smakebuf_r+0x18>
 8009acc:	0800985d 	.word	0x0800985d

08009ad0 <memmove>:
 8009ad0:	4288      	cmp	r0, r1
 8009ad2:	b510      	push	{r4, lr}
 8009ad4:	eb01 0402 	add.w	r4, r1, r2
 8009ad8:	d902      	bls.n	8009ae0 <memmove+0x10>
 8009ada:	4284      	cmp	r4, r0
 8009adc:	4623      	mov	r3, r4
 8009ade:	d807      	bhi.n	8009af0 <memmove+0x20>
 8009ae0:	1e43      	subs	r3, r0, #1
 8009ae2:	42a1      	cmp	r1, r4
 8009ae4:	d008      	beq.n	8009af8 <memmove+0x28>
 8009ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009aea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009aee:	e7f8      	b.n	8009ae2 <memmove+0x12>
 8009af0:	4402      	add	r2, r0
 8009af2:	4601      	mov	r1, r0
 8009af4:	428a      	cmp	r2, r1
 8009af6:	d100      	bne.n	8009afa <memmove+0x2a>
 8009af8:	bd10      	pop	{r4, pc}
 8009afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009afe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b02:	e7f7      	b.n	8009af4 <memmove+0x24>

08009b04 <__malloc_lock>:
 8009b04:	4801      	ldr	r0, [pc, #4]	; (8009b0c <__malloc_lock+0x8>)
 8009b06:	f7ff bf7b 	b.w	8009a00 <__retarget_lock_acquire_recursive>
 8009b0a:	bf00      	nop
 8009b0c:	2000116c 	.word	0x2000116c

08009b10 <__malloc_unlock>:
 8009b10:	4801      	ldr	r0, [pc, #4]	; (8009b18 <__malloc_unlock+0x8>)
 8009b12:	f7ff bf76 	b.w	8009a02 <__retarget_lock_release_recursive>
 8009b16:	bf00      	nop
 8009b18:	2000116c 	.word	0x2000116c

08009b1c <_realloc_r>:
 8009b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b20:	4680      	mov	r8, r0
 8009b22:	4614      	mov	r4, r2
 8009b24:	460e      	mov	r6, r1
 8009b26:	b921      	cbnz	r1, 8009b32 <_realloc_r+0x16>
 8009b28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	f7ff b819 	b.w	8008b64 <_malloc_r>
 8009b32:	b92a      	cbnz	r2, 8009b40 <_realloc_r+0x24>
 8009b34:	f7fe ffaa 	bl	8008a8c <_free_r>
 8009b38:	4625      	mov	r5, r4
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b40:	f000 f8fa 	bl	8009d38 <_malloc_usable_size_r>
 8009b44:	4284      	cmp	r4, r0
 8009b46:	4607      	mov	r7, r0
 8009b48:	d802      	bhi.n	8009b50 <_realloc_r+0x34>
 8009b4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b4e:	d812      	bhi.n	8009b76 <_realloc_r+0x5a>
 8009b50:	4621      	mov	r1, r4
 8009b52:	4640      	mov	r0, r8
 8009b54:	f7ff f806 	bl	8008b64 <_malloc_r>
 8009b58:	4605      	mov	r5, r0
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	d0ed      	beq.n	8009b3a <_realloc_r+0x1e>
 8009b5e:	42bc      	cmp	r4, r7
 8009b60:	4622      	mov	r2, r4
 8009b62:	4631      	mov	r1, r6
 8009b64:	bf28      	it	cs
 8009b66:	463a      	movcs	r2, r7
 8009b68:	f7fe fe68 	bl	800883c <memcpy>
 8009b6c:	4631      	mov	r1, r6
 8009b6e:	4640      	mov	r0, r8
 8009b70:	f7fe ff8c 	bl	8008a8c <_free_r>
 8009b74:	e7e1      	b.n	8009b3a <_realloc_r+0x1e>
 8009b76:	4635      	mov	r5, r6
 8009b78:	e7df      	b.n	8009b3a <_realloc_r+0x1e>

08009b7a <_raise_r>:
 8009b7a:	291f      	cmp	r1, #31
 8009b7c:	b538      	push	{r3, r4, r5, lr}
 8009b7e:	4604      	mov	r4, r0
 8009b80:	460d      	mov	r5, r1
 8009b82:	d904      	bls.n	8009b8e <_raise_r+0x14>
 8009b84:	2316      	movs	r3, #22
 8009b86:	6003      	str	r3, [r0, #0]
 8009b88:	f04f 30ff 	mov.w	r0, #4294967295
 8009b8c:	bd38      	pop	{r3, r4, r5, pc}
 8009b8e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b90:	b112      	cbz	r2, 8009b98 <_raise_r+0x1e>
 8009b92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b96:	b94b      	cbnz	r3, 8009bac <_raise_r+0x32>
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f000 f831 	bl	8009c00 <_getpid_r>
 8009b9e:	462a      	mov	r2, r5
 8009ba0:	4601      	mov	r1, r0
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ba8:	f000 b818 	b.w	8009bdc <_kill_r>
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d00a      	beq.n	8009bc6 <_raise_r+0x4c>
 8009bb0:	1c59      	adds	r1, r3, #1
 8009bb2:	d103      	bne.n	8009bbc <_raise_r+0x42>
 8009bb4:	2316      	movs	r3, #22
 8009bb6:	6003      	str	r3, [r0, #0]
 8009bb8:	2001      	movs	r0, #1
 8009bba:	e7e7      	b.n	8009b8c <_raise_r+0x12>
 8009bbc:	2400      	movs	r4, #0
 8009bbe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	4798      	blx	r3
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	e7e0      	b.n	8009b8c <_raise_r+0x12>
	...

08009bcc <raise>:
 8009bcc:	4b02      	ldr	r3, [pc, #8]	; (8009bd8 <raise+0xc>)
 8009bce:	4601      	mov	r1, r0
 8009bd0:	6818      	ldr	r0, [r3, #0]
 8009bd2:	f7ff bfd2 	b.w	8009b7a <_raise_r>
 8009bd6:	bf00      	nop
 8009bd8:	2000009c 	.word	0x2000009c

08009bdc <_kill_r>:
 8009bdc:	b538      	push	{r3, r4, r5, lr}
 8009bde:	4d07      	ldr	r5, [pc, #28]	; (8009bfc <_kill_r+0x20>)
 8009be0:	2300      	movs	r3, #0
 8009be2:	4604      	mov	r4, r0
 8009be4:	4608      	mov	r0, r1
 8009be6:	4611      	mov	r1, r2
 8009be8:	602b      	str	r3, [r5, #0]
 8009bea:	f7f7 fefa 	bl	80019e2 <_kill>
 8009bee:	1c43      	adds	r3, r0, #1
 8009bf0:	d102      	bne.n	8009bf8 <_kill_r+0x1c>
 8009bf2:	682b      	ldr	r3, [r5, #0]
 8009bf4:	b103      	cbz	r3, 8009bf8 <_kill_r+0x1c>
 8009bf6:	6023      	str	r3, [r4, #0]
 8009bf8:	bd38      	pop	{r3, r4, r5, pc}
 8009bfa:	bf00      	nop
 8009bfc:	20001170 	.word	0x20001170

08009c00 <_getpid_r>:
 8009c00:	f7f7 bee7 	b.w	80019d2 <_getpid>

08009c04 <__sread>:
 8009c04:	b510      	push	{r4, lr}
 8009c06:	460c      	mov	r4, r1
 8009c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c0c:	f000 f89c 	bl	8009d48 <_read_r>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	bfab      	itete	ge
 8009c14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c16:	89a3      	ldrhlt	r3, [r4, #12]
 8009c18:	181b      	addge	r3, r3, r0
 8009c1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c1e:	bfac      	ite	ge
 8009c20:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c22:	81a3      	strhlt	r3, [r4, #12]
 8009c24:	bd10      	pop	{r4, pc}

08009c26 <__swrite>:
 8009c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c2a:	461f      	mov	r7, r3
 8009c2c:	898b      	ldrh	r3, [r1, #12]
 8009c2e:	05db      	lsls	r3, r3, #23
 8009c30:	4605      	mov	r5, r0
 8009c32:	460c      	mov	r4, r1
 8009c34:	4616      	mov	r6, r2
 8009c36:	d505      	bpl.n	8009c44 <__swrite+0x1e>
 8009c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f000 f868 	bl	8009d14 <_lseek_r>
 8009c44:	89a3      	ldrh	r3, [r4, #12]
 8009c46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c4e:	81a3      	strh	r3, [r4, #12]
 8009c50:	4632      	mov	r2, r6
 8009c52:	463b      	mov	r3, r7
 8009c54:	4628      	mov	r0, r5
 8009c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c5a:	f000 b817 	b.w	8009c8c <_write_r>

08009c5e <__sseek>:
 8009c5e:	b510      	push	{r4, lr}
 8009c60:	460c      	mov	r4, r1
 8009c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c66:	f000 f855 	bl	8009d14 <_lseek_r>
 8009c6a:	1c43      	adds	r3, r0, #1
 8009c6c:	89a3      	ldrh	r3, [r4, #12]
 8009c6e:	bf15      	itete	ne
 8009c70:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c7a:	81a3      	strheq	r3, [r4, #12]
 8009c7c:	bf18      	it	ne
 8009c7e:	81a3      	strhne	r3, [r4, #12]
 8009c80:	bd10      	pop	{r4, pc}

08009c82 <__sclose>:
 8009c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c86:	f000 b813 	b.w	8009cb0 <_close_r>
	...

08009c8c <_write_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	4d07      	ldr	r5, [pc, #28]	; (8009cac <_write_r+0x20>)
 8009c90:	4604      	mov	r4, r0
 8009c92:	4608      	mov	r0, r1
 8009c94:	4611      	mov	r1, r2
 8009c96:	2200      	movs	r2, #0
 8009c98:	602a      	str	r2, [r5, #0]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	f7f7 fed8 	bl	8001a50 <_write>
 8009ca0:	1c43      	adds	r3, r0, #1
 8009ca2:	d102      	bne.n	8009caa <_write_r+0x1e>
 8009ca4:	682b      	ldr	r3, [r5, #0]
 8009ca6:	b103      	cbz	r3, 8009caa <_write_r+0x1e>
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	bd38      	pop	{r3, r4, r5, pc}
 8009cac:	20001170 	.word	0x20001170

08009cb0 <_close_r>:
 8009cb0:	b538      	push	{r3, r4, r5, lr}
 8009cb2:	4d06      	ldr	r5, [pc, #24]	; (8009ccc <_close_r+0x1c>)
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	4608      	mov	r0, r1
 8009cba:	602b      	str	r3, [r5, #0]
 8009cbc:	f7f7 fee4 	bl	8001a88 <_close>
 8009cc0:	1c43      	adds	r3, r0, #1
 8009cc2:	d102      	bne.n	8009cca <_close_r+0x1a>
 8009cc4:	682b      	ldr	r3, [r5, #0]
 8009cc6:	b103      	cbz	r3, 8009cca <_close_r+0x1a>
 8009cc8:	6023      	str	r3, [r4, #0]
 8009cca:	bd38      	pop	{r3, r4, r5, pc}
 8009ccc:	20001170 	.word	0x20001170

08009cd0 <_fstat_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	4d07      	ldr	r5, [pc, #28]	; (8009cf0 <_fstat_r+0x20>)
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	4608      	mov	r0, r1
 8009cda:	4611      	mov	r1, r2
 8009cdc:	602b      	str	r3, [r5, #0]
 8009cde:	f7f7 fedf 	bl	8001aa0 <_fstat>
 8009ce2:	1c43      	adds	r3, r0, #1
 8009ce4:	d102      	bne.n	8009cec <_fstat_r+0x1c>
 8009ce6:	682b      	ldr	r3, [r5, #0]
 8009ce8:	b103      	cbz	r3, 8009cec <_fstat_r+0x1c>
 8009cea:	6023      	str	r3, [r4, #0]
 8009cec:	bd38      	pop	{r3, r4, r5, pc}
 8009cee:	bf00      	nop
 8009cf0:	20001170 	.word	0x20001170

08009cf4 <_isatty_r>:
 8009cf4:	b538      	push	{r3, r4, r5, lr}
 8009cf6:	4d06      	ldr	r5, [pc, #24]	; (8009d10 <_isatty_r+0x1c>)
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	4608      	mov	r0, r1
 8009cfe:	602b      	str	r3, [r5, #0]
 8009d00:	f7f7 fede 	bl	8001ac0 <_isatty>
 8009d04:	1c43      	adds	r3, r0, #1
 8009d06:	d102      	bne.n	8009d0e <_isatty_r+0x1a>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	b103      	cbz	r3, 8009d0e <_isatty_r+0x1a>
 8009d0c:	6023      	str	r3, [r4, #0]
 8009d0e:	bd38      	pop	{r3, r4, r5, pc}
 8009d10:	20001170 	.word	0x20001170

08009d14 <_lseek_r>:
 8009d14:	b538      	push	{r3, r4, r5, lr}
 8009d16:	4d07      	ldr	r5, [pc, #28]	; (8009d34 <_lseek_r+0x20>)
 8009d18:	4604      	mov	r4, r0
 8009d1a:	4608      	mov	r0, r1
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	2200      	movs	r2, #0
 8009d20:	602a      	str	r2, [r5, #0]
 8009d22:	461a      	mov	r2, r3
 8009d24:	f7f7 fed7 	bl	8001ad6 <_lseek>
 8009d28:	1c43      	adds	r3, r0, #1
 8009d2a:	d102      	bne.n	8009d32 <_lseek_r+0x1e>
 8009d2c:	682b      	ldr	r3, [r5, #0]
 8009d2e:	b103      	cbz	r3, 8009d32 <_lseek_r+0x1e>
 8009d30:	6023      	str	r3, [r4, #0]
 8009d32:	bd38      	pop	{r3, r4, r5, pc}
 8009d34:	20001170 	.word	0x20001170

08009d38 <_malloc_usable_size_r>:
 8009d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d3c:	1f18      	subs	r0, r3, #4
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	bfbc      	itt	lt
 8009d42:	580b      	ldrlt	r3, [r1, r0]
 8009d44:	18c0      	addlt	r0, r0, r3
 8009d46:	4770      	bx	lr

08009d48 <_read_r>:
 8009d48:	b538      	push	{r3, r4, r5, lr}
 8009d4a:	4d07      	ldr	r5, [pc, #28]	; (8009d68 <_read_r+0x20>)
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	4608      	mov	r0, r1
 8009d50:	4611      	mov	r1, r2
 8009d52:	2200      	movs	r2, #0
 8009d54:	602a      	str	r2, [r5, #0]
 8009d56:	461a      	mov	r2, r3
 8009d58:	f7f7 fe5d 	bl	8001a16 <_read>
 8009d5c:	1c43      	adds	r3, r0, #1
 8009d5e:	d102      	bne.n	8009d66 <_read_r+0x1e>
 8009d60:	682b      	ldr	r3, [r5, #0]
 8009d62:	b103      	cbz	r3, 8009d66 <_read_r+0x1e>
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	bd38      	pop	{r3, r4, r5, pc}
 8009d68:	20001170 	.word	0x20001170

08009d6c <trunc>:
 8009d6c:	ec51 0b10 	vmov	r0, r1, d0
 8009d70:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009d74:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8009d78:	2b13      	cmp	r3, #19
 8009d7a:	b5d0      	push	{r4, r6, r7, lr}
 8009d7c:	460c      	mov	r4, r1
 8009d7e:	dc10      	bgt.n	8009da2 <trunc+0x36>
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	bfa5      	ittet	ge
 8009d84:	4a11      	ldrge	r2, [pc, #68]	; (8009dcc <trunc+0x60>)
 8009d86:	fa42 f303 	asrge.w	r3, r2, r3
 8009d8a:	2100      	movlt	r1, #0
 8009d8c:	2100      	movge	r1, #0
 8009d8e:	bfb9      	ittee	lt
 8009d90:	2000      	movlt	r0, #0
 8009d92:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8009d96:	2000      	movge	r0, #0
 8009d98:	ea24 0103 	bicge.w	r1, r4, r3
 8009d9c:	ec41 0b10 	vmov	d0, r0, r1
 8009da0:	bdd0      	pop	{r4, r6, r7, pc}
 8009da2:	2b33      	cmp	r3, #51	; 0x33
 8009da4:	dd08      	ble.n	8009db8 <trunc+0x4c>
 8009da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009daa:	d1f7      	bne.n	8009d9c <trunc+0x30>
 8009dac:	ee10 2a10 	vmov	r2, s0
 8009db0:	460b      	mov	r3, r1
 8009db2:	f7f6 fa6b 	bl	800028c <__adddf3>
 8009db6:	e7f1      	b.n	8009d9c <trunc+0x30>
 8009db8:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8009dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009dc0:	fa23 f202 	lsr.w	r2, r3, r2
 8009dc4:	ea20 0602 	bic.w	r6, r0, r2
 8009dc8:	4630      	mov	r0, r6
 8009dca:	e7e7      	b.n	8009d9c <trunc+0x30>
 8009dcc:	000fffff 	.word	0x000fffff

08009dd0 <_init>:
 8009dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd2:	bf00      	nop
 8009dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dd6:	bc08      	pop	{r3}
 8009dd8:	469e      	mov	lr, r3
 8009dda:	4770      	bx	lr

08009ddc <_fini>:
 8009ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dde:	bf00      	nop
 8009de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009de2:	bc08      	pop	{r3}
 8009de4:	469e      	mov	lr, r3
 8009de6:	4770      	bx	lr
